
C:\Users\georg\AppData\Local\arduino\sketches\C334C240AF1747013D6C1964B07845F8/ExhibitionDiGeeCodeTrueBinaryFeedbackVers.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ec0 	.word	0x20001ec0
6000142c:	200027e0 	.word	0x200027e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d4 	bl	600017ec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f972 	bl	600017fc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f9de 	bl	6000190c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fb75 	bl	60001c50 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fb12 	bl	60001bd4 <analog_init>
	pwm_init();
600015b0:	f000 fb46 	bl	60001c40 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f9d8 	bl	60001968 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f91a 	bl	600017f0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 fa69 	bl	60001a98 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f913 	bl	600017f8 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f90f 	bl	600017f4 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fb37 	bl	60001c48 <____libc_init_array_veneer>
	main();
600015da:	f000 fb45 	bl	60001c68 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00007fe8 	.word	0x00007fe8
600015ec:	600023d0 	.word	0x600023d0
600015f0:	00000000 	.word	0x00000000
600015f4:	20001ec0 	.word	0x20001ec0
600015f8:	6000a3bc 	.word	0x6000a3bc
600015fc:	20000000 	.word	0x20000000
60001600:	20001c00 	.word	0x20001c00
60001604:	000061d1 	.word	0x000061d1
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00004ea9 	.word	0x00004ea9
60001618:	20002778 	.word	0x20002778
6000161c:	00004ead 	.word	0x00004ead
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	2000277c 	.word	0x2000277c
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001670:	6943      	ldr	r3, [r0, #20]
60001672:	4a0a      	ldr	r2, [pc, #40]	; (6000169c <TwoWire::configSDApin(unsigned char)+0x2c>)
60001674:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001678:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167a:	7a03      	ldrb	r3, [r0, #8]
6000167c:	4c08      	ldr	r4, [pc, #32]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x30>)
6000167e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001682:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001688:	68c2      	ldr	r2, [r0, #12]
6000168a:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000168c:	6903      	ldr	r3, [r0, #16]
6000168e:	b10b      	cbz	r3, 60001694 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001690:	6942      	ldr	r2, [r0, #20]
60001692:	601a      	str	r2, [r3, #0]
	}
}
60001694:	f85d 4b04 	ldr.w	r4, [sp], #4
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	200009c0 	.word	0x200009c0
600016a0:	0001f861 	.word	0x0001f861

600016a4 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a4:	6943      	ldr	r3, [r0, #20]
600016a6:	7e02      	ldrb	r2, [r0, #24]
600016a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016ac:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b0:	458c      	cmp	ip, r1
600016b2:	d01c      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b4:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016b6:	2aff      	cmp	r2, #255	; 0xff
600016b8:	d019      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016ba:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016bc:	b510      	push	{r4, lr}
600016be:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c0:	d016      	beq.n	600016f0 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c2:	7e1a      	ldrb	r2, [r3, #24]
600016c4:	2aff      	cmp	r2, #255	; 0xff
600016c6:	d006      	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016c8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
600016ce:	6812      	ldr	r2, [r2, #0]
600016d0:	421a      	tst	r2, r3
600016d2:	d101      	bne.n	600016d8 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d4:	7621      	strb	r1, [r4, #24]
}
600016d6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016d8:	4b06      	ldr	r3, [pc, #24]	; (600016f4 <TwoWire::setSDA(unsigned char)+0x50>)
600016da:	2205      	movs	r2, #5
		configSDApin(newindex);
600016dc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016de:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e2:	685b      	ldr	r3, [r3, #4]
600016e4:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016e6:	f7ff ffc3 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ea:	7621      	strb	r1, [r4, #24]
600016ec:	e7f3      	b.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016ee:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f0:	2100      	movs	r1, #0
600016f2:	e7ea      	b.n	600016ca <TwoWire::setSDA(unsigned char)+0x26>
600016f4:	200009c0 	.word	0x200009c0

600016f8 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	4a0a      	ldr	r2, [pc, #40]	; (60001724 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016fc:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001700:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001702:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
60001706:	4c08      	ldr	r4, [pc, #32]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001708:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000170c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001710:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001714:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001716:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001718:	b10b      	cbz	r3, 6000171e <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171a:	6b42      	ldr	r2, [r0, #52]	; 0x34
6000171c:	601a      	str	r2, [r3, #0]
	}
}
6000171e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001722:	4770      	bx	lr
60001724:	200009c0 	.word	0x200009c0
60001728:	0001f861 	.word	0x0001f861

6000172c <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000172c:	6943      	ldr	r3, [r0, #20]
6000172e:	7e42      	ldrb	r2, [r0, #25]
60001730:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001734:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001738:	458c      	cmp	ip, r1
6000173a:	d01e      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000173c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001740:	2aff      	cmp	r2, #255	; 0xff
60001742:	d01a      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001744:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001746:	b510      	push	{r4, lr}
60001748:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174a:	d017      	beq.n	6000177c <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
6000174c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001750:	2aff      	cmp	r2, #255	; 0xff
60001752:	d006      	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
60001754:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001756:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175a:	6812      	ldr	r2, [r2, #0]
6000175c:	421a      	tst	r2, r3
6000175e:	d101      	bne.n	60001764 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001760:	7661      	strb	r1, [r4, #25]
}
60001762:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001764:	4b06      	ldr	r3, [pc, #24]	; (60001780 <TwoWire::setSCL(unsigned char)+0x54>)
60001766:	2205      	movs	r2, #5
		configSCLpin(newindex);
60001768:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001772:	f7ff ffc1 	bl	600016f8 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
60001776:	7661      	strb	r1, [r4, #25]
60001778:	e7f3      	b.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
6000177a:	4770      	bx	lr
		if (scl_pin == pin) break;
6000177c:	2100      	movs	r1, #0
6000177e:	e7ea      	b.n	60001756 <TwoWire::setSCL(unsigned char)+0x2a>
60001780:	200009c0 	.word	0x200009c0

60001784 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001784:	4916      	ldr	r1, [pc, #88]	; (600017e0 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001786:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
6000178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001792:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001794:	638b      	str	r3, [r1, #56]	; 0x38
{
60001796:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001798:	4d12      	ldr	r5, [pc, #72]	; (600017e4 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179a:	e9d2 1300 	ldrd	r1, r3, [r2]
6000179e:	680a      	ldr	r2, [r1, #0]
600017a0:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a2:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a4:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017a6:	2202      	movs	r2, #2
	port->MCR = 0;
600017a8:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017aa:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017ac:	4a0e      	ldr	r2, [pc, #56]	; (600017e8 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017ae:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b2:	2201      	movs	r2, #1
600017b4:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017b6:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017b8:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017bc:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017be:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c4:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017c6:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c8:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ca:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017cc:	7e01      	ldrb	r1, [r0, #24]
600017ce:	f7ff ff4f 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d2:	7e61      	ldrb	r1, [r4, #25]
600017d4:	4620      	mov	r0, r4
}
600017d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017da:	f7ff bf8d 	b.w	600016f8 <TwoWire::configSCLpin(unsigned char)>
600017de:	bf00      	nop
600017e0:	400fc000 	.word	0x400fc000
600017e4:	05050bb8 	.word	0x05050bb8
600017e8:	1928373b 	.word	0x1928373b

600017ec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017ec:	4770      	bx	lr
600017ee:	bf00      	nop

600017f0 <startup_default_middle_hook>:
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_late_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017f8:	bf00      	nop
600017fa:	4770      	bx	lr

600017fc <configure_cache>:
{
600017fc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001802:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001804:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001806:	4831      	ldr	r0, [pc, #196]	; (600018cc <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001808:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000180c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001810:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001812:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001816:	482e      	ldr	r0, [pc, #184]	; (600018d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001818:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000181c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001822:	482c      	ldr	r0, [pc, #176]	; (600018d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001824:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001828:	4a2b      	ldr	r2, [pc, #172]	; (600018d8 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000182e:	4c2b      	ldr	r4, [pc, #172]	; (600018dc <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001834:	482a      	ldr	r0, [pc, #168]	; (600018e0 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001836:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000183e:	4c29      	ldr	r4, [pc, #164]	; (600018e4 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001840:	4829      	ldr	r0, [pc, #164]	; (600018e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001846:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184a:	4c28      	ldr	r4, [pc, #160]	; (600018ec <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000184c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001850:	4827      	ldr	r0, [pc, #156]	; (600018f0 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001852:	4a28      	ldr	r2, [pc, #160]	; (600018f4 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001854:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000185c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001860:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001864:	4c24      	ldr	r4, [pc, #144]	; (600018f8 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001866:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001868:	4824      	ldr	r0, [pc, #144]	; (600018fc <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001872:	4a23      	ldr	r2, [pc, #140]	; (60001900 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001874:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001878:	4c22      	ldr	r4, [pc, #136]	; (60001904 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000187e:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001882:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001886:	4820      	ldr	r0, [pc, #128]	; (60001908 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001888:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000188c:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188e:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001892:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001896:	bf00      	nop
	asm("nop");
60001898:	bf00      	nop
	asm("nop");
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a0:	2201      	movs	r2, #1
600018a2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018aa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018ae:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018b6:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018ba:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018be:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ca:	4770      	bx	lr
600018cc:	1000003f 	.word	0x1000003f
600018d0:	07080025 	.word	0x07080025
600018d4:	00100009 	.word	0x00100009
600018d8:	200027e0 	.word	0x200027e0
600018dc:	00200013 	.word	0x00200013
600018e0:	07020021 	.word	0x07020021
600018e4:	20000014 	.word	0x20000014
600018e8:	13080025 	.word	0x13080025
600018ec:	10000009 	.word	0x10000009
600018f0:	20200016 	.word	0x20200016
600018f4:	130b0027 	.word	0x130b0027
600018f8:	40000017 	.word	0x40000017
600018fc:	60000018 	.word	0x60000018
60001900:	070b002f 	.word	0x070b002f
60001904:	70000019 	.word	0x70000019
60001908:	8000001a 	.word	0x8000001a

6000190c <usb_pll_start>:
{
6000190c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000190e:	4a15      	ldr	r2, [pc, #84]	; (60001964 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001910:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001912:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001916:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000191a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000191e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001922:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001926:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001928:	f013 0f02 	tst.w	r3, #2
6000192c:	d10e      	bne.n	6000194c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000192e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001932:	d00f      	beq.n	60001954 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001934:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001938:	d00e      	beq.n	60001958 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000193a:	2b00      	cmp	r3, #0
6000193c:	daf3      	bge.n	60001926 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000193e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001942:	d10b      	bne.n	6000195c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001944:	065b      	lsls	r3, r3, #25
60001946:	d50b      	bpl.n	60001960 <usb_pll_start+0x54>
}
60001948:	bcf0      	pop	{r4, r5, r6, r7}
6000194a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000194c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000194e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001950:	6190      	str	r0, [r2, #24]
			continue;
60001952:	e7e8      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001954:	6155      	str	r5, [r2, #20]
			continue;
60001956:	e7e6      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001958:	6156      	str	r6, [r2, #20]
			continue;
6000195a:	e7e4      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000195c:	6191      	str	r1, [r2, #24]
			continue;
6000195e:	e7e2      	b.n	60001926 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001960:	6157      	str	r7, [r2, #20]
			continue;
60001962:	e7e0      	b.n	60001926 <usb_pll_start+0x1a>
60001964:	400d8000 	.word	0x400d8000

60001968 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001968:	4a3f      	ldr	r2, [pc, #252]	; (60001a68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000196a:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000196c:	493f      	ldr	r1, [pc, #252]	; (60001a6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000196e:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001972:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001976:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000197a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001a70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000197e:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001982:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001a74 <tempmon_init+0x10c>
{
60001986:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000198c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001990:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001994:	4d38      	ldr	r5, [pc, #224]	; (60001a78 <tempmon_init+0x110>)
60001996:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001998:	4c38      	ldr	r4, [pc, #224]	; (60001a7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000199a:	4839      	ldr	r0, [pc, #228]	; (60001a80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000199c:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000199e:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019a2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019a4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019ac:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019b0:	ee07 1a10 	vmov	s14, r1
600019b4:	4b33      	ldr	r3, [pc, #204]	; (60001a84 <tempmon_init+0x11c>)
600019b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019ba:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019c0:	4931      	ldr	r1, [pc, #196]	; (60001a88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019c2:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019c6:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019ca:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019ce:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019d2:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600019d6:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019da:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600019de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019e2:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019e6:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019ea:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019ee:	4827      	ldr	r0, [pc, #156]	; (60001a8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f0:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f4:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019f8:	ee75 5a87 	vadd.f32	s11, s11, s14
600019fc:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a00:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a04:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a08:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a0c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a10:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a18:	ee16 3a10 	vmov	r3, s12
60001a1c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a24:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001a28:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a2a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a2e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001a36:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001a3a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001a3c:	4914      	ldr	r1, [pc, #80]	; (60001a90 <tempmon_init+0x128>)
60001a3e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001a42:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001a46:	f043 0302 	orr.w	r3, r3, #2
60001a4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001a4e:	4b11      	ldr	r3, [pc, #68]	; (60001a94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001a50:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001a54:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001a58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001a5c:	2201      	movs	r2, #1
}
60001a5e:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001a60:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001a64:	4770      	bx	lr
60001a66:	bf00      	nop
60001a68:	400d8100 	.word	0x400d8100
60001a6c:	401f4400 	.word	0x401f4400
60001a70:	42aa0000 	.word	0x42aa0000
60001a74:	42b40000 	.word	0x42b40000
60001a78:	20002768 	.word	0x20002768
60001a7c:	20002764 	.word	0x20002764
60001a80:	2000276c 	.word	0x2000276c
60001a84:	20002770 	.word	0x20002770
60001a88:	0fff0000 	.word	0x0fff0000
60001a8c:	e000e400 	.word	0xe000e400
60001a90:	20001c00 	.word	0x20001c00
60001a94:	00006395 	.word	0x00006395

60001a98 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001a98:	4b31      	ldr	r3, [pc, #196]	; (60001b60 <usb_init+0xc8>)
60001a9a:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001a9e:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001aa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001aa4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001aa8:	f000 f8c6 	bl	60001c38 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001aac:	4a2d      	ldr	r2, [pc, #180]	; (60001b64 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001aae:	492e      	ldr	r1, [pc, #184]	; (60001b68 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ab0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ab4:	482d      	ldr	r0, [pc, #180]	; (60001b6c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ab6:	f043 0303 	orr.w	r3, r3, #3
60001aba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001abe:	4b2c      	ldr	r3, [pc, #176]	; (60001b70 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ac0:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ac4:	6802      	ldr	r2, [r0, #0]
60001ac6:	421a      	tst	r2, r3
60001ac8:	d103      	bne.n	60001ad2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001aca:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ace:	079a      	lsls	r2, r3, #30
60001ad0:	d01b      	beq.n	60001b0a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ad2:	4a25      	ldr	r2, [pc, #148]	; (60001b68 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ad4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ad8:	4b24      	ldr	r3, [pc, #144]	; (60001b6c <usb_init+0xd4>)
60001ada:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001adc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001ae0:	f043 0302 	orr.w	r3, r3, #2
60001ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001ae8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001aec:	079b      	lsls	r3, r3, #30
60001aee:	d4fb      	bmi.n	60001ae8 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001af0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001af4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001af8:	4b1c      	ldr	r3, [pc, #112]	; (60001b6c <usb_init+0xd4>)
60001afa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001afe:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001b02:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b04:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001b06:	f000 f8a7 	bl	60001c58 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b0a:	4a18      	ldr	r2, [pc, #96]	; (60001b6c <usb_init+0xd4>)
60001b0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b10:	4c15      	ldr	r4, [pc, #84]	; (60001b68 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001b12:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b14:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b16:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b18:	4b16      	ldr	r3, [pc, #88]	; (60001b74 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001b1a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b1c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b20:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b24:	4618      	mov	r0, r3
60001b26:	f000 f89b 	bl	60001c60 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001b2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b2e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b30:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b34:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b38:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001b3a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001b3e:	641a      	str	r2, [r3, #64]	; 0x40
60001b40:	4b0d      	ldr	r3, [pc, #52]	; (60001b78 <usb_init+0xe0>)
60001b42:	4a0e      	ldr	r2, [pc, #56]	; (60001b7c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b44:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001b48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001b4c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001b50:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001b54:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001b56:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001b5a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001b5e:	bd10      	pop	{r4, pc}
60001b60:	400d8000 	.word	0x400d8000
60001b64:	400fc000 	.word	0x400fc000
60001b68:	402e0000 	.word	0x402e0000
60001b6c:	400d9000 	.word	0x400d9000
60001b70:	001e1c00 	.word	0x001e1c00
60001b74:	20000000 	.word	0x20000000
60001b78:	20001c00 	.word	0x20001c00
60001b7c:	0000657d 	.word	0x0000657d

60001b80 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001b80:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001b82:	4b0e      	ldr	r3, [pc, #56]	; (60001bbc <_reboot_Teensyduino_+0x3c>)
60001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001b86:	079b      	lsls	r3, r3, #30
60001b88:	d400      	bmi.n	60001b8c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001b8a:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001b8c:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001b8e:	4b0c      	ldr	r3, [pc, #48]	; (60001bc0 <_reboot_Teensyduino_+0x40>)
60001b90:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001b92:	4a0c      	ldr	r2, [pc, #48]	; (60001bc4 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001b94:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001b98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001b9c:	490a      	ldr	r1, [pc, #40]	; (60001bc8 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001b9e:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ba2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ba4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ba6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001baa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001bae:	4807      	ldr	r0, [pc, #28]	; (60001bcc <_reboot_Teensyduino_+0x4c>)
60001bb0:	4a07      	ldr	r2, [pc, #28]	; (60001bd0 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bb2:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001bb4:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bb6:	689b      	ldr	r3, [r3, #8]
60001bb8:	4798      	blx	r3
	}
	__builtin_unreachable();
60001bba:	bf00      	nop
60001bbc:	401f4400 	.word	0x401f4400
60001bc0:	402e0000 	.word	0x402e0000
60001bc4:	400ac000 	.word	0x400ac000
60001bc8:	00200003 	.word	0x00200003
60001bcc:	20208000 	.word	0x20208000
60001bd0:	eb120000 	.word	0xeb120000

60001bd4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001bd4:	4b10      	ldr	r3, [pc, #64]	; (60001c18 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001bd6:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001bd8:	4a10      	ldr	r2, [pc, #64]	; (60001c1c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001bda:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001bdc:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001be0:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001be2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001be4:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001be8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001bea:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001bee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001bf0:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001bf2:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001bf4:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001bf6:	061b      	lsls	r3, r3, #24
60001bf8:	d4fc      	bmi.n	60001bf4 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001bfa:	4a09      	ldr	r2, [pc, #36]	; (60001c20 <analog_init+0x4c>)
60001bfc:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001c00:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001c02:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001c04:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001c06:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001c08:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001c0c:	d1fb      	bne.n	60001c06 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001c0e:	4a05      	ldr	r2, [pc, #20]	; (60001c24 <analog_init+0x50>)
60001c10:	7013      	strb	r3, [r2, #0]
}
60001c12:	f85d 4b04 	ldr.w	r4, [sp], #4
60001c16:	4770      	bx	lr
60001c18:	400fc000 	.word	0x400fc000
60001c1c:	400c4000 	.word	0x400c4000
60001c20:	400c8000 	.word	0x400c8000
60001c24:	200027a1 	.word	0x200027a1

60001c28 <_init>:
60001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001c2a:	bf00      	nop
60001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001c2e:	bc08      	pop	{r3}
60001c30:	469e      	mov	lr, r3
60001c32:	4770      	bx	lr
60001c34:	0000      	movs	r0, r0
	...

60001c38 <__usb_init_serialnumber_veneer>:
60001c38:	f85f f000 	ldr.w	pc, [pc]	; 60001c3c <__usb_init_serialnumber_veneer+0x4>
60001c3c:	00006ced 	.word	0x00006ced

60001c40 <__pwm_init_veneer>:
60001c40:	f85f f000 	ldr.w	pc, [pc]	; 60001c44 <__pwm_init_veneer+0x4>
60001c44:	000060dd 	.word	0x000060dd

60001c48 <____libc_init_array_veneer>:
60001c48:	f85f f000 	ldr.w	pc, [pc]	; 60001c4c <____libc_init_array_veneer+0x4>
60001c4c:	00007c39 	.word	0x00007c39

60001c50 <__set_arm_clock_veneer>:
60001c50:	f85f f000 	ldr.w	pc, [pc]	; 60001c54 <__set_arm_clock_veneer+0x4>
60001c54:	0000592d 	.word	0x0000592d

60001c58 <__delay_veneer>:
60001c58:	f85f f000 	ldr.w	pc, [pc]	; 60001c5c <__delay_veneer+0x4>
60001c5c:	00005c1d 	.word	0x00005c1d

60001c60 <__memset_veneer>:
60001c60:	f85f f000 	ldr.w	pc, [pc]	; 60001c64 <__memset_veneer+0x4>
60001c64:	00007b65 	.word	0x00007b65

60001c68 <__main_veneer>:
60001c68:	f85f f000 	ldr.w	pc, [pc]	; 60001c6c <__main_veneer+0x4>
60001c6c:	00005eb5 	.word	0x00005eb5

60001c70 <__frame_dummy_init_array_entry>:
60001c70:	00000105 00001bc1 000057f5              .........W..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
  			state = newState;
  			return 1;
	}
  }
  
  return 0;
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
  			return 1;
      26:	699d      	ldr	r5, [r3, #24]
  			state = newState;
      28:	695a      	ldr	r2, [r3, #20]
  			previous_millis = millis();
      2a:	4015      	ands	r5, r2
}
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x26>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0xa0>)
      30:	2601      	movs	r6, #1
      32:	619d      	str	r5, [r3, #24]

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      34:	fa95 f4a5 	rbit	r4, r5
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0x10>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa4>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4c>
    return bpmTickInterval(bpm, inputStep, 16.0);
  } 
  else {
    return bpmTickInterval(bpm, 16.0, inputStep);
  }
}
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa8>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
      6a:	4798      	blx	r3

byte Button2::_getState() const {
  if (get_state_cb != NULL) {
    return get_state_cb();
  } else {
    return hw->digitalRead(pin);
      6c:	43a5      	bics	r5, r4
    _reportClicks();
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x36>
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xac>)
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
    _releasedNow(now);
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x72>
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xb0>)
    return;
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	if(!(ch & 0x80)) {
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5c>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb4>)
	if (pin > sizeof(pin_to_channel)) return 0;
      98:	699d      	ldr	r5, [r3, #24]
}
      9a:	695a      	ldr	r2, [r3, #20]
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x98>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb8>)
      a2:	2601      	movs	r6, #1
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x82>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20001754 	.word	0x20001754
      c8:	42004000 	.word	0x42004000
      cc:	200017d4 	.word	0x200017d4
      d0:	42008000 	.word	0x42008000
      d4:	20001854 	.word	0x20001854
      d8:	4200c000 	.word	0x4200c000
      dc:	200018d4 	.word	0x200018d4

000000e0 <register_tm_clones>:
  ssd1306_command1(0X00);
  ssd1306_command1(stop);
  static const uint8_t PROGMEM scrollList4c[] = {0X01, SSD1306_ACTIVATE_SCROLL};
  ssd1306_commandList(scrollList4c, sizeof(scrollList4c));
  TRANSACTION_END
}
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
		}
	}
	else
	for (mask=0x01; mask; mask <<= 1) {
      e4:	1a1b      	subs	r3, r3, r0
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
      e6:	0fd9      	lsrs	r1, r3, #31
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	p = digital_pin_to_info_PGM + pin;
      ec:	1049      	asrs	r1, r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
      f4:	4718      	bx	r3
			*(p->reg + 0x21) = mask; // set register
      f6:	4770      	bx	lr
      f8:	20001ec0 	.word	0x20001ec0
	mask = p->mask;
      fc:	20001ec0 	.word	0x20001ec0
	if (pinmode & mask) {
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
			*(p->reg + 0x22) = mask; // clear register
     104:	b508      	push	{r3, lr}
	for (mask=0x01; mask; mask <<= 1) {
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
	if (pin >= CORE_NUM_DIGITAL) return;
     10e:	f3af 8000 	nop.w
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
     11a:	bf00      	nop
     11c:	00000000 	.word	0x00000000
     120:	20002710 	.word	0x20002710
	pinmode = *(p->reg + 1);
     124:	6000d000 	.word	0x6000d000

00000128 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
     128:	6803      	ldr	r3, [r0, #0]
     12a:	4718      	bx	r3

0000012c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
     12c:	680b      	ldr	r3, [r1, #0]
     12e:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
     134:	680b      	ldr	r3, [r1, #0]
     136:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     138:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	bf00      	nop

0000013c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
     13c:	4770      	bx	lr
     13e:	bf00      	nop

00000140 <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
     140:	b510      	push	{r4, lr}
     142:	4604      	mov	r4, r0
		end();
     144:	f005 fb1e 	bl	5784 <IntervalTimer::end()>
	}
     148:	4620      	mov	r0, r4
     14a:	bd10      	pop	{r4, pc}

0000014c <ArduinoHardware::pinMode(int, int)>:
    int digitalRead(int pin) {
        
        return ::digitalRead(pin);
    }
    void pinMode(int pin, int mode) {
        ::pinMode(pin, mode);
     14c:	b2c8      	uxtb	r0, r1
     14e:	b2d1      	uxtb	r1, r2
     150:	f005 bdf4 	b.w	5d3c <pinMode>

00000154 <ArduinoHardware::digitalWrite(int, int)>:
    }
    void digitalWrite(int pin, int value) {
        ::digitalWrite(pin, value);
     154:	b2c8      	uxtb	r0, r1
     156:	b2d1      	uxtb	r1, r2
     158:	f005 bdb4 	b.w	5cc4 <digitalWrite>

0000015c <ArduinoHardware::digitalRead(int)>:
        return ::digitalRead(pin);
     15c:	b2c8      	uxtb	r0, r1
    int digitalRead(int pin) {
     15e:	b508      	push	{r3, lr}
        return ::digitalRead(pin);
     160:	f005 fdda 	bl	5d18 <digitalRead>
    }
     164:	bd08      	pop	{r3, pc}
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     166:	bf00      	nop

00000168 <Encoder::isr0()>:
#endif // ENCODER_USE_INTERRUPTS


#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     168:	4b21      	ldr	r3, [pc, #132]	; (1f0 <Encoder::isr0()+0x88>)
     16a:	681a      	ldr	r2, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     16c:	e9d2 1000 	ldrd	r1, r0, [r2]
     170:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     172:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     174:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     176:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     178:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     17a:	6894      	ldr	r4, [r2, #8]
     17c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     180:	d02e      	beq.n	1e0 <Encoder::isr0()+0x78>
		uint8_t state = arg->state & 3;
     182:	7c13      	ldrb	r3, [r2, #16]
     184:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     188:	b9d9      	cbnz	r1, 1c2 <Encoder::isr0()+0x5a>
		if (p2val) state |= 8;
     18a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     18e:	0899      	lsrs	r1, r3, #2
		switch (state) {
     190:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     192:	7411      	strb	r1, [r2, #16]
		switch (state) {
     194:	2b0d      	cmp	r3, #13
     196:	d80b      	bhi.n	1b0 <Encoder::isr0()+0x48>
     198:	e8df f003 	tbb	[pc, r3]
     19c:	071c070d 	.word	0x071c070d
     1a0:	0d0d160a 	.word	0x0d0d160a
     1a4:	1c070a16 	.word	0x1c070a16
     1a8:	0d07      	.short	0x0d07
				arg->position--;
     1aa:	6953      	ldr	r3, [r2, #20]
     1ac:	3b01      	subs	r3, #1
     1ae:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
     1b4:	4770      	bx	lr
				arg->position++;
     1b6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1b8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     1bc:	3301      	adds	r3, #1
     1be:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1c0:	4770      	bx	lr
		if (p1val) state |= 4;
     1c2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     1c6:	e7e0      	b.n	18a <Encoder::isr0()+0x22>
				arg->position -= 2;
     1c8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     1ce:	3b02      	subs	r3, #2
     1d0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1d2:	4770      	bx	lr
				arg->position += 2;
     1d4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     1da:	3302      	adds	r3, #2
     1dc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
     1de:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     1e0:	7c13      	ldrb	r3, [r2, #16]
     1e2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     1e6:	2900      	cmp	r1, #0
     1e8:	d0d1      	beq.n	18e <Encoder::isr0()+0x26>
     1ea:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     1ee:	e7ce      	b.n	18e <Encoder::isr0()+0x26>
     1f0:	20002200 	.word	0x20002200

000001f4 <Encoder::isr1()>:
	#endif
	#ifdef CORE_INT1_PIN
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     1f4:	4b21      	ldr	r3, [pc, #132]	; (27c <Encoder::isr1()+0x88>)
     1f6:	685a      	ldr	r2, [r3, #4]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     1f8:	e9d2 1000 	ldrd	r1, r0, [r2]
     1fc:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     1fe:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     200:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     202:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     204:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     206:	6894      	ldr	r4, [r2, #8]
     208:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     20c:	d02e      	beq.n	26c <Encoder::isr1()+0x78>
		uint8_t state = arg->state & 3;
     20e:	7c13      	ldrb	r3, [r2, #16]
     210:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     214:	b9d9      	cbnz	r1, 24e <Encoder::isr1()+0x5a>
		if (p2val) state |= 8;
     216:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     21a:	0899      	lsrs	r1, r3, #2
		switch (state) {
     21c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     21e:	7411      	strb	r1, [r2, #16]
		switch (state) {
     220:	2b0d      	cmp	r3, #13
     222:	d80b      	bhi.n	23c <Encoder::isr1()+0x48>
     224:	e8df f003 	tbb	[pc, r3]
     228:	071c070d 	.word	0x071c070d
     22c:	0d0d160a 	.word	0x0d0d160a
     230:	1c070a16 	.word	0x1c070a16
     234:	0d07      	.short	0x0d07
				arg->position--;
     236:	6953      	ldr	r3, [r2, #20]
     238:	3b01      	subs	r3, #1
     23a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     23c:	f85d 4b04 	ldr.w	r4, [sp], #4
     240:	4770      	bx	lr
				arg->position++;
     242:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     244:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     248:	3301      	adds	r3, #1
     24a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     24c:	4770      	bx	lr
		if (p1val) state |= 4;
     24e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     252:	e7e0      	b.n	216 <Encoder::isr1()+0x22>
				arg->position -= 2;
     254:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     256:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     25a:	3b02      	subs	r3, #2
     25c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     25e:	4770      	bx	lr
				arg->position += 2;
     260:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     262:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     266:	3302      	adds	r3, #2
     268:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
     26a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     26c:	7c13      	ldrb	r3, [r2, #16]
     26e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     272:	2900      	cmp	r1, #0
     274:	d0d1      	beq.n	21a <Encoder::isr1()+0x26>
     276:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     27a:	e7ce      	b.n	21a <Encoder::isr1()+0x26>
     27c:	20002200 	.word	0x20002200

00000280 <Encoder::isr2()>:
	#endif
	#ifdef CORE_INT2_PIN
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     280:	4b21      	ldr	r3, [pc, #132]	; (308 <Encoder::isr2()+0x88>)
     282:	689a      	ldr	r2, [r3, #8]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     284:	e9d2 1000 	ldrd	r1, r0, [r2]
     288:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     28a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     28c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     28e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     290:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     292:	6894      	ldr	r4, [r2, #8]
     294:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     298:	d02e      	beq.n	2f8 <Encoder::isr2()+0x78>
		uint8_t state = arg->state & 3;
     29a:	7c13      	ldrb	r3, [r2, #16]
     29c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     2a0:	b9d9      	cbnz	r1, 2da <Encoder::isr2()+0x5a>
		if (p2val) state |= 8;
     2a2:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     2a6:	0899      	lsrs	r1, r3, #2
		switch (state) {
     2a8:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     2aa:	7411      	strb	r1, [r2, #16]
		switch (state) {
     2ac:	2b0d      	cmp	r3, #13
     2ae:	d80b      	bhi.n	2c8 <Encoder::isr2()+0x48>
     2b0:	e8df f003 	tbb	[pc, r3]
     2b4:	071c070d 	.word	0x071c070d
     2b8:	0d0d160a 	.word	0x0d0d160a
     2bc:	1c070a16 	.word	0x1c070a16
     2c0:	0d07      	.short	0x0d07
				arg->position--;
     2c2:	6953      	ldr	r3, [r2, #20]
     2c4:	3b01      	subs	r3, #1
     2c6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
     2cc:	4770      	bx	lr
				arg->position++;
     2ce:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     2d4:	3301      	adds	r3, #1
     2d6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2d8:	4770      	bx	lr
		if (p1val) state |= 4;
     2da:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     2de:	e7e0      	b.n	2a2 <Encoder::isr2()+0x22>
				arg->position -= 2;
     2e0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     2e6:	3b02      	subs	r3, #2
     2e8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2ea:	4770      	bx	lr
				arg->position += 2;
     2ec:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     2f2:	3302      	adds	r3, #2
     2f4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
     2f6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     2f8:	7c13      	ldrb	r3, [r2, #16]
     2fa:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     2fe:	2900      	cmp	r1, #0
     300:	d0d1      	beq.n	2a6 <Encoder::isr2()+0x26>
     302:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     306:	e7ce      	b.n	2a6 <Encoder::isr2()+0x26>
     308:	20002200 	.word	0x20002200

0000030c <Encoder::isr3()>:
	#endif
	#ifdef CORE_INT3_PIN
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     30c:	4b21      	ldr	r3, [pc, #132]	; (394 <Encoder::isr3()+0x88>)
     30e:	68da      	ldr	r2, [r3, #12]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     310:	e9d2 1000 	ldrd	r1, r0, [r2]
     314:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     316:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     318:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     31a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     31c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     31e:	6894      	ldr	r4, [r2, #8]
     320:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     324:	d02e      	beq.n	384 <Encoder::isr3()+0x78>
		uint8_t state = arg->state & 3;
     326:	7c13      	ldrb	r3, [r2, #16]
     328:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     32c:	b9d9      	cbnz	r1, 366 <Encoder::isr3()+0x5a>
		if (p2val) state |= 8;
     32e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     332:	0899      	lsrs	r1, r3, #2
		switch (state) {
     334:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     336:	7411      	strb	r1, [r2, #16]
		switch (state) {
     338:	2b0d      	cmp	r3, #13
     33a:	d80b      	bhi.n	354 <Encoder::isr3()+0x48>
     33c:	e8df f003 	tbb	[pc, r3]
     340:	071c070d 	.word	0x071c070d
     344:	0d0d160a 	.word	0x0d0d160a
     348:	1c070a16 	.word	0x1c070a16
     34c:	0d07      	.short	0x0d07
				arg->position--;
     34e:	6953      	ldr	r3, [r2, #20]
     350:	3b01      	subs	r3, #1
     352:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     354:	f85d 4b04 	ldr.w	r4, [sp], #4
     358:	4770      	bx	lr
				arg->position++;
     35a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     35c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     360:	3301      	adds	r3, #1
     362:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     364:	4770      	bx	lr
		if (p1val) state |= 4;
     366:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     36a:	e7e0      	b.n	32e <Encoder::isr3()+0x22>
				arg->position -= 2;
     36c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     36e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     372:	3b02      	subs	r3, #2
     374:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     376:	4770      	bx	lr
				arg->position += 2;
     378:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     37a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     37e:	3302      	adds	r3, #2
     380:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
     382:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     384:	7c13      	ldrb	r3, [r2, #16]
     386:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     38a:	2900      	cmp	r1, #0
     38c:	d0d1      	beq.n	332 <Encoder::isr3()+0x26>
     38e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     392:	e7ce      	b.n	332 <Encoder::isr3()+0x26>
     394:	20002200 	.word	0x20002200

00000398 <Encoder::isr4()>:
	#endif
	#ifdef CORE_INT4_PIN
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     398:	4b21      	ldr	r3, [pc, #132]	; (420 <Encoder::isr4()+0x88>)
     39a:	691a      	ldr	r2, [r3, #16]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     39c:	e9d2 1000 	ldrd	r1, r0, [r2]
     3a0:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     3a2:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     3a4:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     3a6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     3a8:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     3aa:	6894      	ldr	r4, [r2, #8]
     3ac:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     3b0:	d02e      	beq.n	410 <Encoder::isr4()+0x78>
		uint8_t state = arg->state & 3;
     3b2:	7c13      	ldrb	r3, [r2, #16]
     3b4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     3b8:	b9d9      	cbnz	r1, 3f2 <Encoder::isr4()+0x5a>
		if (p2val) state |= 8;
     3ba:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     3be:	0899      	lsrs	r1, r3, #2
		switch (state) {
     3c0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     3c2:	7411      	strb	r1, [r2, #16]
		switch (state) {
     3c4:	2b0d      	cmp	r3, #13
     3c6:	d80b      	bhi.n	3e0 <Encoder::isr4()+0x48>
     3c8:	e8df f003 	tbb	[pc, r3]
     3cc:	071c070d 	.word	0x071c070d
     3d0:	0d0d160a 	.word	0x0d0d160a
     3d4:	1c070a16 	.word	0x1c070a16
     3d8:	0d07      	.short	0x0d07
				arg->position--;
     3da:	6953      	ldr	r3, [r2, #20]
     3dc:	3b01      	subs	r3, #1
     3de:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
     3e4:	4770      	bx	lr
				arg->position++;
     3e6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     3ec:	3301      	adds	r3, #1
     3ee:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     3f0:	4770      	bx	lr
		if (p1val) state |= 4;
     3f2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     3f6:	e7e0      	b.n	3ba <Encoder::isr4()+0x22>
				arg->position -= 2;
     3f8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     3fe:	3b02      	subs	r3, #2
     400:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     402:	4770      	bx	lr
				arg->position += 2;
     404:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     406:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     40a:	3302      	adds	r3, #2
     40c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
     40e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     410:	7c13      	ldrb	r3, [r2, #16]
     412:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     416:	2900      	cmp	r1, #0
     418:	d0d1      	beq.n	3be <Encoder::isr4()+0x26>
     41a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     41e:	e7ce      	b.n	3be <Encoder::isr4()+0x26>
     420:	20002200 	.word	0x20002200

00000424 <Encoder::isr5()>:
	#endif
	#ifdef CORE_INT5_PIN
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     424:	4b21      	ldr	r3, [pc, #132]	; (4ac <Encoder::isr5()+0x88>)
     426:	695a      	ldr	r2, [r3, #20]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     428:	e9d2 1000 	ldrd	r1, r0, [r2]
     42c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     42e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     430:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     432:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     434:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     436:	6894      	ldr	r4, [r2, #8]
     438:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     43c:	d02e      	beq.n	49c <Encoder::isr5()+0x78>
		uint8_t state = arg->state & 3;
     43e:	7c13      	ldrb	r3, [r2, #16]
     440:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     444:	b9d9      	cbnz	r1, 47e <Encoder::isr5()+0x5a>
		if (p2val) state |= 8;
     446:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     44a:	0899      	lsrs	r1, r3, #2
		switch (state) {
     44c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     44e:	7411      	strb	r1, [r2, #16]
		switch (state) {
     450:	2b0d      	cmp	r3, #13
     452:	d80b      	bhi.n	46c <Encoder::isr5()+0x48>
     454:	e8df f003 	tbb	[pc, r3]
     458:	071c070d 	.word	0x071c070d
     45c:	0d0d160a 	.word	0x0d0d160a
     460:	1c070a16 	.word	0x1c070a16
     464:	0d07      	.short	0x0d07
				arg->position--;
     466:	6953      	ldr	r3, [r2, #20]
     468:	3b01      	subs	r3, #1
     46a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     46c:	f85d 4b04 	ldr.w	r4, [sp], #4
     470:	4770      	bx	lr
				arg->position++;
     472:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     474:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     478:	3301      	adds	r3, #1
     47a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     47c:	4770      	bx	lr
		if (p1val) state |= 4;
     47e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     482:	e7e0      	b.n	446 <Encoder::isr5()+0x22>
				arg->position -= 2;
     484:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     486:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     48a:	3b02      	subs	r3, #2
     48c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     48e:	4770      	bx	lr
				arg->position += 2;
     490:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     492:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     496:	3302      	adds	r3, #2
     498:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
     49a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     49c:	7c13      	ldrb	r3, [r2, #16]
     49e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     4a2:	2900      	cmp	r1, #0
     4a4:	d0d1      	beq.n	44a <Encoder::isr5()+0x26>
     4a6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     4aa:	e7ce      	b.n	44a <Encoder::isr5()+0x26>
     4ac:	20002200 	.word	0x20002200

000004b0 <Encoder::isr6()>:
	#endif
	#ifdef CORE_INT6_PIN
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     4b0:	4b21      	ldr	r3, [pc, #132]	; (538 <Encoder::isr6()+0x88>)
     4b2:	699a      	ldr	r2, [r3, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     4b4:	e9d2 1000 	ldrd	r1, r0, [r2]
     4b8:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     4ba:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     4bc:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     4be:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     4c0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     4c2:	6894      	ldr	r4, [r2, #8]
     4c4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     4c8:	d02e      	beq.n	528 <Encoder::isr6()+0x78>
		uint8_t state = arg->state & 3;
     4ca:	7c13      	ldrb	r3, [r2, #16]
     4cc:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     4d0:	b9d9      	cbnz	r1, 50a <Encoder::isr6()+0x5a>
		if (p2val) state |= 8;
     4d2:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     4d6:	0899      	lsrs	r1, r3, #2
		switch (state) {
     4d8:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     4da:	7411      	strb	r1, [r2, #16]
		switch (state) {
     4dc:	2b0d      	cmp	r3, #13
     4de:	d80b      	bhi.n	4f8 <Encoder::isr6()+0x48>
     4e0:	e8df f003 	tbb	[pc, r3]
     4e4:	071c070d 	.word	0x071c070d
     4e8:	0d0d160a 	.word	0x0d0d160a
     4ec:	1c070a16 	.word	0x1c070a16
     4f0:	0d07      	.short	0x0d07
				arg->position--;
     4f2:	6953      	ldr	r3, [r2, #20]
     4f4:	3b01      	subs	r3, #1
     4f6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     4fc:	4770      	bx	lr
				arg->position++;
     4fe:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     500:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     504:	3301      	adds	r3, #1
     506:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     508:	4770      	bx	lr
		if (p1val) state |= 4;
     50a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     50e:	e7e0      	b.n	4d2 <Encoder::isr6()+0x22>
				arg->position -= 2;
     510:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     512:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     516:	3b02      	subs	r3, #2
     518:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     51a:	4770      	bx	lr
				arg->position += 2;
     51c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     51e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     522:	3302      	adds	r3, #2
     524:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
     526:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     528:	7c13      	ldrb	r3, [r2, #16]
     52a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     52e:	2900      	cmp	r1, #0
     530:	d0d1      	beq.n	4d6 <Encoder::isr6()+0x26>
     532:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     536:	e7ce      	b.n	4d6 <Encoder::isr6()+0x26>
     538:	20002200 	.word	0x20002200

0000053c <Encoder::isr7()>:
	#endif
	#ifdef CORE_INT7_PIN
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     53c:	4b21      	ldr	r3, [pc, #132]	; (5c4 <Encoder::isr7()+0x88>)
     53e:	69da      	ldr	r2, [r3, #28]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     540:	e9d2 1000 	ldrd	r1, r0, [r2]
     544:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     546:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     548:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     54a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     54c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     54e:	6894      	ldr	r4, [r2, #8]
     550:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     554:	d02e      	beq.n	5b4 <Encoder::isr7()+0x78>
		uint8_t state = arg->state & 3;
     556:	7c13      	ldrb	r3, [r2, #16]
     558:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     55c:	b9d9      	cbnz	r1, 596 <Encoder::isr7()+0x5a>
		if (p2val) state |= 8;
     55e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     562:	0899      	lsrs	r1, r3, #2
		switch (state) {
     564:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     566:	7411      	strb	r1, [r2, #16]
		switch (state) {
     568:	2b0d      	cmp	r3, #13
     56a:	d80b      	bhi.n	584 <Encoder::isr7()+0x48>
     56c:	e8df f003 	tbb	[pc, r3]
     570:	071c070d 	.word	0x071c070d
     574:	0d0d160a 	.word	0x0d0d160a
     578:	1c070a16 	.word	0x1c070a16
     57c:	0d07      	.short	0x0d07
				arg->position--;
     57e:	6953      	ldr	r3, [r2, #20]
     580:	3b01      	subs	r3, #1
     582:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     584:	f85d 4b04 	ldr.w	r4, [sp], #4
     588:	4770      	bx	lr
				arg->position++;
     58a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     58c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     590:	3301      	adds	r3, #1
     592:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     594:	4770      	bx	lr
		if (p1val) state |= 4;
     596:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     59a:	e7e0      	b.n	55e <Encoder::isr7()+0x22>
				arg->position -= 2;
     59c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     59e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     5a2:	3b02      	subs	r3, #2
     5a4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     5a6:	4770      	bx	lr
				arg->position += 2;
     5a8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     5ae:	3302      	adds	r3, #2
     5b0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
     5b2:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     5b4:	7c13      	ldrb	r3, [r2, #16]
     5b6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     5ba:	2900      	cmp	r1, #0
     5bc:	d0d1      	beq.n	562 <Encoder::isr7()+0x26>
     5be:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     5c2:	e7ce      	b.n	562 <Encoder::isr7()+0x26>
     5c4:	20002200 	.word	0x20002200

000005c8 <Encoder::isr8()>:
	#endif
	#ifdef CORE_INT8_PIN
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     5c8:	4b21      	ldr	r3, [pc, #132]	; (650 <Encoder::isr8()+0x88>)
     5ca:	6a1a      	ldr	r2, [r3, #32]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5cc:	e9d2 1000 	ldrd	r1, r0, [r2]
     5d0:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     5d2:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5d4:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     5d6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5d8:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     5da:	6894      	ldr	r4, [r2, #8]
     5dc:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5e0:	d02e      	beq.n	640 <Encoder::isr8()+0x78>
		uint8_t state = arg->state & 3;
     5e2:	7c13      	ldrb	r3, [r2, #16]
     5e4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     5e8:	b9d9      	cbnz	r1, 622 <Encoder::isr8()+0x5a>
		if (p2val) state |= 8;
     5ea:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     5ee:	0899      	lsrs	r1, r3, #2
		switch (state) {
     5f0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     5f2:	7411      	strb	r1, [r2, #16]
		switch (state) {
     5f4:	2b0d      	cmp	r3, #13
     5f6:	d80b      	bhi.n	610 <Encoder::isr8()+0x48>
     5f8:	e8df f003 	tbb	[pc, r3]
     5fc:	071c070d 	.word	0x071c070d
     600:	0d0d160a 	.word	0x0d0d160a
     604:	1c070a16 	.word	0x1c070a16
     608:	0d07      	.short	0x0d07
				arg->position--;
     60a:	6953      	ldr	r3, [r2, #20]
     60c:	3b01      	subs	r3, #1
     60e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     610:	f85d 4b04 	ldr.w	r4, [sp], #4
     614:	4770      	bx	lr
				arg->position++;
     616:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     618:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     61c:	3301      	adds	r3, #1
     61e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     620:	4770      	bx	lr
		if (p1val) state |= 4;
     622:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     626:	e7e0      	b.n	5ea <Encoder::isr8()+0x22>
				arg->position -= 2;
     628:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     62a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     62e:	3b02      	subs	r3, #2
     630:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     632:	4770      	bx	lr
				arg->position += 2;
     634:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     636:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     63a:	3302      	adds	r3, #2
     63c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
     63e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     640:	7c13      	ldrb	r3, [r2, #16]
     642:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     646:	2900      	cmp	r1, #0
     648:	d0d1      	beq.n	5ee <Encoder::isr8()+0x26>
     64a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     64e:	e7ce      	b.n	5ee <Encoder::isr8()+0x26>
     650:	20002200 	.word	0x20002200

00000654 <Encoder::isr9()>:
	#endif
	#ifdef CORE_INT9_PIN
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     654:	4b21      	ldr	r3, [pc, #132]	; (6dc <Encoder::isr9()+0x88>)
     656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     658:	e9d2 1000 	ldrd	r1, r0, [r2]
     65c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     65e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     660:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     662:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     664:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     666:	6894      	ldr	r4, [r2, #8]
     668:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     66c:	d02e      	beq.n	6cc <Encoder::isr9()+0x78>
		uint8_t state = arg->state & 3;
     66e:	7c13      	ldrb	r3, [r2, #16]
     670:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     674:	b9d9      	cbnz	r1, 6ae <Encoder::isr9()+0x5a>
		if (p2val) state |= 8;
     676:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     67a:	0899      	lsrs	r1, r3, #2
		switch (state) {
     67c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     67e:	7411      	strb	r1, [r2, #16]
		switch (state) {
     680:	2b0d      	cmp	r3, #13
     682:	d80b      	bhi.n	69c <Encoder::isr9()+0x48>
     684:	e8df f003 	tbb	[pc, r3]
     688:	071c070d 	.word	0x071c070d
     68c:	0d0d160a 	.word	0x0d0d160a
     690:	1c070a16 	.word	0x1c070a16
     694:	0d07      	.short	0x0d07
				arg->position--;
     696:	6953      	ldr	r3, [r2, #20]
     698:	3b01      	subs	r3, #1
     69a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     69c:	f85d 4b04 	ldr.w	r4, [sp], #4
     6a0:	4770      	bx	lr
				arg->position++;
     6a2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     6a8:	3301      	adds	r3, #1
     6aa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6ac:	4770      	bx	lr
		if (p1val) state |= 4;
     6ae:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     6b2:	e7e0      	b.n	676 <Encoder::isr9()+0x22>
				arg->position -= 2;
     6b4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     6ba:	3b02      	subs	r3, #2
     6bc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6be:	4770      	bx	lr
				arg->position += 2;
     6c0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     6c6:	3302      	adds	r3, #2
     6c8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
     6ca:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     6cc:	7c13      	ldrb	r3, [r2, #16]
     6ce:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     6d2:	2900      	cmp	r1, #0
     6d4:	d0d1      	beq.n	67a <Encoder::isr9()+0x26>
     6d6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     6da:	e7ce      	b.n	67a <Encoder::isr9()+0x26>
     6dc:	20002200 	.word	0x20002200

000006e0 <Encoder::isr10()>:
	#endif
	#ifdef CORE_INT10_PIN
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     6e0:	4b21      	ldr	r3, [pc, #132]	; (768 <Encoder::isr10()+0x88>)
     6e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6e4:	e9d2 1000 	ldrd	r1, r0, [r2]
     6e8:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     6ea:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6ec:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     6ee:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6f0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     6f2:	6894      	ldr	r4, [r2, #8]
     6f4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6f8:	d02e      	beq.n	758 <Encoder::isr10()+0x78>
		uint8_t state = arg->state & 3;
     6fa:	7c13      	ldrb	r3, [r2, #16]
     6fc:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     700:	b9d9      	cbnz	r1, 73a <Encoder::isr10()+0x5a>
		if (p2val) state |= 8;
     702:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     706:	0899      	lsrs	r1, r3, #2
		switch (state) {
     708:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     70a:	7411      	strb	r1, [r2, #16]
		switch (state) {
     70c:	2b0d      	cmp	r3, #13
     70e:	d80b      	bhi.n	728 <Encoder::isr10()+0x48>
     710:	e8df f003 	tbb	[pc, r3]
     714:	071c070d 	.word	0x071c070d
     718:	0d0d160a 	.word	0x0d0d160a
     71c:	1c070a16 	.word	0x1c070a16
     720:	0d07      	.short	0x0d07
				arg->position--;
     722:	6953      	ldr	r3, [r2, #20]
     724:	3b01      	subs	r3, #1
     726:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     728:	f85d 4b04 	ldr.w	r4, [sp], #4
     72c:	4770      	bx	lr
				arg->position++;
     72e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     730:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     734:	3301      	adds	r3, #1
     736:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     738:	4770      	bx	lr
		if (p1val) state |= 4;
     73a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     73e:	e7e0      	b.n	702 <Encoder::isr10()+0x22>
				arg->position -= 2;
     740:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     742:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     746:	3b02      	subs	r3, #2
     748:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     74a:	4770      	bx	lr
				arg->position += 2;
     74c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     74e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     752:	3302      	adds	r3, #2
     754:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
     756:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     758:	7c13      	ldrb	r3, [r2, #16]
     75a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     75e:	2900      	cmp	r1, #0
     760:	d0d1      	beq.n	706 <Encoder::isr10()+0x26>
     762:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     766:	e7ce      	b.n	706 <Encoder::isr10()+0x26>
     768:	20002200 	.word	0x20002200

0000076c <Encoder::isr11()>:
	#endif
	#ifdef CORE_INT11_PIN
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     76c:	4b21      	ldr	r3, [pc, #132]	; (7f4 <Encoder::isr11()+0x88>)
     76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     770:	e9d2 1000 	ldrd	r1, r0, [r2]
     774:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     776:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     778:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     77a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     77c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     77e:	6894      	ldr	r4, [r2, #8]
     780:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     784:	d02e      	beq.n	7e4 <Encoder::isr11()+0x78>
		uint8_t state = arg->state & 3;
     786:	7c13      	ldrb	r3, [r2, #16]
     788:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     78c:	b9d9      	cbnz	r1, 7c6 <Encoder::isr11()+0x5a>
		if (p2val) state |= 8;
     78e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     792:	0899      	lsrs	r1, r3, #2
		switch (state) {
     794:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     796:	7411      	strb	r1, [r2, #16]
		switch (state) {
     798:	2b0d      	cmp	r3, #13
     79a:	d80b      	bhi.n	7b4 <Encoder::isr11()+0x48>
     79c:	e8df f003 	tbb	[pc, r3]
     7a0:	071c070d 	.word	0x071c070d
     7a4:	0d0d160a 	.word	0x0d0d160a
     7a8:	1c070a16 	.word	0x1c070a16
     7ac:	0d07      	.short	0x0d07
				arg->position--;
     7ae:	6953      	ldr	r3, [r2, #20]
     7b0:	3b01      	subs	r3, #1
     7b2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
     7b8:	4770      	bx	lr
				arg->position++;
     7ba:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     7c0:	3301      	adds	r3, #1
     7c2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7c4:	4770      	bx	lr
		if (p1val) state |= 4;
     7c6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     7ca:	e7e0      	b.n	78e <Encoder::isr11()+0x22>
				arg->position -= 2;
     7cc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     7d2:	3b02      	subs	r3, #2
     7d4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7d6:	4770      	bx	lr
				arg->position += 2;
     7d8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7da:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     7de:	3302      	adds	r3, #2
     7e0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
     7e2:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     7e4:	7c13      	ldrb	r3, [r2, #16]
     7e6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     7ea:	2900      	cmp	r1, #0
     7ec:	d0d1      	beq.n	792 <Encoder::isr11()+0x26>
     7ee:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     7f2:	e7ce      	b.n	792 <Encoder::isr11()+0x26>
     7f4:	20002200 	.word	0x20002200

000007f8 <Encoder::isr12()>:
	#endif
	#ifdef CORE_INT12_PIN
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     7f8:	4b21      	ldr	r3, [pc, #132]	; (880 <Encoder::isr12()+0x88>)
     7fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7fc:	e9d2 1000 	ldrd	r1, r0, [r2]
     800:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     802:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     804:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     806:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     808:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     80a:	6894      	ldr	r4, [r2, #8]
     80c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     810:	d02e      	beq.n	870 <Encoder::isr12()+0x78>
		uint8_t state = arg->state & 3;
     812:	7c13      	ldrb	r3, [r2, #16]
     814:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     818:	b9d9      	cbnz	r1, 852 <Encoder::isr12()+0x5a>
		if (p2val) state |= 8;
     81a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     81e:	0899      	lsrs	r1, r3, #2
		switch (state) {
     820:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     822:	7411      	strb	r1, [r2, #16]
		switch (state) {
     824:	2b0d      	cmp	r3, #13
     826:	d80b      	bhi.n	840 <Encoder::isr12()+0x48>
     828:	e8df f003 	tbb	[pc, r3]
     82c:	071c070d 	.word	0x071c070d
     830:	0d0d160a 	.word	0x0d0d160a
     834:	1c070a16 	.word	0x1c070a16
     838:	0d07      	.short	0x0d07
				arg->position--;
     83a:	6953      	ldr	r3, [r2, #20]
     83c:	3b01      	subs	r3, #1
     83e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     840:	f85d 4b04 	ldr.w	r4, [sp], #4
     844:	4770      	bx	lr
				arg->position++;
     846:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     848:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     84c:	3301      	adds	r3, #1
     84e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     850:	4770      	bx	lr
		if (p1val) state |= 4;
     852:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     856:	e7e0      	b.n	81a <Encoder::isr12()+0x22>
				arg->position -= 2;
     858:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     85a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     85e:	3b02      	subs	r3, #2
     860:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     862:	4770      	bx	lr
				arg->position += 2;
     864:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     866:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     86a:	3302      	adds	r3, #2
     86c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
     86e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     870:	7c13      	ldrb	r3, [r2, #16]
     872:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     876:	2900      	cmp	r1, #0
     878:	d0d1      	beq.n	81e <Encoder::isr12()+0x26>
     87a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     87e:	e7ce      	b.n	81e <Encoder::isr12()+0x26>
     880:	20002200 	.word	0x20002200

00000884 <Encoder::isr13()>:
	#endif
	#ifdef CORE_INT13_PIN
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     884:	4b21      	ldr	r3, [pc, #132]	; (90c <Encoder::isr13()+0x88>)
     886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     888:	e9d2 1000 	ldrd	r1, r0, [r2]
     88c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     88e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     890:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     892:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     894:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     896:	6894      	ldr	r4, [r2, #8]
     898:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     89c:	d02e      	beq.n	8fc <Encoder::isr13()+0x78>
		uint8_t state = arg->state & 3;
     89e:	7c13      	ldrb	r3, [r2, #16]
     8a0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     8a4:	b9d9      	cbnz	r1, 8de <Encoder::isr13()+0x5a>
		if (p2val) state |= 8;
     8a6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     8aa:	0899      	lsrs	r1, r3, #2
		switch (state) {
     8ac:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     8ae:	7411      	strb	r1, [r2, #16]
		switch (state) {
     8b0:	2b0d      	cmp	r3, #13
     8b2:	d80b      	bhi.n	8cc <Encoder::isr13()+0x48>
     8b4:	e8df f003 	tbb	[pc, r3]
     8b8:	071c070d 	.word	0x071c070d
     8bc:	0d0d160a 	.word	0x0d0d160a
     8c0:	1c070a16 	.word	0x1c070a16
     8c4:	0d07      	.short	0x0d07
				arg->position--;
     8c6:	6953      	ldr	r3, [r2, #20]
     8c8:	3b01      	subs	r3, #1
     8ca:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d0:	4770      	bx	lr
				arg->position++;
     8d2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     8d8:	3301      	adds	r3, #1
     8da:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8dc:	4770      	bx	lr
		if (p1val) state |= 4;
     8de:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     8e2:	e7e0      	b.n	8a6 <Encoder::isr13()+0x22>
				arg->position -= 2;
     8e4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     8ea:	3b02      	subs	r3, #2
     8ec:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8ee:	4770      	bx	lr
				arg->position += 2;
     8f0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     8f6:	3302      	adds	r3, #2
     8f8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
     8fa:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     8fc:	7c13      	ldrb	r3, [r2, #16]
     8fe:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     902:	2900      	cmp	r1, #0
     904:	d0d1      	beq.n	8aa <Encoder::isr13()+0x26>
     906:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     90a:	e7ce      	b.n	8aa <Encoder::isr13()+0x26>
     90c:	20002200 	.word	0x20002200

00000910 <Encoder::isr14()>:
	#endif
	#ifdef CORE_INT14_PIN
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     910:	4b21      	ldr	r3, [pc, #132]	; (998 <Encoder::isr14()+0x88>)
     912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     914:	e9d2 1000 	ldrd	r1, r0, [r2]
     918:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     91a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     91c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     91e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     920:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     922:	6894      	ldr	r4, [r2, #8]
     924:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     928:	d02e      	beq.n	988 <Encoder::isr14()+0x78>
		uint8_t state = arg->state & 3;
     92a:	7c13      	ldrb	r3, [r2, #16]
     92c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     930:	b9d9      	cbnz	r1, 96a <Encoder::isr14()+0x5a>
		if (p2val) state |= 8;
     932:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     936:	0899      	lsrs	r1, r3, #2
		switch (state) {
     938:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     93a:	7411      	strb	r1, [r2, #16]
		switch (state) {
     93c:	2b0d      	cmp	r3, #13
     93e:	d80b      	bhi.n	958 <Encoder::isr14()+0x48>
     940:	e8df f003 	tbb	[pc, r3]
     944:	071c070d 	.word	0x071c070d
     948:	0d0d160a 	.word	0x0d0d160a
     94c:	1c070a16 	.word	0x1c070a16
     950:	0d07      	.short	0x0d07
				arg->position--;
     952:	6953      	ldr	r3, [r2, #20]
     954:	3b01      	subs	r3, #1
     956:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     958:	f85d 4b04 	ldr.w	r4, [sp], #4
     95c:	4770      	bx	lr
				arg->position++;
     95e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     960:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     964:	3301      	adds	r3, #1
     966:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     968:	4770      	bx	lr
		if (p1val) state |= 4;
     96a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     96e:	e7e0      	b.n	932 <Encoder::isr14()+0x22>
				arg->position -= 2;
     970:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     972:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     976:	3b02      	subs	r3, #2
     978:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     97a:	4770      	bx	lr
				arg->position += 2;
     97c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     97e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     982:	3302      	adds	r3, #2
     984:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
     986:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     988:	7c13      	ldrb	r3, [r2, #16]
     98a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     98e:	2900      	cmp	r1, #0
     990:	d0d1      	beq.n	936 <Encoder::isr14()+0x26>
     992:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     996:	e7ce      	b.n	936 <Encoder::isr14()+0x26>
     998:	20002200 	.word	0x20002200

0000099c <Encoder::isr15()>:
	#endif
	#ifdef CORE_INT15_PIN
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     99c:	4b21      	ldr	r3, [pc, #132]	; (a24 <Encoder::isr15()+0x88>)
     99e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9a0:	e9d2 1000 	ldrd	r1, r0, [r2]
     9a4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     9a6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9a8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     9aa:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9ac:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     9ae:	6894      	ldr	r4, [r2, #8]
     9b0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9b4:	d02e      	beq.n	a14 <Encoder::isr15()+0x78>
		uint8_t state = arg->state & 3;
     9b6:	7c13      	ldrb	r3, [r2, #16]
     9b8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     9bc:	b9d9      	cbnz	r1, 9f6 <Encoder::isr15()+0x5a>
		if (p2val) state |= 8;
     9be:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     9c2:	0899      	lsrs	r1, r3, #2
		switch (state) {
     9c4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     9c6:	7411      	strb	r1, [r2, #16]
		switch (state) {
     9c8:	2b0d      	cmp	r3, #13
     9ca:	d80b      	bhi.n	9e4 <Encoder::isr15()+0x48>
     9cc:	e8df f003 	tbb	[pc, r3]
     9d0:	071c070d 	.word	0x071c070d
     9d4:	0d0d160a 	.word	0x0d0d160a
     9d8:	1c070a16 	.word	0x1c070a16
     9dc:	0d07      	.short	0x0d07
				arg->position--;
     9de:	6953      	ldr	r3, [r2, #20]
     9e0:	3b01      	subs	r3, #1
     9e2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
     9e8:	4770      	bx	lr
				arg->position++;
     9ea:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     9f0:	3301      	adds	r3, #1
     9f2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     9f4:	4770      	bx	lr
		if (p1val) state |= 4;
     9f6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     9fa:	e7e0      	b.n	9be <Encoder::isr15()+0x22>
				arg->position -= 2;
     9fc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     a02:	3b02      	subs	r3, #2
     a04:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     a06:	4770      	bx	lr
				arg->position += 2;
     a08:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     a0e:	3302      	adds	r3, #2
     a10:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
     a12:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     a14:	7c13      	ldrb	r3, [r2, #16]
     a16:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     a1a:	2900      	cmp	r1, #0
     a1c:	d0d1      	beq.n	9c2 <Encoder::isr15()+0x26>
     a1e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     a22:	e7ce      	b.n	9c2 <Encoder::isr15()+0x26>
     a24:	20002200 	.word	0x20002200

00000a28 <Encoder::isr16()>:
	#endif
	#ifdef CORE_INT16_PIN
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a28:	4b21      	ldr	r3, [pc, #132]	; (ab0 <Encoder::isr16()+0x88>)
     a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a2c:	e9d2 1000 	ldrd	r1, r0, [r2]
     a30:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     a32:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a34:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a36:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a38:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     a3a:	6894      	ldr	r4, [r2, #8]
     a3c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a40:	d02e      	beq.n	aa0 <Encoder::isr16()+0x78>
		uint8_t state = arg->state & 3;
     a42:	7c13      	ldrb	r3, [r2, #16]
     a44:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     a48:	b9d9      	cbnz	r1, a82 <Encoder::isr16()+0x5a>
		if (p2val) state |= 8;
     a4a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     a4e:	0899      	lsrs	r1, r3, #2
		switch (state) {
     a50:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     a52:	7411      	strb	r1, [r2, #16]
		switch (state) {
     a54:	2b0d      	cmp	r3, #13
     a56:	d80b      	bhi.n	a70 <Encoder::isr16()+0x48>
     a58:	e8df f003 	tbb	[pc, r3]
     a5c:	071c070d 	.word	0x071c070d
     a60:	0d0d160a 	.word	0x0d0d160a
     a64:	1c070a16 	.word	0x1c070a16
     a68:	0d07      	.short	0x0d07
				arg->position--;
     a6a:	6953      	ldr	r3, [r2, #20]
     a6c:	3b01      	subs	r3, #1
     a6e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a70:	f85d 4b04 	ldr.w	r4, [sp], #4
     a74:	4770      	bx	lr
				arg->position++;
     a76:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a78:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     a7c:	3301      	adds	r3, #1
     a7e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a80:	4770      	bx	lr
		if (p1val) state |= 4;
     a82:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     a86:	e7e0      	b.n	a4a <Encoder::isr16()+0x22>
				arg->position -= 2;
     a88:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     a8e:	3b02      	subs	r3, #2
     a90:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a92:	4770      	bx	lr
				arg->position += 2;
     a94:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a96:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     a9a:	3302      	adds	r3, #2
     a9c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
     a9e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     aa0:	7c13      	ldrb	r3, [r2, #16]
     aa2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     aa6:	2900      	cmp	r1, #0
     aa8:	d0d1      	beq.n	a4e <Encoder::isr16()+0x26>
     aaa:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     aae:	e7ce      	b.n	a4e <Encoder::isr16()+0x26>
     ab0:	20002200 	.word	0x20002200

00000ab4 <Encoder::isr17()>:
	#endif
	#ifdef CORE_INT17_PIN
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     ab4:	4b21      	ldr	r3, [pc, #132]	; (b3c <Encoder::isr17()+0x88>)
     ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ab8:	e9d2 1000 	ldrd	r1, r0, [r2]
     abc:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     abe:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ac0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     ac2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ac4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     ac6:	6894      	ldr	r4, [r2, #8]
     ac8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     acc:	d02e      	beq.n	b2c <Encoder::isr17()+0x78>
		uint8_t state = arg->state & 3;
     ace:	7c13      	ldrb	r3, [r2, #16]
     ad0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     ad4:	b9d9      	cbnz	r1, b0e <Encoder::isr17()+0x5a>
		if (p2val) state |= 8;
     ad6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     ada:	0899      	lsrs	r1, r3, #2
		switch (state) {
     adc:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     ade:	7411      	strb	r1, [r2, #16]
		switch (state) {
     ae0:	2b0d      	cmp	r3, #13
     ae2:	d80b      	bhi.n	afc <Encoder::isr17()+0x48>
     ae4:	e8df f003 	tbb	[pc, r3]
     ae8:	071c070d 	.word	0x071c070d
     aec:	0d0d160a 	.word	0x0d0d160a
     af0:	1c070a16 	.word	0x1c070a16
     af4:	0d07      	.short	0x0d07
				arg->position--;
     af6:	6953      	ldr	r3, [r2, #20]
     af8:	3b01      	subs	r3, #1
     afa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     afc:	f85d 4b04 	ldr.w	r4, [sp], #4
     b00:	4770      	bx	lr
				arg->position++;
     b02:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b04:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     b08:	3301      	adds	r3, #1
     b0a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b0c:	4770      	bx	lr
		if (p1val) state |= 4;
     b0e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     b12:	e7e0      	b.n	ad6 <Encoder::isr17()+0x22>
				arg->position -= 2;
     b14:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b16:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     b1a:	3b02      	subs	r3, #2
     b1c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b1e:	4770      	bx	lr
				arg->position += 2;
     b20:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b22:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     b26:	3302      	adds	r3, #2
     b28:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
     b2a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     b2c:	7c13      	ldrb	r3, [r2, #16]
     b2e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     b32:	2900      	cmp	r1, #0
     b34:	d0d1      	beq.n	ada <Encoder::isr17()+0x26>
     b36:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     b3a:	e7ce      	b.n	ada <Encoder::isr17()+0x26>
     b3c:	20002200 	.word	0x20002200

00000b40 <Encoder::isr18()>:
	#endif
	#ifdef CORE_INT18_PIN
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     b40:	4b21      	ldr	r3, [pc, #132]	; (bc8 <Encoder::isr18()+0x88>)
     b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b44:	e9d2 1000 	ldrd	r1, r0, [r2]
     b48:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b4a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b4c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     b4e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b50:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b52:	6894      	ldr	r4, [r2, #8]
     b54:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b58:	d02e      	beq.n	bb8 <Encoder::isr18()+0x78>
		uint8_t state = arg->state & 3;
     b5a:	7c13      	ldrb	r3, [r2, #16]
     b5c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     b60:	b9d9      	cbnz	r1, b9a <Encoder::isr18()+0x5a>
		if (p2val) state |= 8;
     b62:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     b66:	0899      	lsrs	r1, r3, #2
		switch (state) {
     b68:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     b6a:	7411      	strb	r1, [r2, #16]
		switch (state) {
     b6c:	2b0d      	cmp	r3, #13
     b6e:	d80b      	bhi.n	b88 <Encoder::isr18()+0x48>
     b70:	e8df f003 	tbb	[pc, r3]
     b74:	071c070d 	.word	0x071c070d
     b78:	0d0d160a 	.word	0x0d0d160a
     b7c:	1c070a16 	.word	0x1c070a16
     b80:	0d07      	.short	0x0d07
				arg->position--;
     b82:	6953      	ldr	r3, [r2, #20]
     b84:	3b01      	subs	r3, #1
     b86:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     b88:	f85d 4b04 	ldr.w	r4, [sp], #4
     b8c:	4770      	bx	lr
				arg->position++;
     b8e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     b90:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     b94:	3301      	adds	r3, #1
     b96:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     b98:	4770      	bx	lr
		if (p1val) state |= 4;
     b9a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     b9e:	e7e0      	b.n	b62 <Encoder::isr18()+0x22>
				arg->position -= 2;
     ba0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     ba6:	3b02      	subs	r3, #2
     ba8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     baa:	4770      	bx	lr
				arg->position += 2;
     bac:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     bae:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     bb2:	3302      	adds	r3, #2
     bb4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
     bb6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     bb8:	7c13      	ldrb	r3, [r2, #16]
     bba:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     bbe:	2900      	cmp	r1, #0
     bc0:	d0d1      	beq.n	b66 <Encoder::isr18()+0x26>
     bc2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     bc6:	e7ce      	b.n	b66 <Encoder::isr18()+0x26>
     bc8:	20002200 	.word	0x20002200

00000bcc <Encoder::isr19()>:
	#endif
	#ifdef CORE_INT19_PIN
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     bcc:	4b21      	ldr	r3, [pc, #132]	; (c54 <Encoder::isr19()+0x88>)
     bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     bd0:	e9d2 1000 	ldrd	r1, r0, [r2]
     bd4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     bd6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     bd8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     bda:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     bdc:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     bde:	6894      	ldr	r4, [r2, #8]
     be0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     be4:	d02e      	beq.n	c44 <Encoder::isr19()+0x78>
		uint8_t state = arg->state & 3;
     be6:	7c13      	ldrb	r3, [r2, #16]
     be8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     bec:	b9d9      	cbnz	r1, c26 <Encoder::isr19()+0x5a>
		if (p2val) state |= 8;
     bee:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     bf2:	0899      	lsrs	r1, r3, #2
		switch (state) {
     bf4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     bf6:	7411      	strb	r1, [r2, #16]
		switch (state) {
     bf8:	2b0d      	cmp	r3, #13
     bfa:	d80b      	bhi.n	c14 <Encoder::isr19()+0x48>
     bfc:	e8df f003 	tbb	[pc, r3]
     c00:	071c070d 	.word	0x071c070d
     c04:	0d0d160a 	.word	0x0d0d160a
     c08:	1c070a16 	.word	0x1c070a16
     c0c:	0d07      	.short	0x0d07
				arg->position--;
     c0e:	6953      	ldr	r3, [r2, #20]
     c10:	3b01      	subs	r3, #1
     c12:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c14:	f85d 4b04 	ldr.w	r4, [sp], #4
     c18:	4770      	bx	lr
				arg->position++;
     c1a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     c20:	3301      	adds	r3, #1
     c22:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c24:	4770      	bx	lr
		if (p1val) state |= 4;
     c26:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     c2a:	e7e0      	b.n	bee <Encoder::isr19()+0x22>
				arg->position -= 2;
     c2c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     c32:	3b02      	subs	r3, #2
     c34:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c36:	4770      	bx	lr
				arg->position += 2;
     c38:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     c3e:	3302      	adds	r3, #2
     c40:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
     c42:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     c44:	7c13      	ldrb	r3, [r2, #16]
     c46:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     c4a:	2900      	cmp	r1, #0
     c4c:	d0d1      	beq.n	bf2 <Encoder::isr19()+0x26>
     c4e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     c52:	e7ce      	b.n	bf2 <Encoder::isr19()+0x26>
     c54:	20002200 	.word	0x20002200

00000c58 <Encoder::isr20()>:
	#endif
	#ifdef CORE_INT20_PIN
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     c58:	4b21      	ldr	r3, [pc, #132]	; (ce0 <Encoder::isr20()+0x88>)
     c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c5c:	e9d2 1000 	ldrd	r1, r0, [r2]
     c60:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c62:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c64:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     c66:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c68:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c6a:	6894      	ldr	r4, [r2, #8]
     c6c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c70:	d02e      	beq.n	cd0 <Encoder::isr20()+0x78>
		uint8_t state = arg->state & 3;
     c72:	7c13      	ldrb	r3, [r2, #16]
     c74:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     c78:	b9d9      	cbnz	r1, cb2 <Encoder::isr20()+0x5a>
		if (p2val) state |= 8;
     c7a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     c7e:	0899      	lsrs	r1, r3, #2
		switch (state) {
     c80:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     c82:	7411      	strb	r1, [r2, #16]
		switch (state) {
     c84:	2b0d      	cmp	r3, #13
     c86:	d80b      	bhi.n	ca0 <Encoder::isr20()+0x48>
     c88:	e8df f003 	tbb	[pc, r3]
     c8c:	071c070d 	.word	0x071c070d
     c90:	0d0d160a 	.word	0x0d0d160a
     c94:	1c070a16 	.word	0x1c070a16
     c98:	0d07      	.short	0x0d07
				arg->position--;
     c9a:	6953      	ldr	r3, [r2, #20]
     c9c:	3b01      	subs	r3, #1
     c9e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
     ca4:	4770      	bx	lr
				arg->position++;
     ca6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     cac:	3301      	adds	r3, #1
     cae:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     cb0:	4770      	bx	lr
		if (p1val) state |= 4;
     cb2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     cb6:	e7e0      	b.n	c7a <Encoder::isr20()+0x22>
				arg->position -= 2;
     cb8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     cba:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     cbe:	3b02      	subs	r3, #2
     cc0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     cc2:	4770      	bx	lr
				arg->position += 2;
     cc4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     cca:	3302      	adds	r3, #2
     ccc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
     cce:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     cd0:	7c13      	ldrb	r3, [r2, #16]
     cd2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     cd6:	2900      	cmp	r1, #0
     cd8:	d0d1      	beq.n	c7e <Encoder::isr20()+0x26>
     cda:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     cde:	e7ce      	b.n	c7e <Encoder::isr20()+0x26>
     ce0:	20002200 	.word	0x20002200

00000ce4 <Encoder::isr21()>:
	#endif
	#ifdef CORE_INT21_PIN
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     ce4:	4b21      	ldr	r3, [pc, #132]	; (d6c <Encoder::isr21()+0x88>)
     ce6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ce8:	e9d2 1000 	ldrd	r1, r0, [r2]
     cec:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     cee:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     cf0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     cf2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     cf4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     cf6:	6894      	ldr	r4, [r2, #8]
     cf8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     cfc:	d02e      	beq.n	d5c <Encoder::isr21()+0x78>
		uint8_t state = arg->state & 3;
     cfe:	7c13      	ldrb	r3, [r2, #16]
     d00:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     d04:	b9d9      	cbnz	r1, d3e <Encoder::isr21()+0x5a>
		if (p2val) state |= 8;
     d06:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     d0a:	0899      	lsrs	r1, r3, #2
		switch (state) {
     d0c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     d0e:	7411      	strb	r1, [r2, #16]
		switch (state) {
     d10:	2b0d      	cmp	r3, #13
     d12:	d80b      	bhi.n	d2c <Encoder::isr21()+0x48>
     d14:	e8df f003 	tbb	[pc, r3]
     d18:	071c070d 	.word	0x071c070d
     d1c:	0d0d160a 	.word	0x0d0d160a
     d20:	1c070a16 	.word	0x1c070a16
     d24:	0d07      	.short	0x0d07
				arg->position--;
     d26:	6953      	ldr	r3, [r2, #20]
     d28:	3b01      	subs	r3, #1
     d2a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
     d30:	4770      	bx	lr
				arg->position++;
     d32:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d34:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     d38:	3301      	adds	r3, #1
     d3a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d3c:	4770      	bx	lr
		if (p1val) state |= 4;
     d3e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     d42:	e7e0      	b.n	d06 <Encoder::isr21()+0x22>
				arg->position -= 2;
     d44:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d46:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     d4a:	3b02      	subs	r3, #2
     d4c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d4e:	4770      	bx	lr
				arg->position += 2;
     d50:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d52:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     d56:	3302      	adds	r3, #2
     d58:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
     d5a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     d5c:	7c13      	ldrb	r3, [r2, #16]
     d5e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     d62:	2900      	cmp	r1, #0
     d64:	d0d1      	beq.n	d0a <Encoder::isr21()+0x26>
     d66:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     d6a:	e7ce      	b.n	d0a <Encoder::isr21()+0x26>
     d6c:	20002200 	.word	0x20002200

00000d70 <Encoder::isr22()>:
	#endif
	#ifdef CORE_INT22_PIN
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     d70:	4b21      	ldr	r3, [pc, #132]	; (df8 <Encoder::isr22()+0x88>)
     d72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d74:	e9d2 1000 	ldrd	r1, r0, [r2]
     d78:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     d7a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d7c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     d7e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d80:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     d82:	6894      	ldr	r4, [r2, #8]
     d84:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d88:	d02e      	beq.n	de8 <Encoder::isr22()+0x78>
		uint8_t state = arg->state & 3;
     d8a:	7c13      	ldrb	r3, [r2, #16]
     d8c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     d90:	b9d9      	cbnz	r1, dca <Encoder::isr22()+0x5a>
		if (p2val) state |= 8;
     d92:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     d96:	0899      	lsrs	r1, r3, #2
		switch (state) {
     d98:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     d9a:	7411      	strb	r1, [r2, #16]
		switch (state) {
     d9c:	2b0d      	cmp	r3, #13
     d9e:	d80b      	bhi.n	db8 <Encoder::isr22()+0x48>
     da0:	e8df f003 	tbb	[pc, r3]
     da4:	071c070d 	.word	0x071c070d
     da8:	0d0d160a 	.word	0x0d0d160a
     dac:	1c070a16 	.word	0x1c070a16
     db0:	0d07      	.short	0x0d07
				arg->position--;
     db2:	6953      	ldr	r3, [r2, #20]
     db4:	3b01      	subs	r3, #1
     db6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     db8:	f85d 4b04 	ldr.w	r4, [sp], #4
     dbc:	4770      	bx	lr
				arg->position++;
     dbe:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     dc4:	3301      	adds	r3, #1
     dc6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     dc8:	4770      	bx	lr
		if (p1val) state |= 4;
     dca:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     dce:	e7e0      	b.n	d92 <Encoder::isr22()+0x22>
				arg->position -= 2;
     dd0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     dd6:	3b02      	subs	r3, #2
     dd8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     dda:	4770      	bx	lr
				arg->position += 2;
     ddc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     dde:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     de2:	3302      	adds	r3, #2
     de4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
     de6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     de8:	7c13      	ldrb	r3, [r2, #16]
     dea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     dee:	2900      	cmp	r1, #0
     df0:	d0d1      	beq.n	d96 <Encoder::isr22()+0x26>
     df2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     df6:	e7ce      	b.n	d96 <Encoder::isr22()+0x26>
     df8:	20002200 	.word	0x20002200

00000dfc <Encoder::isr23()>:
	#endif
	#ifdef CORE_INT23_PIN
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     dfc:	4b21      	ldr	r3, [pc, #132]	; (e84 <Encoder::isr23()+0x88>)
     dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e00:	e9d2 1000 	ldrd	r1, r0, [r2]
     e04:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e06:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e08:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e0a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e0c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e0e:	6894      	ldr	r4, [r2, #8]
     e10:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e14:	d02e      	beq.n	e74 <Encoder::isr23()+0x78>
		uint8_t state = arg->state & 3;
     e16:	7c13      	ldrb	r3, [r2, #16]
     e18:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     e1c:	b9d9      	cbnz	r1, e56 <Encoder::isr23()+0x5a>
		if (p2val) state |= 8;
     e1e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     e22:	0899      	lsrs	r1, r3, #2
		switch (state) {
     e24:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     e26:	7411      	strb	r1, [r2, #16]
		switch (state) {
     e28:	2b0d      	cmp	r3, #13
     e2a:	d80b      	bhi.n	e44 <Encoder::isr23()+0x48>
     e2c:	e8df f003 	tbb	[pc, r3]
     e30:	071c070d 	.word	0x071c070d
     e34:	0d0d160a 	.word	0x0d0d160a
     e38:	1c070a16 	.word	0x1c070a16
     e3c:	0d07      	.short	0x0d07
				arg->position--;
     e3e:	6953      	ldr	r3, [r2, #20]
     e40:	3b01      	subs	r3, #1
     e42:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e44:	f85d 4b04 	ldr.w	r4, [sp], #4
     e48:	4770      	bx	lr
				arg->position++;
     e4a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     e50:	3301      	adds	r3, #1
     e52:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e54:	4770      	bx	lr
		if (p1val) state |= 4;
     e56:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     e5a:	e7e0      	b.n	e1e <Encoder::isr23()+0x22>
				arg->position -= 2;
     e5c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     e62:	3b02      	subs	r3, #2
     e64:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e66:	4770      	bx	lr
				arg->position += 2;
     e68:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     e6e:	3302      	adds	r3, #2
     e70:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
     e72:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     e74:	7c13      	ldrb	r3, [r2, #16]
     e76:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     e7a:	2900      	cmp	r1, #0
     e7c:	d0d1      	beq.n	e22 <Encoder::isr23()+0x26>
     e7e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     e82:	e7ce      	b.n	e22 <Encoder::isr23()+0x26>
     e84:	20002200 	.word	0x20002200

00000e88 <Encoder::isr24()>:
	#endif
	#ifdef CORE_INT24_PIN
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     e88:	4b21      	ldr	r3, [pc, #132]	; (f10 <Encoder::isr24()+0x88>)
     e8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e8c:	e9d2 1000 	ldrd	r1, r0, [r2]
     e90:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e92:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e94:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     e96:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e98:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e9a:	6894      	ldr	r4, [r2, #8]
     e9c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ea0:	d02e      	beq.n	f00 <Encoder::isr24()+0x78>
		uint8_t state = arg->state & 3;
     ea2:	7c13      	ldrb	r3, [r2, #16]
     ea4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     ea8:	b9d9      	cbnz	r1, ee2 <Encoder::isr24()+0x5a>
		if (p2val) state |= 8;
     eaa:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     eae:	0899      	lsrs	r1, r3, #2
		switch (state) {
     eb0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     eb2:	7411      	strb	r1, [r2, #16]
		switch (state) {
     eb4:	2b0d      	cmp	r3, #13
     eb6:	d80b      	bhi.n	ed0 <Encoder::isr24()+0x48>
     eb8:	e8df f003 	tbb	[pc, r3]
     ebc:	071c070d 	.word	0x071c070d
     ec0:	0d0d160a 	.word	0x0d0d160a
     ec4:	1c070a16 	.word	0x1c070a16
     ec8:	0d07      	.short	0x0d07
				arg->position--;
     eca:	6953      	ldr	r3, [r2, #20]
     ecc:	3b01      	subs	r3, #1
     ece:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
     ed4:	4770      	bx	lr
				arg->position++;
     ed6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     edc:	3301      	adds	r3, #1
     ede:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     ee0:	4770      	bx	lr
		if (p1val) state |= 4;
     ee2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     ee6:	e7e0      	b.n	eaa <Encoder::isr24()+0x22>
				arg->position -= 2;
     ee8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     eea:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     eee:	3b02      	subs	r3, #2
     ef0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     ef2:	4770      	bx	lr
				arg->position += 2;
     ef4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     efa:	3302      	adds	r3, #2
     efc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
     efe:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     f00:	7c13      	ldrb	r3, [r2, #16]
     f02:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     f06:	2900      	cmp	r1, #0
     f08:	d0d1      	beq.n	eae <Encoder::isr24()+0x26>
     f0a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     f0e:	e7ce      	b.n	eae <Encoder::isr24()+0x26>
     f10:	20002200 	.word	0x20002200

00000f14 <Encoder::isr25()>:
	#endif
	#ifdef CORE_INT25_PIN
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f14:	4b21      	ldr	r3, [pc, #132]	; (f9c <Encoder::isr25()+0x88>)
     f16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f18:	e9d2 1000 	ldrd	r1, r0, [r2]
     f1c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     f1e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f20:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f22:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f24:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     f26:	6894      	ldr	r4, [r2, #8]
     f28:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f2c:	d02e      	beq.n	f8c <Encoder::isr25()+0x78>
		uint8_t state = arg->state & 3;
     f2e:	7c13      	ldrb	r3, [r2, #16]
     f30:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     f34:	b9d9      	cbnz	r1, f6e <Encoder::isr25()+0x5a>
		if (p2val) state |= 8;
     f36:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     f3a:	0899      	lsrs	r1, r3, #2
		switch (state) {
     f3c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     f3e:	7411      	strb	r1, [r2, #16]
		switch (state) {
     f40:	2b0d      	cmp	r3, #13
     f42:	d80b      	bhi.n	f5c <Encoder::isr25()+0x48>
     f44:	e8df f003 	tbb	[pc, r3]
     f48:	071c070d 	.word	0x071c070d
     f4c:	0d0d160a 	.word	0x0d0d160a
     f50:	1c070a16 	.word	0x1c070a16
     f54:	0d07      	.short	0x0d07
				arg->position--;
     f56:	6953      	ldr	r3, [r2, #20]
     f58:	3b01      	subs	r3, #1
     f5a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
     f60:	4770      	bx	lr
				arg->position++;
     f62:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f64:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     f68:	3301      	adds	r3, #1
     f6a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f6c:	4770      	bx	lr
		if (p1val) state |= 4;
     f6e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     f72:	e7e0      	b.n	f36 <Encoder::isr25()+0x22>
				arg->position -= 2;
     f74:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f76:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
     f7a:	3b02      	subs	r3, #2
     f7c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f7e:	4770      	bx	lr
				arg->position += 2;
     f80:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f82:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
     f86:	3302      	adds	r3, #2
     f88:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
     f8a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
     f8c:	7c13      	ldrb	r3, [r2, #16]
     f8e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     f92:	2900      	cmp	r1, #0
     f94:	d0d1      	beq.n	f3a <Encoder::isr25()+0x26>
     f96:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     f9a:	e7ce      	b.n	f3a <Encoder::isr25()+0x26>
     f9c:	20002200 	.word	0x20002200

00000fa0 <Encoder::isr26()>:
	#endif
	#ifdef CORE_INT26_PIN
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
     fa0:	4b21      	ldr	r3, [pc, #132]	; (1028 <Encoder::isr26()+0x88>)
     fa2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fa4:	e9d2 1000 	ldrd	r1, r0, [r2]
     fa8:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     faa:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fac:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
     fae:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fb0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     fb2:	6894      	ldr	r4, [r2, #8]
     fb4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fb8:	d02e      	beq.n	1018 <Encoder::isr26()+0x78>
		uint8_t state = arg->state & 3;
     fba:	7c13      	ldrb	r3, [r2, #16]
     fbc:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
     fc0:	b9d9      	cbnz	r1, ffa <Encoder::isr26()+0x5a>
		if (p2val) state |= 8;
     fc2:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
     fc6:	0899      	lsrs	r1, r3, #2
		switch (state) {
     fc8:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
     fca:	7411      	strb	r1, [r2, #16]
		switch (state) {
     fcc:	2b0d      	cmp	r3, #13
     fce:	d80b      	bhi.n	fe8 <Encoder::isr26()+0x48>
     fd0:	e8df f003 	tbb	[pc, r3]
     fd4:	071c070d 	.word	0x071c070d
     fd8:	0d0d160a 	.word	0x0d0d160a
     fdc:	1c070a16 	.word	0x1c070a16
     fe0:	0d07      	.short	0x0d07
				arg->position--;
     fe2:	6953      	ldr	r3, [r2, #20]
     fe4:	3b01      	subs	r3, #1
     fe6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
     fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
     fec:	4770      	bx	lr
				arg->position++;
     fee:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
     ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
     ff4:	3301      	adds	r3, #1
     ff6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
     ff8:	4770      	bx	lr
		if (p1val) state |= 4;
     ffa:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
     ffe:	e7e0      	b.n	fc2 <Encoder::isr26()+0x22>
				arg->position -= 2;
    1000:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    1002:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1006:	3b02      	subs	r3, #2
    1008:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    100a:	4770      	bx	lr
				arg->position += 2;
    100c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    100e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1012:	3302      	adds	r3, #2
    1014:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    1016:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1018:	7c13      	ldrb	r3, [r2, #16]
    101a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    101e:	2900      	cmp	r1, #0
    1020:	d0d1      	beq.n	fc6 <Encoder::isr26()+0x26>
    1022:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1026:	e7ce      	b.n	fc6 <Encoder::isr26()+0x26>
    1028:	20002200 	.word	0x20002200

0000102c <Encoder::isr27()>:
	#endif
	#ifdef CORE_INT27_PIN
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    102c:	4b21      	ldr	r3, [pc, #132]	; (10b4 <Encoder::isr27()+0x88>)
    102e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1030:	e9d2 1000 	ldrd	r1, r0, [r2]
    1034:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1036:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1038:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    103a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    103c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    103e:	6894      	ldr	r4, [r2, #8]
    1040:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1044:	d02e      	beq.n	10a4 <Encoder::isr27()+0x78>
		uint8_t state = arg->state & 3;
    1046:	7c13      	ldrb	r3, [r2, #16]
    1048:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    104c:	b9d9      	cbnz	r1, 1086 <Encoder::isr27()+0x5a>
		if (p2val) state |= 8;
    104e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1052:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1054:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1056:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1058:	2b0d      	cmp	r3, #13
    105a:	d80b      	bhi.n	1074 <Encoder::isr27()+0x48>
    105c:	e8df f003 	tbb	[pc, r3]
    1060:	071c070d 	.word	0x071c070d
    1064:	0d0d160a 	.word	0x0d0d160a
    1068:	1c070a16 	.word	0x1c070a16
    106c:	0d07      	.short	0x0d07
				arg->position--;
    106e:	6953      	ldr	r3, [r2, #20]
    1070:	3b01      	subs	r3, #1
    1072:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    1074:	f85d 4b04 	ldr.w	r4, [sp], #4
    1078:	4770      	bx	lr
				arg->position++;
    107a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    107c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1080:	3301      	adds	r3, #1
    1082:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    1084:	4770      	bx	lr
		if (p1val) state |= 4;
    1086:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    108a:	e7e0      	b.n	104e <Encoder::isr27()+0x22>
				arg->position -= 2;
    108c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    108e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1092:	3b02      	subs	r3, #2
    1094:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    1096:	4770      	bx	lr
				arg->position += 2;
    1098:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    109a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    109e:	3302      	adds	r3, #2
    10a0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    10a2:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    10a4:	7c13      	ldrb	r3, [r2, #16]
    10a6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    10aa:	2900      	cmp	r1, #0
    10ac:	d0d1      	beq.n	1052 <Encoder::isr27()+0x26>
    10ae:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    10b2:	e7ce      	b.n	1052 <Encoder::isr27()+0x26>
    10b4:	20002200 	.word	0x20002200

000010b8 <Encoder::isr28()>:
	#endif
	#ifdef CORE_INT28_PIN
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    10b8:	4b21      	ldr	r3, [pc, #132]	; (1140 <Encoder::isr28()+0x88>)
    10ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10bc:	e9d2 1000 	ldrd	r1, r0, [r2]
    10c0:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    10c2:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10c4:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    10c6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10c8:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    10ca:	6894      	ldr	r4, [r2, #8]
    10cc:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10d0:	d02e      	beq.n	1130 <Encoder::isr28()+0x78>
		uint8_t state = arg->state & 3;
    10d2:	7c13      	ldrb	r3, [r2, #16]
    10d4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    10d8:	b9d9      	cbnz	r1, 1112 <Encoder::isr28()+0x5a>
		if (p2val) state |= 8;
    10da:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    10de:	0899      	lsrs	r1, r3, #2
		switch (state) {
    10e0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    10e2:	7411      	strb	r1, [r2, #16]
		switch (state) {
    10e4:	2b0d      	cmp	r3, #13
    10e6:	d80b      	bhi.n	1100 <Encoder::isr28()+0x48>
    10e8:	e8df f003 	tbb	[pc, r3]
    10ec:	071c070d 	.word	0x071c070d
    10f0:	0d0d160a 	.word	0x0d0d160a
    10f4:	1c070a16 	.word	0x1c070a16
    10f8:	0d07      	.short	0x0d07
				arg->position--;
    10fa:	6953      	ldr	r3, [r2, #20]
    10fc:	3b01      	subs	r3, #1
    10fe:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1100:	f85d 4b04 	ldr.w	r4, [sp], #4
    1104:	4770      	bx	lr
				arg->position++;
    1106:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1108:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    110c:	3301      	adds	r3, #1
    110e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1110:	4770      	bx	lr
		if (p1val) state |= 4;
    1112:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1116:	e7e0      	b.n	10da <Encoder::isr28()+0x22>
				arg->position -= 2;
    1118:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    111a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    111e:	3b02      	subs	r3, #2
    1120:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1122:	4770      	bx	lr
				arg->position += 2;
    1124:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1126:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    112a:	3302      	adds	r3, #2
    112c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    112e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1130:	7c13      	ldrb	r3, [r2, #16]
    1132:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1136:	2900      	cmp	r1, #0
    1138:	d0d1      	beq.n	10de <Encoder::isr28()+0x26>
    113a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    113e:	e7ce      	b.n	10de <Encoder::isr28()+0x26>
    1140:	20002200 	.word	0x20002200

00001144 <Encoder::isr29()>:
	#endif
	#ifdef CORE_INT29_PIN
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    1144:	4b21      	ldr	r3, [pc, #132]	; (11cc <Encoder::isr29()+0x88>)
    1146:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1148:	e9d2 1000 	ldrd	r1, r0, [r2]
    114c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    114e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1150:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    1152:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1154:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1156:	6894      	ldr	r4, [r2, #8]
    1158:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    115c:	d02e      	beq.n	11bc <Encoder::isr29()+0x78>
		uint8_t state = arg->state & 3;
    115e:	7c13      	ldrb	r3, [r2, #16]
    1160:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1164:	b9d9      	cbnz	r1, 119e <Encoder::isr29()+0x5a>
		if (p2val) state |= 8;
    1166:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    116a:	0899      	lsrs	r1, r3, #2
		switch (state) {
    116c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    116e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1170:	2b0d      	cmp	r3, #13
    1172:	d80b      	bhi.n	118c <Encoder::isr29()+0x48>
    1174:	e8df f003 	tbb	[pc, r3]
    1178:	071c070d 	.word	0x071c070d
    117c:	0d0d160a 	.word	0x0d0d160a
    1180:	1c070a16 	.word	0x1c070a16
    1184:	0d07      	.short	0x0d07
				arg->position--;
    1186:	6953      	ldr	r3, [r2, #20]
    1188:	3b01      	subs	r3, #1
    118a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    118c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1190:	4770      	bx	lr
				arg->position++;
    1192:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    1194:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1198:	3301      	adds	r3, #1
    119a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    119c:	4770      	bx	lr
		if (p1val) state |= 4;
    119e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    11a2:	e7e0      	b.n	1166 <Encoder::isr29()+0x22>
				arg->position -= 2;
    11a4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    11a6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    11aa:	3b02      	subs	r3, #2
    11ac:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    11ae:	4770      	bx	lr
				arg->position += 2;
    11b0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    11b2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    11b6:	3302      	adds	r3, #2
    11b8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    11ba:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    11bc:	7c13      	ldrb	r3, [r2, #16]
    11be:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    11c2:	2900      	cmp	r1, #0
    11c4:	d0d1      	beq.n	116a <Encoder::isr29()+0x26>
    11c6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    11ca:	e7ce      	b.n	116a <Encoder::isr29()+0x26>
    11cc:	20002200 	.word	0x20002200

000011d0 <Encoder::isr30()>:
	#endif
	#ifdef CORE_INT30_PIN
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    11d0:	4b21      	ldr	r3, [pc, #132]	; (1258 <Encoder::isr30()+0x88>)
    11d2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11d4:	e9d2 1000 	ldrd	r1, r0, [r2]
    11d8:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11da:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11dc:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    11de:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11e0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11e2:	6894      	ldr	r4, [r2, #8]
    11e4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11e8:	d02e      	beq.n	1248 <Encoder::isr30()+0x78>
		uint8_t state = arg->state & 3;
    11ea:	7c13      	ldrb	r3, [r2, #16]
    11ec:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    11f0:	b9d9      	cbnz	r1, 122a <Encoder::isr30()+0x5a>
		if (p2val) state |= 8;
    11f2:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    11f6:	0899      	lsrs	r1, r3, #2
		switch (state) {
    11f8:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    11fa:	7411      	strb	r1, [r2, #16]
		switch (state) {
    11fc:	2b0d      	cmp	r3, #13
    11fe:	d80b      	bhi.n	1218 <Encoder::isr30()+0x48>
    1200:	e8df f003 	tbb	[pc, r3]
    1204:	071c070d 	.word	0x071c070d
    1208:	0d0d160a 	.word	0x0d0d160a
    120c:	1c070a16 	.word	0x1c070a16
    1210:	0d07      	.short	0x0d07
				arg->position--;
    1212:	6953      	ldr	r3, [r2, #20]
    1214:	3b01      	subs	r3, #1
    1216:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1218:	f85d 4b04 	ldr.w	r4, [sp], #4
    121c:	4770      	bx	lr
				arg->position++;
    121e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1220:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1224:	3301      	adds	r3, #1
    1226:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1228:	4770      	bx	lr
		if (p1val) state |= 4;
    122a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    122e:	e7e0      	b.n	11f2 <Encoder::isr30()+0x22>
				arg->position -= 2;
    1230:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1232:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1236:	3b02      	subs	r3, #2
    1238:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    123a:	4770      	bx	lr
				arg->position += 2;
    123c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    123e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1242:	3302      	adds	r3, #2
    1244:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1246:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1248:	7c13      	ldrb	r3, [r2, #16]
    124a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    124e:	2900      	cmp	r1, #0
    1250:	d0d1      	beq.n	11f6 <Encoder::isr30()+0x26>
    1252:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1256:	e7ce      	b.n	11f6 <Encoder::isr30()+0x26>
    1258:	20002200 	.word	0x20002200

0000125c <Encoder::isr31()>:
	#endif
	#ifdef CORE_INT31_PIN
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    125c:	4b21      	ldr	r3, [pc, #132]	; (12e4 <Encoder::isr31()+0x88>)
    125e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1260:	e9d2 1000 	ldrd	r1, r0, [r2]
    1264:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1266:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1268:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    126a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    126c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    126e:	6894      	ldr	r4, [r2, #8]
    1270:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1274:	d02e      	beq.n	12d4 <Encoder::isr31()+0x78>
		uint8_t state = arg->state & 3;
    1276:	7c13      	ldrb	r3, [r2, #16]
    1278:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    127c:	b9d9      	cbnz	r1, 12b6 <Encoder::isr31()+0x5a>
		if (p2val) state |= 8;
    127e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1282:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1284:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1286:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1288:	2b0d      	cmp	r3, #13
    128a:	d80b      	bhi.n	12a4 <Encoder::isr31()+0x48>
    128c:	e8df f003 	tbb	[pc, r3]
    1290:	071c070d 	.word	0x071c070d
    1294:	0d0d160a 	.word	0x0d0d160a
    1298:	1c070a16 	.word	0x1c070a16
    129c:	0d07      	.short	0x0d07
				arg->position--;
    129e:	6953      	ldr	r3, [r2, #20]
    12a0:	3b01      	subs	r3, #1
    12a2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    12a8:	4770      	bx	lr
				arg->position++;
    12aa:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12ac:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    12b0:	3301      	adds	r3, #1
    12b2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12b4:	4770      	bx	lr
		if (p1val) state |= 4;
    12b6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    12ba:	e7e0      	b.n	127e <Encoder::isr31()+0x22>
				arg->position -= 2;
    12bc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12be:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    12c2:	3b02      	subs	r3, #2
    12c4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12c6:	4770      	bx	lr
				arg->position += 2;
    12c8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12ca:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    12ce:	3302      	adds	r3, #2
    12d0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    12d2:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    12d4:	7c13      	ldrb	r3, [r2, #16]
    12d6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    12da:	2900      	cmp	r1, #0
    12dc:	d0d1      	beq.n	1282 <Encoder::isr31()+0x26>
    12de:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    12e2:	e7ce      	b.n	1282 <Encoder::isr31()+0x26>
    12e4:	20002200 	.word	0x20002200

000012e8 <Encoder::isr32()>:
	#endif
	#ifdef CORE_INT32_PIN
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    12e8:	4b22      	ldr	r3, [pc, #136]	; (1374 <Encoder::isr32()+0x8c>)
    12ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12ee:	e9d2 1000 	ldrd	r1, r0, [r2]
    12f2:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12f4:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12f6:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    12f8:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12fa:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12fc:	6894      	ldr	r4, [r2, #8]
    12fe:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1302:	d02e      	beq.n	1362 <Encoder::isr32()+0x7a>
		uint8_t state = arg->state & 3;
    1304:	7c13      	ldrb	r3, [r2, #16]
    1306:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    130a:	b9d9      	cbnz	r1, 1344 <Encoder::isr32()+0x5c>
		if (p2val) state |= 8;
    130c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1310:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1312:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1314:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1316:	2b0d      	cmp	r3, #13
    1318:	d80b      	bhi.n	1332 <Encoder::isr32()+0x4a>
    131a:	e8df f003 	tbb	[pc, r3]
    131e:	070d      	.short	0x070d
    1320:	160a071c 	.word	0x160a071c
    1324:	0a160d0d 	.word	0x0a160d0d
    1328:	0d071c07 	.word	0x0d071c07
				arg->position--;
    132c:	6953      	ldr	r3, [r2, #20]
    132e:	3b01      	subs	r3, #1
    1330:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1332:	f85d 4b04 	ldr.w	r4, [sp], #4
    1336:	4770      	bx	lr
				arg->position++;
    1338:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    133a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    133e:	3301      	adds	r3, #1
    1340:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1342:	4770      	bx	lr
		if (p1val) state |= 4;
    1344:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1348:	e7e0      	b.n	130c <Encoder::isr32()+0x24>
				arg->position -= 2;
    134a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    134c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1350:	3b02      	subs	r3, #2
    1352:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1354:	4770      	bx	lr
				arg->position += 2;
    1356:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1358:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    135c:	3302      	adds	r3, #2
    135e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1360:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1362:	7c13      	ldrb	r3, [r2, #16]
    1364:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1368:	2900      	cmp	r1, #0
    136a:	d0d1      	beq.n	1310 <Encoder::isr32()+0x28>
    136c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1370:	e7ce      	b.n	1310 <Encoder::isr32()+0x28>
    1372:	bf00      	nop
    1374:	20002200 	.word	0x20002200

00001378 <Encoder::isr33()>:
	#endif
	#ifdef CORE_INT33_PIN
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    1378:	4b22      	ldr	r3, [pc, #136]	; (1404 <Encoder::isr33()+0x8c>)
    137a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    137e:	e9d2 1000 	ldrd	r1, r0, [r2]
    1382:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1384:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1386:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    1388:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    138a:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    138c:	6894      	ldr	r4, [r2, #8]
    138e:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1392:	d02e      	beq.n	13f2 <Encoder::isr33()+0x7a>
		uint8_t state = arg->state & 3;
    1394:	7c13      	ldrb	r3, [r2, #16]
    1396:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    139a:	b9d9      	cbnz	r1, 13d4 <Encoder::isr33()+0x5c>
		if (p2val) state |= 8;
    139c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    13a0:	0899      	lsrs	r1, r3, #2
		switch (state) {
    13a2:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    13a4:	7411      	strb	r1, [r2, #16]
		switch (state) {
    13a6:	2b0d      	cmp	r3, #13
    13a8:	d80b      	bhi.n	13c2 <Encoder::isr33()+0x4a>
    13aa:	e8df f003 	tbb	[pc, r3]
    13ae:	070d      	.short	0x070d
    13b0:	160a071c 	.word	0x160a071c
    13b4:	0a160d0d 	.word	0x0a160d0d
    13b8:	0d071c07 	.word	0x0d071c07
				arg->position--;
    13bc:	6953      	ldr	r3, [r2, #20]
    13be:	3b01      	subs	r3, #1
    13c0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    13c6:	4770      	bx	lr
				arg->position++;
    13c8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13ca:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    13ce:	3301      	adds	r3, #1
    13d0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13d2:	4770      	bx	lr
		if (p1val) state |= 4;
    13d4:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    13d8:	e7e0      	b.n	139c <Encoder::isr33()+0x24>
				arg->position -= 2;
    13da:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13dc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    13e0:	3b02      	subs	r3, #2
    13e2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13e4:	4770      	bx	lr
				arg->position += 2;
    13e6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13e8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    13ec:	3302      	adds	r3, #2
    13ee:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    13f0:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    13f2:	7c13      	ldrb	r3, [r2, #16]
    13f4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    13f8:	2900      	cmp	r1, #0
    13fa:	d0d1      	beq.n	13a0 <Encoder::isr33()+0x28>
    13fc:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1400:	e7ce      	b.n	13a0 <Encoder::isr33()+0x28>
    1402:	bf00      	nop
    1404:	20002200 	.word	0x20002200

00001408 <Encoder::isr34()>:
	#endif
	#ifdef CORE_INT34_PIN
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1408:	4b22      	ldr	r3, [pc, #136]	; (1494 <Encoder::isr34()+0x8c>)
    140a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    140e:	e9d2 1000 	ldrd	r1, r0, [r2]
    1412:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1414:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1416:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1418:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    141a:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    141c:	6894      	ldr	r4, [r2, #8]
    141e:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1422:	d02e      	beq.n	1482 <Encoder::isr34()+0x7a>
		uint8_t state = arg->state & 3;
    1424:	7c13      	ldrb	r3, [r2, #16]
    1426:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    142a:	b9d9      	cbnz	r1, 1464 <Encoder::isr34()+0x5c>
		if (p2val) state |= 8;
    142c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1430:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1432:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1434:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1436:	2b0d      	cmp	r3, #13
    1438:	d80b      	bhi.n	1452 <Encoder::isr34()+0x4a>
    143a:	e8df f003 	tbb	[pc, r3]
    143e:	070d      	.short	0x070d
    1440:	160a071c 	.word	0x160a071c
    1444:	0a160d0d 	.word	0x0a160d0d
    1448:	0d071c07 	.word	0x0d071c07
				arg->position--;
    144c:	6953      	ldr	r3, [r2, #20]
    144e:	3b01      	subs	r3, #1
    1450:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1452:	f85d 4b04 	ldr.w	r4, [sp], #4
    1456:	4770      	bx	lr
				arg->position++;
    1458:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    145a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    145e:	3301      	adds	r3, #1
    1460:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1462:	4770      	bx	lr
		if (p1val) state |= 4;
    1464:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1468:	e7e0      	b.n	142c <Encoder::isr34()+0x24>
				arg->position -= 2;
    146a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    146c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1470:	3b02      	subs	r3, #2
    1472:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1474:	4770      	bx	lr
				arg->position += 2;
    1476:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1478:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    147c:	3302      	adds	r3, #2
    147e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1480:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1482:	7c13      	ldrb	r3, [r2, #16]
    1484:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1488:	2900      	cmp	r1, #0
    148a:	d0d1      	beq.n	1430 <Encoder::isr34()+0x28>
    148c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1490:	e7ce      	b.n	1430 <Encoder::isr34()+0x28>
    1492:	bf00      	nop
    1494:	20002200 	.word	0x20002200

00001498 <Encoder::isr35()>:
	#endif
	#ifdef CORE_INT35_PIN
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1498:	4b22      	ldr	r3, [pc, #136]	; (1524 <Encoder::isr35()+0x8c>)
    149a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    149e:	e9d2 1000 	ldrd	r1, r0, [r2]
    14a2:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    14a4:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14a6:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    14a8:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14aa:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    14ac:	6894      	ldr	r4, [r2, #8]
    14ae:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14b2:	d02e      	beq.n	1512 <Encoder::isr35()+0x7a>
		uint8_t state = arg->state & 3;
    14b4:	7c13      	ldrb	r3, [r2, #16]
    14b6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    14ba:	b9d9      	cbnz	r1, 14f4 <Encoder::isr35()+0x5c>
		if (p2val) state |= 8;
    14bc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    14c0:	0899      	lsrs	r1, r3, #2
		switch (state) {
    14c2:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    14c4:	7411      	strb	r1, [r2, #16]
		switch (state) {
    14c6:	2b0d      	cmp	r3, #13
    14c8:	d80b      	bhi.n	14e2 <Encoder::isr35()+0x4a>
    14ca:	e8df f003 	tbb	[pc, r3]
    14ce:	070d      	.short	0x070d
    14d0:	160a071c 	.word	0x160a071c
    14d4:	0a160d0d 	.word	0x0a160d0d
    14d8:	0d071c07 	.word	0x0d071c07
				arg->position--;
    14dc:	6953      	ldr	r3, [r2, #20]
    14de:	3b01      	subs	r3, #1
    14e0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    14e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    14e6:	4770      	bx	lr
				arg->position++;
    14e8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    14ea:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    14ee:	3301      	adds	r3, #1
    14f0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    14f2:	4770      	bx	lr
		if (p1val) state |= 4;
    14f4:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    14f8:	e7e0      	b.n	14bc <Encoder::isr35()+0x24>
				arg->position -= 2;
    14fa:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    14fc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1500:	3b02      	subs	r3, #2
    1502:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1504:	4770      	bx	lr
				arg->position += 2;
    1506:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1508:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    150c:	3302      	adds	r3, #2
    150e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1510:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1512:	7c13      	ldrb	r3, [r2, #16]
    1514:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1518:	2900      	cmp	r1, #0
    151a:	d0d1      	beq.n	14c0 <Encoder::isr35()+0x28>
    151c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1520:	e7ce      	b.n	14c0 <Encoder::isr35()+0x28>
    1522:	bf00      	nop
    1524:	20002200 	.word	0x20002200

00001528 <Encoder::isr36()>:
	#endif
	#ifdef CORE_INT36_PIN
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1528:	4b22      	ldr	r3, [pc, #136]	; (15b4 <Encoder::isr36()+0x8c>)
    152a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    152e:	e9d2 1000 	ldrd	r1, r0, [r2]
    1532:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1534:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1536:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1538:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    153a:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    153c:	6894      	ldr	r4, [r2, #8]
    153e:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1542:	d02e      	beq.n	15a2 <Encoder::isr36()+0x7a>
		uint8_t state = arg->state & 3;
    1544:	7c13      	ldrb	r3, [r2, #16]
    1546:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    154a:	b9d9      	cbnz	r1, 1584 <Encoder::isr36()+0x5c>
		if (p2val) state |= 8;
    154c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1550:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1552:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1554:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1556:	2b0d      	cmp	r3, #13
    1558:	d80b      	bhi.n	1572 <Encoder::isr36()+0x4a>
    155a:	e8df f003 	tbb	[pc, r3]
    155e:	070d      	.short	0x070d
    1560:	160a071c 	.word	0x160a071c
    1564:	0a160d0d 	.word	0x0a160d0d
    1568:	0d071c07 	.word	0x0d071c07
				arg->position--;
    156c:	6953      	ldr	r3, [r2, #20]
    156e:	3b01      	subs	r3, #1
    1570:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1572:	f85d 4b04 	ldr.w	r4, [sp], #4
    1576:	4770      	bx	lr
				arg->position++;
    1578:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    157a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    157e:	3301      	adds	r3, #1
    1580:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1582:	4770      	bx	lr
		if (p1val) state |= 4;
    1584:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1588:	e7e0      	b.n	154c <Encoder::isr36()+0x24>
				arg->position -= 2;
    158a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    158c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1590:	3b02      	subs	r3, #2
    1592:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1594:	4770      	bx	lr
				arg->position += 2;
    1596:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1598:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    159c:	3302      	adds	r3, #2
    159e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    15a0:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    15a2:	7c13      	ldrb	r3, [r2, #16]
    15a4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    15a8:	2900      	cmp	r1, #0
    15aa:	d0d1      	beq.n	1550 <Encoder::isr36()+0x28>
    15ac:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    15b0:	e7ce      	b.n	1550 <Encoder::isr36()+0x28>
    15b2:	bf00      	nop
    15b4:	20002200 	.word	0x20002200

000015b8 <Encoder::isr37()>:
	#endif
	#ifdef CORE_INT37_PIN
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    15b8:	4b22      	ldr	r3, [pc, #136]	; (1644 <Encoder::isr37()+0x8c>)
    15ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    15be:	e9d2 1000 	ldrd	r1, r0, [r2]
    15c2:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    15c4:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    15c6:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    15c8:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    15ca:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    15cc:	6894      	ldr	r4, [r2, #8]
    15ce:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    15d2:	d02e      	beq.n	1632 <Encoder::isr37()+0x7a>
		uint8_t state = arg->state & 3;
    15d4:	7c13      	ldrb	r3, [r2, #16]
    15d6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    15da:	b9d9      	cbnz	r1, 1614 <Encoder::isr37()+0x5c>
		if (p2val) state |= 8;
    15dc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    15e0:	0899      	lsrs	r1, r3, #2
		switch (state) {
    15e2:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    15e4:	7411      	strb	r1, [r2, #16]
		switch (state) {
    15e6:	2b0d      	cmp	r3, #13
    15e8:	d80b      	bhi.n	1602 <Encoder::isr37()+0x4a>
    15ea:	e8df f003 	tbb	[pc, r3]
    15ee:	070d      	.short	0x070d
    15f0:	160a071c 	.word	0x160a071c
    15f4:	0a160d0d 	.word	0x0a160d0d
    15f8:	0d071c07 	.word	0x0d071c07
				arg->position--;
    15fc:	6953      	ldr	r3, [r2, #20]
    15fe:	3b01      	subs	r3, #1
    1600:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1602:	f85d 4b04 	ldr.w	r4, [sp], #4
    1606:	4770      	bx	lr
				arg->position++;
    1608:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    160a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    160e:	3301      	adds	r3, #1
    1610:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1612:	4770      	bx	lr
		if (p1val) state |= 4;
    1614:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1618:	e7e0      	b.n	15dc <Encoder::isr37()+0x24>
				arg->position -= 2;
    161a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    161c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1620:	3b02      	subs	r3, #2
    1622:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1624:	4770      	bx	lr
				arg->position += 2;
    1626:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1628:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    162c:	3302      	adds	r3, #2
    162e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1630:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1632:	7c13      	ldrb	r3, [r2, #16]
    1634:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1638:	2900      	cmp	r1, #0
    163a:	d0d1      	beq.n	15e0 <Encoder::isr37()+0x28>
    163c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1640:	e7ce      	b.n	15e0 <Encoder::isr37()+0x28>
    1642:	bf00      	nop
    1644:	20002200 	.word	0x20002200

00001648 <Encoder::isr38()>:
	#endif
	#ifdef CORE_INT38_PIN
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1648:	4b22      	ldr	r3, [pc, #136]	; (16d4 <Encoder::isr38()+0x8c>)
    164a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    164e:	e9d2 1000 	ldrd	r1, r0, [r2]
    1652:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1654:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1656:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1658:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    165a:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    165c:	6894      	ldr	r4, [r2, #8]
    165e:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1662:	d02e      	beq.n	16c2 <Encoder::isr38()+0x7a>
		uint8_t state = arg->state & 3;
    1664:	7c13      	ldrb	r3, [r2, #16]
    1666:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    166a:	b9d9      	cbnz	r1, 16a4 <Encoder::isr38()+0x5c>
		if (p2val) state |= 8;
    166c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1670:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1672:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1674:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1676:	2b0d      	cmp	r3, #13
    1678:	d80b      	bhi.n	1692 <Encoder::isr38()+0x4a>
    167a:	e8df f003 	tbb	[pc, r3]
    167e:	070d      	.short	0x070d
    1680:	160a071c 	.word	0x160a071c
    1684:	0a160d0d 	.word	0x0a160d0d
    1688:	0d071c07 	.word	0x0d071c07
				arg->position--;
    168c:	6953      	ldr	r3, [r2, #20]
    168e:	3b01      	subs	r3, #1
    1690:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1692:	f85d 4b04 	ldr.w	r4, [sp], #4
    1696:	4770      	bx	lr
				arg->position++;
    1698:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    169a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    169e:	3301      	adds	r3, #1
    16a0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    16a2:	4770      	bx	lr
		if (p1val) state |= 4;
    16a4:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    16a8:	e7e0      	b.n	166c <Encoder::isr38()+0x24>
				arg->position -= 2;
    16aa:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    16ac:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    16b0:	3b02      	subs	r3, #2
    16b2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    16b4:	4770      	bx	lr
				arg->position += 2;
    16b6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    16b8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    16bc:	3302      	adds	r3, #2
    16be:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    16c0:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    16c2:	7c13      	ldrb	r3, [r2, #16]
    16c4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    16c8:	2900      	cmp	r1, #0
    16ca:	d0d1      	beq.n	1670 <Encoder::isr38()+0x28>
    16cc:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    16d0:	e7ce      	b.n	1670 <Encoder::isr38()+0x28>
    16d2:	bf00      	nop
    16d4:	20002200 	.word	0x20002200

000016d8 <Encoder::isr39()>:
	#endif
	#ifdef CORE_INT39_PIN
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    16d8:	4b22      	ldr	r3, [pc, #136]	; (1764 <Encoder::isr39()+0x8c>)
    16da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16de:	e9d2 1000 	ldrd	r1, r0, [r2]
    16e2:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16e4:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16e6:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    16e8:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16ea:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16ec:	6894      	ldr	r4, [r2, #8]
    16ee:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16f2:	d02e      	beq.n	1752 <Encoder::isr39()+0x7a>
		uint8_t state = arg->state & 3;
    16f4:	7c13      	ldrb	r3, [r2, #16]
    16f6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    16fa:	b9d9      	cbnz	r1, 1734 <Encoder::isr39()+0x5c>
		if (p2val) state |= 8;
    16fc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1700:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1702:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1704:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1706:	2b0d      	cmp	r3, #13
    1708:	d80b      	bhi.n	1722 <Encoder::isr39()+0x4a>
    170a:	e8df f003 	tbb	[pc, r3]
    170e:	070d      	.short	0x070d
    1710:	160a071c 	.word	0x160a071c
    1714:	0a160d0d 	.word	0x0a160d0d
    1718:	0d071c07 	.word	0x0d071c07
				arg->position--;
    171c:	6953      	ldr	r3, [r2, #20]
    171e:	3b01      	subs	r3, #1
    1720:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1722:	f85d 4b04 	ldr.w	r4, [sp], #4
    1726:	4770      	bx	lr
				arg->position++;
    1728:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    172a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    172e:	3301      	adds	r3, #1
    1730:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1732:	4770      	bx	lr
		if (p1val) state |= 4;
    1734:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1738:	e7e0      	b.n	16fc <Encoder::isr39()+0x24>
				arg->position -= 2;
    173a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    173c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1740:	3b02      	subs	r3, #2
    1742:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1744:	4770      	bx	lr
				arg->position += 2;
    1746:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1748:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    174c:	3302      	adds	r3, #2
    174e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1750:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1752:	7c13      	ldrb	r3, [r2, #16]
    1754:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1758:	2900      	cmp	r1, #0
    175a:	d0d1      	beq.n	1700 <Encoder::isr39()+0x28>
    175c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1760:	e7ce      	b.n	1700 <Encoder::isr39()+0x28>
    1762:	bf00      	nop
    1764:	20002200 	.word	0x20002200

00001768 <theBinaries::theBinaries()>:
  theBinaries() {
    1768:	b570      	push	{r4, r5, r6, lr}
    176a:	4d1a      	ldr	r5, [pc, #104]	; (17d4 <theBinaries::theBinaries()+0x6c>)
    176c:	4604      	mov	r4, r0
    176e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1776:	2200      	movs	r2, #0
    1778:	f105 0310 	add.w	r3, r5, #16
    177c:	f104 0c18 	add.w	ip, r4, #24
    1780:	1f25      	subs	r5, r4, #4
    1782:	6122      	str	r2, [r4, #16]
    1784:	f104 060c 	add.w	r6, r4, #12
    1788:	7522      	strb	r2, [r4, #20]
    178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    178c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    1790:	221e      	movs	r2, #30
    1792:	210c      	movs	r1, #12
    1794:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1798:	f003 f9fa 	bl	4b90 <Bounce::Bounce(unsigned char, unsigned long)>
    179c:	221e      	movs	r2, #30
    179e:	7921      	ldrb	r1, [r4, #4]
    17a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    17a4:	f003 f9f4 	bl	4b90 <Bounce::Bounce(unsigned char, unsigned long)>
    17a8:	221e      	movs	r2, #30
    17aa:	7a21      	ldrb	r1, [r4, #8]
    17ac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    17b0:	f003 f9ee 	bl	4b90 <Bounce::Bounce(unsigned char, unsigned long)>
    17b4:	221e      	movs	r2, #30
    17b6:	7b21      	ldrb	r1, [r4, #12]
    17b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    17bc:	f003 f9e8 	bl	4b90 <Bounce::Bounce(unsigned char, unsigned long)>
      pinMode(binaryButtons[i], INPUT_PULLUP);
    17c0:	f855 0f04 	ldr.w	r0, [r5, #4]!
    17c4:	2102      	movs	r1, #2
    17c6:	b2c0      	uxtb	r0, r0
    17c8:	f004 fab8 	bl	5d3c <pinMode>
    for (int i = 0; i < numOfBs; i++) {
    17cc:	42b5      	cmp	r5, r6
    17ce:	d1f7      	bne.n	17c0 <theBinaries::theBinaries()+0x58>
  }
    17d0:	4620      	mov	r0, r4
    17d2:	bd70      	pop	{r4, r5, r6, pc}
    17d4:	20000280 	.word	0x20000280

000017d8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>:
	static uint8_t attach_interrupt(uint8_t pin, Encoder_internal_state_t *state) {
    17d8:	460b      	mov	r3, r1
    17da:	b510      	push	{r4, lr}
		switch (pin) {
    17dc:	2827      	cmp	r0, #39	; 0x27
    17de:	f200 819b 	bhi.w	1b18 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x340>
    17e2:	e8df f010 	tbh	[pc, r0, lsl #1]
    17e6:	0190      	.short	0x0190
    17e8:	017d0186 	.word	0x017d0186
    17ec:	016b0174 	.word	0x016b0174
    17f0:	01590162 	.word	0x01590162
    17f4:	01470150 	.word	0x01470150
    17f8:	0135013e 	.word	0x0135013e
    17fc:	0123012c 	.word	0x0123012c
    1800:	0111011a 	.word	0x0111011a
    1804:	00ff0108 	.word	0x00ff0108
    1808:	00ed00f6 	.word	0x00ed00f6
    180c:	00db00e4 	.word	0x00db00e4
    1810:	00c900d2 	.word	0x00c900d2
    1814:	00b700c0 	.word	0x00b700c0
    1818:	00a500ae 	.word	0x00a500ae
    181c:	0093009c 	.word	0x0093009c
    1820:	0081008a 	.word	0x0081008a
    1824:	006e0078 	.word	0x006e0078
    1828:	005a0064 	.word	0x005a0064
    182c:	00460050 	.word	0x00460050
    1830:	0032003c 	.word	0x0032003c
    1834:	0028      	.short	0x0028
				interruptArgs[39] = state;
    1836:	4cb9      	ldr	r4, [pc, #740]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(39, isr39, CHANGE);
    1838:	2204      	movs	r2, #4
    183a:	49b9      	ldr	r1, [pc, #740]	; (1b20 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    183c:	2027      	movs	r0, #39	; 0x27
				interruptArgs[39] = state;
    183e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
				attachInterrupt(39, isr39, CHANGE);
    1842:	f004 fab5 	bl	5db0 <attachInterrupt>
		return 1;
    1846:	2001      	movs	r0, #1
	}
    1848:	bd10      	pop	{r4, pc}
				interruptArgs[38] = state;
    184a:	4cb4      	ldr	r4, [pc, #720]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(38, isr38, CHANGE);
    184c:	2204      	movs	r2, #4
    184e:	49b5      	ldr	r1, [pc, #724]	; (1b24 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x34c>)
    1850:	2026      	movs	r0, #38	; 0x26
				interruptArgs[38] = state;
    1852:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				attachInterrupt(38, isr38, CHANGE);
    1856:	f004 faab 	bl	5db0 <attachInterrupt>
		return 1;
    185a:	2001      	movs	r0, #1
	}
    185c:	bd10      	pop	{r4, pc}
				interruptArgs[37] = state;
    185e:	4caf      	ldr	r4, [pc, #700]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(37, isr37, CHANGE);
    1860:	2204      	movs	r2, #4
    1862:	49b1      	ldr	r1, [pc, #708]	; (1b28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x350>)
    1864:	2025      	movs	r0, #37	; 0x25
				interruptArgs[37] = state;
    1866:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
				attachInterrupt(37, isr37, CHANGE);
    186a:	f004 faa1 	bl	5db0 <attachInterrupt>
		return 1;
    186e:	2001      	movs	r0, #1
	}
    1870:	bd10      	pop	{r4, pc}
				interruptArgs[36] = state;
    1872:	4caa      	ldr	r4, [pc, #680]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(36, isr36, CHANGE);
    1874:	2204      	movs	r2, #4
    1876:	49ad      	ldr	r1, [pc, #692]	; (1b2c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x354>)
    1878:	2024      	movs	r0, #36	; 0x24
				interruptArgs[36] = state;
    187a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
				attachInterrupt(36, isr36, CHANGE);
    187e:	f004 fa97 	bl	5db0 <attachInterrupt>
		return 1;
    1882:	2001      	movs	r0, #1
	}
    1884:	bd10      	pop	{r4, pc}
				interruptArgs[35] = state;
    1886:	4ca5      	ldr	r4, [pc, #660]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(35, isr35, CHANGE);
    1888:	2204      	movs	r2, #4
    188a:	49a9      	ldr	r1, [pc, #676]	; (1b30 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x358>)
    188c:	2023      	movs	r0, #35	; 0x23
				interruptArgs[35] = state;
    188e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
				attachInterrupt(35, isr35, CHANGE);
    1892:	f004 fa8d 	bl	5db0 <attachInterrupt>
		return 1;
    1896:	2001      	movs	r0, #1
	}
    1898:	bd10      	pop	{r4, pc}
				interruptArgs[34] = state;
    189a:	4ca0      	ldr	r4, [pc, #640]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(34, isr34, CHANGE);
    189c:	2204      	movs	r2, #4
    189e:	49a5      	ldr	r1, [pc, #660]	; (1b34 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x35c>)
    18a0:	2022      	movs	r0, #34	; 0x22
				interruptArgs[34] = state;
    18a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				attachInterrupt(34, isr34, CHANGE);
    18a6:	f004 fa83 	bl	5db0 <attachInterrupt>
		return 1;
    18aa:	2001      	movs	r0, #1
	}
    18ac:	bd10      	pop	{r4, pc}
				interruptArgs[33] = state;
    18ae:	4c9b      	ldr	r4, [pc, #620]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(33, isr33, CHANGE);
    18b0:	2204      	movs	r2, #4
    18b2:	49a1      	ldr	r1, [pc, #644]	; (1b38 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x360>)
    18b4:	2021      	movs	r0, #33	; 0x21
				interruptArgs[33] = state;
    18b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				attachInterrupt(33, isr33, CHANGE);
    18ba:	f004 fa79 	bl	5db0 <attachInterrupt>
		return 1;
    18be:	2001      	movs	r0, #1
	}
    18c0:	bd10      	pop	{r4, pc}
				interruptArgs[32] = state;
    18c2:	4c96      	ldr	r4, [pc, #600]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(32, isr32, CHANGE);
    18c4:	2204      	movs	r2, #4
    18c6:	499d      	ldr	r1, [pc, #628]	; (1b3c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x364>)
    18c8:	2020      	movs	r0, #32
				interruptArgs[32] = state;
    18ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				attachInterrupt(32, isr32, CHANGE);
    18ce:	f004 fa6f 	bl	5db0 <attachInterrupt>
		return 1;
    18d2:	2001      	movs	r0, #1
	}
    18d4:	bd10      	pop	{r4, pc}
				interruptArgs[31] = state;
    18d6:	4c91      	ldr	r4, [pc, #580]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(31, isr31, CHANGE);
    18d8:	2204      	movs	r2, #4
    18da:	4999      	ldr	r1, [pc, #612]	; (1b40 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x368>)
    18dc:	201f      	movs	r0, #31
				interruptArgs[31] = state;
    18de:	67e3      	str	r3, [r4, #124]	; 0x7c
				attachInterrupt(31, isr31, CHANGE);
    18e0:	f004 fa66 	bl	5db0 <attachInterrupt>
		return 1;
    18e4:	2001      	movs	r0, #1
	}
    18e6:	bd10      	pop	{r4, pc}
				interruptArgs[30] = state;
    18e8:	4c8c      	ldr	r4, [pc, #560]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(30, isr30, CHANGE);
    18ea:	2204      	movs	r2, #4
    18ec:	4995      	ldr	r1, [pc, #596]	; (1b44 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x36c>)
    18ee:	201e      	movs	r0, #30
				interruptArgs[30] = state;
    18f0:	67a3      	str	r3, [r4, #120]	; 0x78
				attachInterrupt(30, isr30, CHANGE);
    18f2:	f004 fa5d 	bl	5db0 <attachInterrupt>
		return 1;
    18f6:	2001      	movs	r0, #1
	}
    18f8:	bd10      	pop	{r4, pc}
				interruptArgs[29] = state;
    18fa:	4c88      	ldr	r4, [pc, #544]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(29, isr29, CHANGE);
    18fc:	2204      	movs	r2, #4
    18fe:	4992      	ldr	r1, [pc, #584]	; (1b48 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x370>)
    1900:	201d      	movs	r0, #29
				interruptArgs[29] = state;
    1902:	6763      	str	r3, [r4, #116]	; 0x74
				attachInterrupt(29, isr29, CHANGE);
    1904:	f004 fa54 	bl	5db0 <attachInterrupt>
		return 1;
    1908:	2001      	movs	r0, #1
	}
    190a:	bd10      	pop	{r4, pc}
				interruptArgs[28] = state;
    190c:	4c83      	ldr	r4, [pc, #524]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(28, isr28, CHANGE);
    190e:	2204      	movs	r2, #4
    1910:	498e      	ldr	r1, [pc, #568]	; (1b4c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x374>)
    1912:	201c      	movs	r0, #28
				interruptArgs[28] = state;
    1914:	6723      	str	r3, [r4, #112]	; 0x70
				attachInterrupt(28, isr28, CHANGE);
    1916:	f004 fa4b 	bl	5db0 <attachInterrupt>
		return 1;
    191a:	2001      	movs	r0, #1
	}
    191c:	bd10      	pop	{r4, pc}
				interruptArgs[27] = state;
    191e:	4c7f      	ldr	r4, [pc, #508]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(27, isr27, CHANGE);
    1920:	2204      	movs	r2, #4
    1922:	498b      	ldr	r1, [pc, #556]	; (1b50 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x378>)
    1924:	201b      	movs	r0, #27
				interruptArgs[27] = state;
    1926:	66e3      	str	r3, [r4, #108]	; 0x6c
				attachInterrupt(27, isr27, CHANGE);
    1928:	f004 fa42 	bl	5db0 <attachInterrupt>
		return 1;
    192c:	2001      	movs	r0, #1
	}
    192e:	bd10      	pop	{r4, pc}
				interruptArgs[26] = state;
    1930:	4c7a      	ldr	r4, [pc, #488]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(26, isr26, CHANGE);
    1932:	2204      	movs	r2, #4
    1934:	4987      	ldr	r1, [pc, #540]	; (1b54 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x37c>)
    1936:	201a      	movs	r0, #26
				interruptArgs[26] = state;
    1938:	66a3      	str	r3, [r4, #104]	; 0x68
				attachInterrupt(26, isr26, CHANGE);
    193a:	f004 fa39 	bl	5db0 <attachInterrupt>
		return 1;
    193e:	2001      	movs	r0, #1
	}
    1940:	bd10      	pop	{r4, pc}
				interruptArgs[25] = state;
    1942:	4c76      	ldr	r4, [pc, #472]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(25, isr25, CHANGE);
    1944:	2204      	movs	r2, #4
    1946:	4984      	ldr	r1, [pc, #528]	; (1b58 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x380>)
    1948:	2019      	movs	r0, #25
				interruptArgs[25] = state;
    194a:	6663      	str	r3, [r4, #100]	; 0x64
				attachInterrupt(25, isr25, CHANGE);
    194c:	f004 fa30 	bl	5db0 <attachInterrupt>
		return 1;
    1950:	2001      	movs	r0, #1
	}
    1952:	bd10      	pop	{r4, pc}
				interruptArgs[24] = state;
    1954:	4c71      	ldr	r4, [pc, #452]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(24, isr24, CHANGE);
    1956:	2204      	movs	r2, #4
    1958:	4980      	ldr	r1, [pc, #512]	; (1b5c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x384>)
    195a:	2018      	movs	r0, #24
				interruptArgs[24] = state;
    195c:	6623      	str	r3, [r4, #96]	; 0x60
				attachInterrupt(24, isr24, CHANGE);
    195e:	f004 fa27 	bl	5db0 <attachInterrupt>
		return 1;
    1962:	2001      	movs	r0, #1
	}
    1964:	bd10      	pop	{r4, pc}
				interruptArgs[23] = state;
    1966:	4c6d      	ldr	r4, [pc, #436]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(23, isr23, CHANGE);
    1968:	2204      	movs	r2, #4
    196a:	497d      	ldr	r1, [pc, #500]	; (1b60 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x388>)
    196c:	2017      	movs	r0, #23
				interruptArgs[23] = state;
    196e:	65e3      	str	r3, [r4, #92]	; 0x5c
				attachInterrupt(23, isr23, CHANGE);
    1970:	f004 fa1e 	bl	5db0 <attachInterrupt>
		return 1;
    1974:	2001      	movs	r0, #1
	}
    1976:	bd10      	pop	{r4, pc}
				interruptArgs[22] = state;
    1978:	4c68      	ldr	r4, [pc, #416]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(22, isr22, CHANGE);
    197a:	2204      	movs	r2, #4
    197c:	4979      	ldr	r1, [pc, #484]	; (1b64 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x38c>)
    197e:	2016      	movs	r0, #22
				interruptArgs[22] = state;
    1980:	65a3      	str	r3, [r4, #88]	; 0x58
				attachInterrupt(22, isr22, CHANGE);
    1982:	f004 fa15 	bl	5db0 <attachInterrupt>
		return 1;
    1986:	2001      	movs	r0, #1
	}
    1988:	bd10      	pop	{r4, pc}
				interruptArgs[21] = state;
    198a:	4c64      	ldr	r4, [pc, #400]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(21, isr21, CHANGE);
    198c:	2204      	movs	r2, #4
    198e:	4976      	ldr	r1, [pc, #472]	; (1b68 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x390>)
    1990:	2015      	movs	r0, #21
				interruptArgs[21] = state;
    1992:	6563      	str	r3, [r4, #84]	; 0x54
				attachInterrupt(21, isr21, CHANGE);
    1994:	f004 fa0c 	bl	5db0 <attachInterrupt>
		return 1;
    1998:	2001      	movs	r0, #1
	}
    199a:	bd10      	pop	{r4, pc}
				interruptArgs[20] = state;
    199c:	4c5f      	ldr	r4, [pc, #380]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(20, isr20, CHANGE);
    199e:	2204      	movs	r2, #4
    19a0:	4972      	ldr	r1, [pc, #456]	; (1b6c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x394>)
    19a2:	2014      	movs	r0, #20
				interruptArgs[20] = state;
    19a4:	6523      	str	r3, [r4, #80]	; 0x50
				attachInterrupt(20, isr20, CHANGE);
    19a6:	f004 fa03 	bl	5db0 <attachInterrupt>
		return 1;
    19aa:	2001      	movs	r0, #1
	}
    19ac:	bd10      	pop	{r4, pc}
				interruptArgs[19] = state;
    19ae:	4c5b      	ldr	r4, [pc, #364]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(19, isr19, CHANGE);
    19b0:	2204      	movs	r2, #4
    19b2:	496f      	ldr	r1, [pc, #444]	; (1b70 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x398>)
    19b4:	2013      	movs	r0, #19
				interruptArgs[19] = state;
    19b6:	64e3      	str	r3, [r4, #76]	; 0x4c
				attachInterrupt(19, isr19, CHANGE);
    19b8:	f004 f9fa 	bl	5db0 <attachInterrupt>
		return 1;
    19bc:	2001      	movs	r0, #1
	}
    19be:	bd10      	pop	{r4, pc}
				interruptArgs[18] = state;
    19c0:	4c56      	ldr	r4, [pc, #344]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(18, isr18, CHANGE);
    19c2:	2204      	movs	r2, #4
    19c4:	496b      	ldr	r1, [pc, #428]	; (1b74 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x39c>)
    19c6:	2012      	movs	r0, #18
				interruptArgs[18] = state;
    19c8:	64a3      	str	r3, [r4, #72]	; 0x48
				attachInterrupt(18, isr18, CHANGE);
    19ca:	f004 f9f1 	bl	5db0 <attachInterrupt>
		return 1;
    19ce:	2001      	movs	r0, #1
	}
    19d0:	bd10      	pop	{r4, pc}
				interruptArgs[17] = state;
    19d2:	4c52      	ldr	r4, [pc, #328]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(17, isr17, CHANGE);
    19d4:	2204      	movs	r2, #4
    19d6:	4968      	ldr	r1, [pc, #416]	; (1b78 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
    19d8:	2011      	movs	r0, #17
				interruptArgs[17] = state;
    19da:	6463      	str	r3, [r4, #68]	; 0x44
				attachInterrupt(17, isr17, CHANGE);
    19dc:	f004 f9e8 	bl	5db0 <attachInterrupt>
		return 1;
    19e0:	2001      	movs	r0, #1
	}
    19e2:	bd10      	pop	{r4, pc}
				interruptArgs[16] = state;
    19e4:	4c4d      	ldr	r4, [pc, #308]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(16, isr16, CHANGE);
    19e6:	2204      	movs	r2, #4
    19e8:	4964      	ldr	r1, [pc, #400]	; (1b7c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a4>)
    19ea:	2010      	movs	r0, #16
				interruptArgs[16] = state;
    19ec:	6423      	str	r3, [r4, #64]	; 0x40
				attachInterrupt(16, isr16, CHANGE);
    19ee:	f004 f9df 	bl	5db0 <attachInterrupt>
		return 1;
    19f2:	2001      	movs	r0, #1
	}
    19f4:	bd10      	pop	{r4, pc}
				interruptArgs[15] = state;
    19f6:	4c49      	ldr	r4, [pc, #292]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(15, isr15, CHANGE);
    19f8:	2204      	movs	r2, #4
    19fa:	4961      	ldr	r1, [pc, #388]	; (1b80 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a8>)
    19fc:	200f      	movs	r0, #15
				interruptArgs[15] = state;
    19fe:	63e3      	str	r3, [r4, #60]	; 0x3c
				attachInterrupt(15, isr15, CHANGE);
    1a00:	f004 f9d6 	bl	5db0 <attachInterrupt>
		return 1;
    1a04:	2001      	movs	r0, #1
	}
    1a06:	bd10      	pop	{r4, pc}
				interruptArgs[14] = state;
    1a08:	4c44      	ldr	r4, [pc, #272]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(14, isr14, CHANGE);
    1a0a:	2204      	movs	r2, #4
    1a0c:	495d      	ldr	r1, [pc, #372]	; (1b84 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ac>)
    1a0e:	200e      	movs	r0, #14
				interruptArgs[14] = state;
    1a10:	63a3      	str	r3, [r4, #56]	; 0x38
				attachInterrupt(14, isr14, CHANGE);
    1a12:	f004 f9cd 	bl	5db0 <attachInterrupt>
		return 1;
    1a16:	2001      	movs	r0, #1
	}
    1a18:	bd10      	pop	{r4, pc}
				interruptArgs[13] = state;
    1a1a:	4c40      	ldr	r4, [pc, #256]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(13, isr13, CHANGE);
    1a1c:	2204      	movs	r2, #4
    1a1e:	495a      	ldr	r1, [pc, #360]	; (1b88 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b0>)
    1a20:	200d      	movs	r0, #13
				interruptArgs[13] = state;
    1a22:	6363      	str	r3, [r4, #52]	; 0x34
				attachInterrupt(13, isr13, CHANGE);
    1a24:	f004 f9c4 	bl	5db0 <attachInterrupt>
		return 1;
    1a28:	2001      	movs	r0, #1
	}
    1a2a:	bd10      	pop	{r4, pc}
				interruptArgs[12] = state;
    1a2c:	4c3b      	ldr	r4, [pc, #236]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(12, isr12, CHANGE);
    1a2e:	2204      	movs	r2, #4
    1a30:	4956      	ldr	r1, [pc, #344]	; (1b8c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b4>)
    1a32:	200c      	movs	r0, #12
				interruptArgs[12] = state;
    1a34:	6323      	str	r3, [r4, #48]	; 0x30
				attachInterrupt(12, isr12, CHANGE);
    1a36:	f004 f9bb 	bl	5db0 <attachInterrupt>
		return 1;
    1a3a:	2001      	movs	r0, #1
	}
    1a3c:	bd10      	pop	{r4, pc}
				interruptArgs[11] = state;
    1a3e:	4c37      	ldr	r4, [pc, #220]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(11, isr11, CHANGE);
    1a40:	2204      	movs	r2, #4
    1a42:	4953      	ldr	r1, [pc, #332]	; (1b90 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b8>)
    1a44:	200b      	movs	r0, #11
				interruptArgs[11] = state;
    1a46:	62e3      	str	r3, [r4, #44]	; 0x2c
				attachInterrupt(11, isr11, CHANGE);
    1a48:	f004 f9b2 	bl	5db0 <attachInterrupt>
		return 1;
    1a4c:	2001      	movs	r0, #1
	}
    1a4e:	bd10      	pop	{r4, pc}
				interruptArgs[10] = state;
    1a50:	4c32      	ldr	r4, [pc, #200]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(10, isr10, CHANGE);
    1a52:	2204      	movs	r2, #4
    1a54:	494f      	ldr	r1, [pc, #316]	; (1b94 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3bc>)
    1a56:	200a      	movs	r0, #10
				interruptArgs[10] = state;
    1a58:	62a3      	str	r3, [r4, #40]	; 0x28
				attachInterrupt(10, isr10, CHANGE);
    1a5a:	f004 f9a9 	bl	5db0 <attachInterrupt>
		return 1;
    1a5e:	2001      	movs	r0, #1
	}
    1a60:	bd10      	pop	{r4, pc}
				interruptArgs[9] = state;
    1a62:	4c2e      	ldr	r4, [pc, #184]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(9, isr9, CHANGE);
    1a64:	2204      	movs	r2, #4
    1a66:	494c      	ldr	r1, [pc, #304]	; (1b98 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c0>)
    1a68:	2009      	movs	r0, #9
				interruptArgs[9] = state;
    1a6a:	6263      	str	r3, [r4, #36]	; 0x24
				attachInterrupt(9, isr9, CHANGE);
    1a6c:	f004 f9a0 	bl	5db0 <attachInterrupt>
		return 1;
    1a70:	2001      	movs	r0, #1
	}
    1a72:	bd10      	pop	{r4, pc}
				interruptArgs[8] = state;
    1a74:	4c29      	ldr	r4, [pc, #164]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(8, isr8, CHANGE);
    1a76:	2204      	movs	r2, #4
    1a78:	4948      	ldr	r1, [pc, #288]	; (1b9c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c4>)
    1a7a:	2008      	movs	r0, #8
				interruptArgs[8] = state;
    1a7c:	6223      	str	r3, [r4, #32]
				attachInterrupt(8, isr8, CHANGE);
    1a7e:	f004 f997 	bl	5db0 <attachInterrupt>
		return 1;
    1a82:	2001      	movs	r0, #1
	}
    1a84:	bd10      	pop	{r4, pc}
				interruptArgs[7] = state;
    1a86:	4c25      	ldr	r4, [pc, #148]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(7, isr7, CHANGE);
    1a88:	2204      	movs	r2, #4
    1a8a:	4945      	ldr	r1, [pc, #276]	; (1ba0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c8>)
    1a8c:	2007      	movs	r0, #7
				interruptArgs[7] = state;
    1a8e:	61e3      	str	r3, [r4, #28]
				attachInterrupt(7, isr7, CHANGE);
    1a90:	f004 f98e 	bl	5db0 <attachInterrupt>
		return 1;
    1a94:	2001      	movs	r0, #1
	}
    1a96:	bd10      	pop	{r4, pc}
				interruptArgs[6] = state;
    1a98:	4c20      	ldr	r4, [pc, #128]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(6, isr6, CHANGE);
    1a9a:	2204      	movs	r2, #4
    1a9c:	4941      	ldr	r1, [pc, #260]	; (1ba4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3cc>)
    1a9e:	2006      	movs	r0, #6
				interruptArgs[6] = state;
    1aa0:	61a3      	str	r3, [r4, #24]
				attachInterrupt(6, isr6, CHANGE);
    1aa2:	f004 f985 	bl	5db0 <attachInterrupt>
		return 1;
    1aa6:	2001      	movs	r0, #1
	}
    1aa8:	bd10      	pop	{r4, pc}
				interruptArgs[5] = state;
    1aaa:	4c1c      	ldr	r4, [pc, #112]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(5, isr5, CHANGE);
    1aac:	2204      	movs	r2, #4
    1aae:	493e      	ldr	r1, [pc, #248]	; (1ba8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d0>)
    1ab0:	2005      	movs	r0, #5
				interruptArgs[5] = state;
    1ab2:	6163      	str	r3, [r4, #20]
				attachInterrupt(5, isr5, CHANGE);
    1ab4:	f004 f97c 	bl	5db0 <attachInterrupt>
		return 1;
    1ab8:	2001      	movs	r0, #1
	}
    1aba:	bd10      	pop	{r4, pc}
				attachInterrupt(4, isr4, CHANGE);
    1abc:	2204      	movs	r2, #4
				interruptArgs[4] = state;
    1abe:	4c17      	ldr	r4, [pc, #92]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(4, isr4, CHANGE);
    1ac0:	493a      	ldr	r1, [pc, #232]	; (1bac <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d4>)
    1ac2:	4610      	mov	r0, r2
				interruptArgs[4] = state;
    1ac4:	6123      	str	r3, [r4, #16]
				attachInterrupt(4, isr4, CHANGE);
    1ac6:	f004 f973 	bl	5db0 <attachInterrupt>
		return 1;
    1aca:	2001      	movs	r0, #1
	}
    1acc:	bd10      	pop	{r4, pc}
				interruptArgs[3] = state;
    1ace:	4c13      	ldr	r4, [pc, #76]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(3, isr3, CHANGE);
    1ad0:	2204      	movs	r2, #4
    1ad2:	4937      	ldr	r1, [pc, #220]	; (1bb0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d8>)
    1ad4:	2003      	movs	r0, #3
				interruptArgs[3] = state;
    1ad6:	60e3      	str	r3, [r4, #12]
				attachInterrupt(3, isr3, CHANGE);
    1ad8:	f004 f96a 	bl	5db0 <attachInterrupt>
		return 1;
    1adc:	2001      	movs	r0, #1
	}
    1ade:	bd10      	pop	{r4, pc}
				interruptArgs[2] = state;
    1ae0:	4c0e      	ldr	r4, [pc, #56]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(2, isr2, CHANGE);
    1ae2:	2204      	movs	r2, #4
    1ae4:	4933      	ldr	r1, [pc, #204]	; (1bb4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3dc>)
    1ae6:	2002      	movs	r0, #2
				interruptArgs[2] = state;
    1ae8:	60a3      	str	r3, [r4, #8]
				attachInterrupt(2, isr2, CHANGE);
    1aea:	f004 f961 	bl	5db0 <attachInterrupt>
		return 1;
    1aee:	2001      	movs	r0, #1
	}
    1af0:	bd10      	pop	{r4, pc}
    1af2:	4604      	mov	r4, r0
				interruptArgs[1] = state;
    1af4:	4809      	ldr	r0, [pc, #36]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(1, isr1, CHANGE);
    1af6:	2204      	movs	r2, #4
    1af8:	492f      	ldr	r1, [pc, #188]	; (1bb8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e0>)
				interruptArgs[1] = state;
    1afa:	6043      	str	r3, [r0, #4]
				attachInterrupt(1, isr1, CHANGE);
    1afc:	2001      	movs	r0, #1
    1afe:	f004 f957 	bl	5db0 <attachInterrupt>
		return 1;
    1b02:	4620      	mov	r0, r4
	}
    1b04:	bd10      	pop	{r4, pc}
				interruptArgs[0] = state;
    1b06:	4c05      	ldr	r4, [pc, #20]	; (1b1c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x344>)
				attachInterrupt(0, isr0, CHANGE);
    1b08:	2204      	movs	r2, #4
    1b0a:	492c      	ldr	r1, [pc, #176]	; (1bbc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e4>)
    1b0c:	2000      	movs	r0, #0
				interruptArgs[0] = state;
    1b0e:	6023      	str	r3, [r4, #0]
				attachInterrupt(0, isr0, CHANGE);
    1b10:	f004 f94e 	bl	5db0 <attachInterrupt>
		return 1;
    1b14:	2001      	movs	r0, #1
	}
    1b16:	bd10      	pop	{r4, pc}
		switch (pin) {
    1b18:	2000      	movs	r0, #0
	}
    1b1a:	bd10      	pop	{r4, pc}
    1b1c:	20002200 	.word	0x20002200
    1b20:	000016d9 	.word	0x000016d9
    1b24:	00001649 	.word	0x00001649
    1b28:	000015b9 	.word	0x000015b9
    1b2c:	00001529 	.word	0x00001529
    1b30:	00001499 	.word	0x00001499
    1b34:	00001409 	.word	0x00001409
    1b38:	00001379 	.word	0x00001379
    1b3c:	000012e9 	.word	0x000012e9
    1b40:	0000125d 	.word	0x0000125d
    1b44:	000011d1 	.word	0x000011d1
    1b48:	00001145 	.word	0x00001145
    1b4c:	000010b9 	.word	0x000010b9
    1b50:	0000102d 	.word	0x0000102d
    1b54:	00000fa1 	.word	0x00000fa1
    1b58:	00000f15 	.word	0x00000f15
    1b5c:	00000e89 	.word	0x00000e89
    1b60:	00000dfd 	.word	0x00000dfd
    1b64:	00000d71 	.word	0x00000d71
    1b68:	00000ce5 	.word	0x00000ce5
    1b6c:	00000c59 	.word	0x00000c59
    1b70:	00000bcd 	.word	0x00000bcd
    1b74:	00000b41 	.word	0x00000b41
    1b78:	00000ab5 	.word	0x00000ab5
    1b7c:	00000a29 	.word	0x00000a29
    1b80:	0000099d 	.word	0x0000099d
    1b84:	00000911 	.word	0x00000911
    1b88:	00000885 	.word	0x00000885
    1b8c:	000007f9 	.word	0x000007f9
    1b90:	0000076d 	.word	0x0000076d
    1b94:	000006e1 	.word	0x000006e1
    1b98:	00000655 	.word	0x00000655
    1b9c:	000005c9 	.word	0x000005c9
    1ba0:	0000053d 	.word	0x0000053d
    1ba4:	000004b1 	.word	0x000004b1
    1ba8:	00000425 	.word	0x00000425
    1bac:	00000399 	.word	0x00000399
    1bb0:	0000030d 	.word	0x0000030d
    1bb4:	00000281 	.word	0x00000281
    1bb8:	000001f5 	.word	0x000001f5
    1bbc:	00000169 	.word	0x00000169

00001bc0 <_GLOBAL__sub_I_display>:
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());    
    oledControl.updateBPM();  
  }
  // CHECKING FOR ROTARY ENCODER PRESSES
  encoderButton.loop();
}
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1bc2:	4838      	ldr	r0, [pc, #224]	; (1ca4 <_GLOBAL__sub_I_display+0xe4>)
}
    1bc4:	b085      	sub	sp, #20
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
    1bc6:	4938      	ldr	r1, [pc, #224]	; (1ca8 <_GLOBAL__sub_I_display+0xe8>)
    1bc8:	f04f 34ff 	mov.w	r4, #4294967295
    1bcc:	4b37      	ldr	r3, [pc, #220]	; (1cac <_GLOBAL__sub_I_display+0xec>)
    1bce:	2240      	movs	r2, #64	; 0x40
    1bd0:	9400      	str	r4, [sp, #0]
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    1bd2:	4c37      	ldr	r4, [pc, #220]	; (1cb0 <_GLOBAL__sub_I_display+0xf0>)
    1bd4:	e9cd 1001 	strd	r1, r0, [sp, #4]
    1bd8:	2180      	movs	r1, #128	; 0x80
    1bda:	4836      	ldr	r0, [pc, #216]	; (1cb4 <_GLOBAL__sub_I_display+0xf4>)
    1bdc:	f002 fbce 	bl	437c <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>
    1be0:	4a35      	ldr	r2, [pc, #212]	; (1cb8 <_GLOBAL__sub_I_display+0xf8>)
    1be2:	4936      	ldr	r1, [pc, #216]	; (1cbc <_GLOBAL__sub_I_display+0xfc>)
    1be4:	4833      	ldr	r0, [pc, #204]	; (1cb4 <_GLOBAL__sub_I_display+0xf4>)
    1be6:	f005 fce5 	bl	75b4 <__aeabi_atexit>
theBinaries bGang = theBinaries();
    1bea:	4835      	ldr	r0, [pc, #212]	; (1cc0 <_GLOBAL__sub_I_display+0x100>)
    1bec:	f7ff fdbc 	bl	1768 <theBinaries::theBinaries()>
		pinMode(pin1, INPUT_PULLUP);
    1bf0:	2102      	movs	r1, #2
    1bf2:	2015      	movs	r0, #21
    1bf4:	f004 f8a2 	bl	5d3c <pinMode>
		pinMode(pin2, INPUT_PULLUP);
    1bf8:	2102      	movs	r1, #2
    1bfa:	2016      	movs	r0, #22
    1bfc:	f004 f89e 	bl	5d3c <pinMode>
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    1c00:	4b30      	ldr	r3, [pc, #192]	; (1cc4 <_GLOBAL__sub_I_display+0x104>)
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1c02:	4931      	ldr	r1, [pc, #196]	; (1cc8 <_GLOBAL__sub_I_display+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1c04:	f44f 6efa 	mov.w	lr, #2000	; 0x7d0
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    1c08:	f8d3 516c 	ldr.w	r5, [r3, #364]	; 0x16c
    1c0c:	4a2f      	ldr	r2, [pc, #188]	; (1ccc <_GLOBAL__sub_I_display+0x10c>)
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    1c0e:	f8d3 c150 	ldr.w	ip, [r3, #336]	; 0x150
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    1c12:	e9d3 6757 	ldrd	r6, r7, [r3, #348]	; 0x15c
    1c16:	4b2e      	ldr	r3, [pc, #184]	; (1cd0 <_GLOBAL__sub_I_display+0x110>)
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    1c18:	60e5      	str	r5, [r4, #12]
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    1c1a:	f8c4 c000 	str.w	ip, [r4]
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    1c1e:	e9c4 7601 	strd	r7, r6, [r4, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    1c22:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1c24:	6812      	ldr	r2, [r2, #0]
    1c26:	fba3 3202 	umull	r3, r2, r3, r2
		encoder.position = 0;
    1c2a:	2300      	movs	r3, #0
    1c2c:	0c92      	lsrs	r2, r2, #18
    1c2e:	6163      	str	r3, [r4, #20]
    1c30:	fb0e f202 	mul.w	r2, lr, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1c34:	684b      	ldr	r3, [r1, #4]
    1c36:	1a1b      	subs	r3, r3, r0
    1c38:	429a      	cmp	r2, r3
    1c3a:	d8fb      	bhi.n	1c34 <_GLOBAL__sub_I_display+0x74>
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    1c3c:	f8dc 3000 	ldr.w	r3, [ip]
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    1c40:	2015      	movs	r0, #21
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    1c42:	683a      	ldr	r2, [r7, #0]
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    1c44:	421e      	tst	r6, r3
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    1c46:	491a      	ldr	r1, [pc, #104]	; (1cb0 <_GLOBAL__sub_I_display+0xf0>)
		uint8_t s = 0;
    1c48:	bf14      	ite	ne
    1c4a:	2301      	movne	r3, #1
    1c4c:	2300      	moveq	r3, #0
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    1c4e:	4215      	tst	r5, r2
    1c50:	bf18      	it	ne
    1c52:	f043 0302 	orrne.w	r3, r3, #2
		encoder.state = s;
    1c56:	7423      	strb	r3, [r4, #16]
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    1c58:	f7ff fdbe 	bl	17d8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    1c5c:	4603      	mov	r3, r0
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    1c5e:	4914      	ldr	r1, [pc, #80]	; (1cb0 <_GLOBAL__sub_I_display+0xf0>)
    1c60:	2016      	movs	r0, #22
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    1c62:	7623      	strb	r3, [r4, #24]
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    1c64:	f7ff fdb8 	bl	17d8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    1c68:	7e22      	ldrb	r2, [r4, #24]
    1c6a:	4603      	mov	r3, r0
Button2 encoderButton(sw);
    1c6c:	2004      	movs	r0, #4
    1c6e:	4413      	add	r3, r2
    1c70:	7623      	strb	r3, [r4, #24]
class ArduinoHardware : public Hardware {
    1c72:	4c18      	ldr	r4, [pc, #96]	; (1cd4 <_GLOBAL__sub_I_display+0x114>)
    1c74:	f004 f9c0 	bl	5ff8 <operator new(unsigned int)>
    1c78:	2301      	movs	r3, #1
    1c7a:	9000      	str	r0, [sp, #0]
    1c7c:	2202      	movs	r2, #2
    1c7e:	6004      	str	r4, [r0, #0]
    1c80:	2114      	movs	r1, #20
    1c82:	4815      	ldr	r0, [pc, #84]	; (1cd8 <_GLOBAL__sub_I_display+0x118>)
    1c84:	f002 ffd0 	bl	4c28 <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)>
IntervalTimer clock1;
    1c88:	4a0b      	ldr	r2, [pc, #44]	; (1cb8 <_GLOBAL__sub_I_display+0xf8>)
    1c8a:	4914      	ldr	r1, [pc, #80]	; (1cdc <_GLOBAL__sub_I_display+0x11c>)
    1c8c:	4814      	ldr	r0, [pc, #80]	; (1ce0 <_GLOBAL__sub_I_display+0x120>)
    1c8e:	f005 fc91 	bl	75b4 <__aeabi_atexit>
IntervalTimer clock2;
    1c92:	4a09      	ldr	r2, [pc, #36]	; (1cb8 <_GLOBAL__sub_I_display+0xf8>)
    1c94:	4911      	ldr	r1, [pc, #68]	; (1cdc <_GLOBAL__sub_I_display+0x11c>)
    1c96:	4813      	ldr	r0, [pc, #76]	; (1ce4 <_GLOBAL__sub_I_display+0x124>)
}
    1c98:	b005      	add	sp, #20
    1c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
IntervalTimer clock2;
    1c9e:	f005 bc89 	b.w	75b4 <__aeabi_atexit>
    1ca2:	bf00      	nop
    1ca4:	000186a0 	.word	0x000186a0
    1ca8:	00061a80 	.word	0x00061a80
    1cac:	20000ed8 	.word	0x20000ed8
    1cb0:	20002680 	.word	0x20002680
    1cb4:	20002614 	.word	0x20002614
    1cb8:	20001304 	.word	0x20001304
    1cbc:	000043d5 	.word	0x000043d5
    1cc0:	200025a8 	.word	0x200025a8
    1cc4:	200009c0 	.word	0x200009c0
    1cc8:	e0001000 	.word	0xe0001000
    1ccc:	20000e04 	.word	0x20000e04
    1cd0:	431bde83 	.word	0x431bde83
    1cd4:	200008ac 	.word	0x200008ac
    1cd8:	2000269c 	.word	0x2000269c
    1cdc:	00000141 	.word	0x00000141
    1ce0:	2000171c 	.word	0x2000171c
    1ce4:	20001724 	.word	0x20001724

00001ce8 <OLEDControl::updateMode() [clone .isra.0]>:
  void updateMode() {
    1ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (divideState) {
    1cea:	4e60      	ldr	r6, [pc, #384]	; (1e6c <OLEDControl::updateMode() [clone .isra.0]+0x184>)
  void updateMode() {
    1cec:	b083      	sub	sp, #12
      display.fillRect(110, 18, 10, 20, BLACK);
    1cee:	4c60      	ldr	r4, [pc, #384]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
    if (divideState) {
    1cf0:	7835      	ldrb	r5, [r6, #0]
    1cf2:	2d00      	cmp	r5, #0
    1cf4:	d04b      	beq.n	1d8e <OLEDControl::updateMode() [clone .isra.0]+0xa6>
      display.fillRect(110, 18, 10, 20, BLACK);
    1cf6:	2500      	movs	r5, #0
    1cf8:	2714      	movs	r7, #20
    1cfa:	2212      	movs	r2, #18
    1cfc:	230a      	movs	r3, #10
    1cfe:	216e      	movs	r1, #110	; 0x6e
    1d00:	4620      	mov	r0, r4
    1d02:	e9cd 7500 	strd	r7, r5, [sp]
    1d06:	f001 fc6f 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1d0a:	4b5a      	ldr	r3, [pc, #360]	; (1e74 <OLEDControl::updateMode() [clone .isra.0]+0x18c>)
      display.setTextSize(2);
    1d0c:	2102      	movs	r1, #2
    1d0e:	4620      	mov	r0, r4
    1d10:	6123      	str	r3, [r4, #16]
    1d12:	f002 f8c1 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
    1d16:	2201      	movs	r2, #1
    1d18:	4957      	ldr	r1, [pc, #348]	; (1e78 <OLEDControl::updateMode() [clone .isra.0]+0x190>)
    1d1a:	4620      	mov	r0, r4
    1d1c:	f003 fdc4 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
      display.fillRect(0, 50, 100, 20, BLACK);
    1d20:	2364      	movs	r3, #100	; 0x64
    1d22:	2232      	movs	r2, #50	; 0x32
    1d24:	4629      	mov	r1, r5
    1d26:	4620      	mov	r0, r4
    1d28:	e9cd 7500 	strd	r7, r5, [sp]
    1d2c:	f001 fc5c 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    if (divideState) {
    1d30:	7833      	ldrb	r3, [r6, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	f040 8083 	bne.w	1e3e <OLEDControl::updateMode() [clone .isra.0]+0x156>
    1d38:	204b      	movs	r0, #75	; 0x4b
    cursor_y = y;
    1d3a:	2332      	movs	r3, #50	; 0x32
    int total = 0;
    1d3c:	2100      	movs	r1, #0
    1d3e:	4a4f      	ldr	r2, [pc, #316]	; (1e7c <OLEDControl::updateMode() [clone .isra.0]+0x194>)
        total |= (1 << i);
    1d40:	2601      	movs	r6, #1
    1d42:	8263      	strh	r3, [r4, #18]
    for (int i=0;i<numOfBs;i++) {
    1d44:	460b      	mov	r3, r1
    cursor_x = x;
    1d46:	8220      	strh	r0, [r4, #16]
      if (btState[i]) {
    1d48:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        total |= (1 << i);
    1d4c:	fa06 f503 	lsl.w	r5, r6, r3
    for (int i=0;i<numOfBs;i++) {
    1d50:	3301      	adds	r3, #1
      if (btState[i]) {
    1d52:	b100      	cbz	r0, 1d56 <OLEDControl::updateMode() [clone .isra.0]+0x6e>
        total |= (1 << i);
    1d54:	4329      	orrs	r1, r5
    for (int i=0;i<numOfBs;i++) {
    1d56:	2b04      	cmp	r3, #4
    1d58:	d1f6      	bne.n	1d48 <OLEDControl::updateMode() [clone .isra.0]+0x60>
      total = 16;
    1d5a:	2900      	cmp	r1, #0
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
    1d5c:	4844      	ldr	r0, [pc, #272]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
    1d5e:	bf08      	it	eq
    1d60:	2110      	moveq	r1, #16
    1d62:	f003 fdc9 	bl	58f8 <Print::print(long)>
    1d66:	4b46      	ldr	r3, [pc, #280]	; (1e80 <OLEDControl::updateMode() [clone .isra.0]+0x198>)
							  return write((const uint8_t *)str, strlen(str)); }
    1d68:	2201      	movs	r2, #1
    1d6a:	4946      	ldr	r1, [pc, #280]	; (1e84 <OLEDControl::updateMode() [clone .isra.0]+0x19c>)
    1d6c:	6123      	str	r3, [r4, #16]
    1d6e:	4840      	ldr	r0, [pc, #256]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
    1d70:	f003 fd9a 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
    1d74:	4b44      	ldr	r3, [pc, #272]	; (1e88 <OLEDControl::updateMode() [clone .isra.0]+0x1a0>)
    1d76:	2202      	movs	r2, #2
    1d78:	4944      	ldr	r1, [pc, #272]	; (1e8c <OLEDControl::updateMode() [clone .isra.0]+0x1a4>)
    1d7a:	6123      	str	r3, [r4, #16]
    1d7c:	483c      	ldr	r0, [pc, #240]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
    1d7e:	f003 fd93 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
    display.display();
    1d82:	483b      	ldr	r0, [pc, #236]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
  }
    1d84:	b003      	add	sp, #12
    1d86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display();
    1d8a:	f002 be21 	b.w	49d0 <Adafruit_SSD1306::display()>
      display.fillRect(110, 18, 10, 20, BLACK);
    1d8e:	2714      	movs	r7, #20
    1d90:	2212      	movs	r2, #18
    1d92:	230a      	movs	r3, #10
    1d94:	216e      	movs	r1, #110	; 0x6e
    1d96:	4620      	mov	r0, r4
    1d98:	e9cd 7500 	strd	r7, r5, [sp]
    1d9c:	f001 fc24 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    1da0:	4b34      	ldr	r3, [pc, #208]	; (1e74 <OLEDControl::updateMode() [clone .isra.0]+0x18c>)
      display.setTextSize(2);
    1da2:	2102      	movs	r1, #2
    1da4:	4620      	mov	r0, r4
    1da6:	6123      	str	r3, [r4, #16]
    1da8:	f002 f876 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
    1dac:	2201      	movs	r2, #1
    1dae:	4938      	ldr	r1, [pc, #224]	; (1e90 <OLEDControl::updateMode() [clone .isra.0]+0x1a8>)
    1db0:	4620      	mov	r0, r4
    1db2:	f003 fd79 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
      display.fillRect(0, 50, 100, 20, BLACK);
    1db6:	2364      	movs	r3, #100	; 0x64
    1db8:	2232      	movs	r2, #50	; 0x32
    1dba:	4629      	mov	r1, r5
    1dbc:	4620      	mov	r0, r4
    1dbe:	e9cd 7500 	strd	r7, r5, [sp]
    1dc2:	f001 fc11 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    1dc6:	4b33      	ldr	r3, [pc, #204]	; (1e94 <OLEDControl::updateMode() [clone .isra.0]+0x1ac>)
    1dc8:	2202      	movs	r2, #2
    1dca:	4930      	ldr	r1, [pc, #192]	; (1e8c <OLEDControl::updateMode() [clone .isra.0]+0x1a4>)
    1dcc:	6123      	str	r3, [r4, #16]
    1dce:	4620      	mov	r0, r4
    1dd0:	f003 fd6a 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
    1dd4:	4b2a      	ldr	r3, [pc, #168]	; (1e80 <OLEDControl::updateMode() [clone .isra.0]+0x198>)
    1dd6:	2201      	movs	r2, #1
    1dd8:	492a      	ldr	r1, [pc, #168]	; (1e84 <OLEDControl::updateMode() [clone .isra.0]+0x19c>)
    1dda:	6123      	str	r3, [r4, #16]
    1ddc:	4620      	mov	r0, r4
    1dde:	f003 fd63 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
    1de2:	4a29      	ldr	r2, [pc, #164]	; (1e88 <OLEDControl::updateMode() [clone .isra.0]+0x1a0>)
    if (divideState) {
    1de4:	7833      	ldrb	r3, [r6, #0]
    1de6:	6122      	str	r2, [r4, #16]
    1de8:	4a24      	ldr	r2, [pc, #144]	; (1e7c <OLEDControl::updateMode() [clone .isra.0]+0x194>)
    1dea:	b183      	cbz	r3, 1e0e <OLEDControl::updateMode() [clone .isra.0]+0x126>
    1dec:	4611      	mov	r1, r2
    for (int i=0;i<numOfBs;i++) {
    1dee:	462b      	mov	r3, r5
        total |= (1 << i);
    1df0:	2701      	movs	r7, #1
      if (btState[i]) {
    1df2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        total |= (1 << i);
    1df6:	fa07 f603 	lsl.w	r6, r7, r3
    for (int i=0;i<numOfBs;i++) {
    1dfa:	3301      	adds	r3, #1
      if (btState[i]) {
    1dfc:	b100      	cbz	r0, 1e00 <OLEDControl::updateMode() [clone .isra.0]+0x118>
        total |= (1 << i);
    1dfe:	4335      	orrs	r5, r6
    for (int i=0;i<numOfBs;i++) {
    1e00:	2b04      	cmp	r3, #4
    1e02:	d1f6      	bne.n	1df2 <OLEDControl::updateMode() [clone .isra.0]+0x10a>
      if (bGang.tally() < 10) {
    1e04:	2d09      	cmp	r5, #9
    1e06:	dc2b      	bgt.n	1e60 <OLEDControl::updateMode() [clone .isra.0]+0x178>
    1e08:	b355      	cbz	r5, 1e60 <OLEDControl::updateMode() [clone .isra.0]+0x178>
    1e0a:	232b      	movs	r3, #43	; 0x2b
    1e0c:	8223      	strh	r3, [r4, #16]
    int total = 0;
    1e0e:	2100      	movs	r1, #0
        total |= (1 << i);
    1e10:	2501      	movs	r5, #1
    for (int i=0;i<numOfBs;i++) {
    1e12:	460b      	mov	r3, r1
      if (btState[i]) {
    1e14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        total |= (1 << i);
    1e18:	fa05 f403 	lsl.w	r4, r5, r3
    for (int i=0;i<numOfBs;i++) {
    1e1c:	3301      	adds	r3, #1
      if (btState[i]) {
    1e1e:	b100      	cbz	r0, 1e22 <OLEDControl::updateMode() [clone .isra.0]+0x13a>
        total |= (1 << i);
    1e20:	4321      	orrs	r1, r4
    for (int i=0;i<numOfBs;i++) {
    1e22:	2b04      	cmp	r3, #4
    1e24:	d1f6      	bne.n	1e14 <OLEDControl::updateMode() [clone .isra.0]+0x12c>
      total = 16;
    1e26:	2900      	cmp	r1, #0
	size_t print(int n)				{ return print((long)n); }
    1e28:	4811      	ldr	r0, [pc, #68]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
    1e2a:	bf08      	it	eq
    1e2c:	2110      	moveq	r1, #16
    1e2e:	f003 fd63 	bl	58f8 <Print::print(long)>
    display.display();
    1e32:	480f      	ldr	r0, [pc, #60]	; (1e70 <OLEDControl::updateMode() [clone .isra.0]+0x188>)
  }
    1e34:	b003      	add	sp, #12
    1e36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display();
    1e3a:	f002 bdc9 	b.w	49d0 <Adafruit_SSD1306::display()>
    1e3e:	4a0f      	ldr	r2, [pc, #60]	; (1e7c <OLEDControl::updateMode() [clone .isra.0]+0x194>)
        total |= (1 << i);
    1e40:	2601      	movs	r6, #1
    for (int i=0;i<numOfBs;i++) {
    1e42:	462b      	mov	r3, r5
      if (btState[i]) {
    1e44:	f812 1f01 	ldrb.w	r1, [r2, #1]!
        total |= (1 << i);
    1e48:	fa06 f003 	lsl.w	r0, r6, r3
    for (int i=0;i<numOfBs;i++) {
    1e4c:	3301      	adds	r3, #1
      if (btState[i]) {
    1e4e:	b101      	cbz	r1, 1e52 <OLEDControl::updateMode() [clone .isra.0]+0x16a>
        total |= (1 << i);
    1e50:	4305      	orrs	r5, r0
    for (int i=0;i<numOfBs;i++) {
    1e52:	2b04      	cmp	r3, #4
    1e54:	d1f6      	bne.n	1e44 <OLEDControl::updateMode() [clone .isra.0]+0x15c>
      if (bGang.tally() < 10) {
    1e56:	b135      	cbz	r5, 1e66 <OLEDControl::updateMode() [clone .isra.0]+0x17e>
    1e58:	2d09      	cmp	r5, #9
    1e5a:	dc04      	bgt.n	1e66 <OLEDControl::updateMode() [clone .isra.0]+0x17e>
    1e5c:	202b      	movs	r0, #43	; 0x2b
    1e5e:	e76c      	b.n	1d3a <OLEDControl::updateMode() [clone .isra.0]+0x52>
    1e60:	231f      	movs	r3, #31
    1e62:	8223      	strh	r3, [r4, #16]
  }
    1e64:	e7d3      	b.n	1e0e <OLEDControl::updateMode() [clone .isra.0]+0x126>
    1e66:	201f      	movs	r0, #31
    1e68:	e767      	b.n	1d3a <OLEDControl::updateMode() [clone .isra.0]+0x52>
    1e6a:	bf00      	nop
    1e6c:	200019a6 	.word	0x200019a6
    1e70:	20002614 	.word	0x20002614
    1e74:	0012006e 	.word	0x0012006e
    1e78:	2000082c 	.word	0x2000082c
    1e7c:	200025b7 	.word	0x200025b7
    1e80:	0032003b 	.word	0x0032003b
    1e84:	20000830 	.word	0x20000830
    1e88:	0032004b 	.word	0x0032004b
    1e8c:	20000834 	.word	0x20000834
    1e90:	20000838 	.word	0x20000838
    1e94:	0032001f 	.word	0x0032001f

00001e98 <displayImage()>:
void displayImage() {
    1e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  display.clearDisplay(); // Clear the buffer
    1e9c:	4c2b      	ldr	r4, [pc, #172]	; (1f4c <displayImage()+0xb4>)
void displayImage() {
    1e9e:	b084      	sub	sp, #16
  display.drawBitmap(110, 53, Arrow, 17, 10, WHITE);
    1ea0:	2501      	movs	r5, #1
    1ea2:	260a      	movs	r6, #10
  display.clearDisplay(); // Clear the buffer
    1ea4:	4620      	mov	r0, r4
    cursor_y = y;
    1ea6:	2712      	movs	r7, #18
    1ea8:	f002 fd82 	bl	49b0 <Adafruit_SSD1306::clearDisplay()>
  display.drawBitmap(110, 53, Arrow, 17, 10, WHITE);
    1eac:	2211      	movs	r2, #17
    1eae:	4b28      	ldr	r3, [pc, #160]	; (1f50 <displayImage()+0xb8>)
    1eb0:	216e      	movs	r1, #110	; 0x6e
    1eb2:	4620      	mov	r0, r4
    1eb4:	9200      	str	r2, [sp, #0]
    1eb6:	2235      	movs	r2, #53	; 0x35
    1eb8:	e9cd 6501 	strd	r6, r5, [sp, #4]
    1ebc:	f001 fcec 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    1ec0:	2210      	movs	r2, #16
    1ec2:	4b24      	ldr	r3, [pc, #144]	; (1f54 <displayImage()+0xbc>)
    1ec4:	2106      	movs	r1, #6
    1ec6:	4620      	mov	r0, r4
    1ec8:	9600      	str	r6, [sp, #0]
  display.print(ctr.bpm);
    1eca:	4e23      	ldr	r6, [pc, #140]	; (1f58 <displayImage()+0xc0>)
  display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    1ecc:	e9cd 2501 	strd	r2, r5, [sp, #4]
    1ed0:	2212      	movs	r2, #18
    1ed2:	f001 fce1 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  display.setTextSize(1);  // Normal 1:1 pixel scale
    1ed6:	4629      	mov	r1, r5
    1ed8:	4620      	mov	r0, r4
    1eda:	4d20      	ldr	r5, [pc, #128]	; (1f5c <displayImage()+0xc4>)
    1edc:	f001 ffdc 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1ee0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    cursor_x = x;
    1ee4:	2100      	movs	r1, #0
							  return write((const uint8_t *)str, strlen(str)); }
    1ee6:	2205      	movs	r2, #5
    1ee8:	4620      	mov	r0, r4
    1eea:	f1a5 0804 	sub.w	r8, r5, #4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1eee:	e9c4 1304 	strd	r1, r3, [r4, #16]
    1ef2:	491b      	ldr	r1, [pc, #108]	; (1f60 <displayImage()+0xc8>)
    1ef4:	f003 fcd8 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    1ef8:	6831      	ldr	r1, [r6, #0]
    1efa:	4620      	mov	r0, r4
    1efc:	f003 fcfc 	bl	58f8 <Print::print(long)>
    cursor_x = x;
    1f00:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    1f02:	2205      	movs	r2, #5
    1f04:	4916      	ldr	r1, [pc, #88]	; (1f60 <displayImage()+0xc8>)
    1f06:	4620      	mov	r0, r4
    1f08:	6123      	str	r3, [r4, #16]
    1f0a:	f003 fccd 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    1f0e:	6871      	ldr	r1, [r6, #4]
    1f10:	4620      	mov	r0, r4
    1f12:	4e14      	ldr	r6, [pc, #80]	; (1f64 <displayImage()+0xcc>)
    1f14:	f003 fcf0 	bl	58f8 <Print::print(long)>
  display.setTextSize(2);
    1f18:	2102      	movs	r1, #2
    1f1a:	4620      	mov	r0, r4
    1f1c:	f001 ffbc 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
    1f20:	235a      	movs	r3, #90	; 0x5a
    1f22:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    1f26:	4620      	mov	r0, r4
    display.setCursor(xButtons[i], 18);
    1f28:	8223      	strh	r3, [r4, #16]
    cursor_y = y;
    1f2a:	8267      	strh	r7, [r4, #18]
    1f2c:	f003 fce4 	bl	58f8 <Print::print(long)>
  for (int i = 0; i < 4; i++) {
    1f30:	4545      	cmp	r5, r8
    1f32:	d002      	beq.n	1f3a <displayImage()+0xa2>
    display.setCursor(xButtons[i], 18);
    1f34:	f856 3f04 	ldr.w	r3, [r6, #4]!
    1f38:	e7f3      	b.n	1f22 <displayImage()+0x8a>
  oledControl.updateMode();
    1f3a:	f7ff fed5 	bl	1ce8 <OLEDControl::updateMode() [clone .isra.0]>
  display.display(); // Refresh the display to show the image
    1f3e:	4803      	ldr	r0, [pc, #12]	; (1f4c <displayImage()+0xb4>)
}
    1f40:	b004      	add	sp, #16
    1f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  display.display(); // Refresh the display to show the image
    1f46:	f002 bd43 	b.w	49d0 <Adafruit_SSD1306::display()>
    1f4a:	bf00      	nop
    1f4c:	20002614 	.word	0x20002614
    1f50:	60001c7c 	.word	0x60001c7c
    1f54:	60001c9c 	.word	0x60001c9c
    1f58:	2000172c 	.word	0x2000172c
    1f5c:	200025bc 	.word	0x200025bc
    1f60:	200002b4 	.word	0x200002b4
    1f64:	2000081c 	.word	0x2000081c

00001f68 <setup>:
void setup() {
    1f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(clk, INPUT); // primary input from rotary encoder, standard pin setting NOT INTERRUPTS that was a lie that made me waste a whole day
    1f6c:	2100      	movs	r1, #0
void setup() {
    1f6e:	b08e      	sub	sp, #56	; 0x38
  pinMode(clk, INPUT); // primary input from rotary encoder, standard pin setting NOT INTERRUPTS that was a lie that made me waste a whole day
    1f70:	2016      	movs	r0, #22
  encoder.write(ctr.bpm);
    1f72:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2238 <setup+0x2d0>
  pinMode(clk, INPUT); // primary input from rotary encoder, standard pin setting NOT INTERRUPTS that was a lie that made me waste a whole day
    1f76:	f003 fee1 	bl	5d3c <pinMode>
  pinMode(dt, INPUT); // secondary input from rotary encoder, standard pin setting
    1f7a:	2100      	movs	r1, #0
    1f7c:	2015      	movs	r0, #21
    1f7e:	f003 fedd 	bl	5d3c <pinMode>
  pinMode(sw, INPUT_PULLUP); // button input from rotary encoder
    1f82:	2102      	movs	r1, #2
    1f84:	2014      	movs	r0, #20
    1f86:	f003 fed9 	bl	5d3c <pinMode>
  encoderButton.setLongClickTime(1500);
    1f8a:	f240 51dc 	movw	r1, #1500	; 0x5dc
    1f8e:	4894      	ldr	r0, [pc, #592]	; (21e0 <setup+0x278>)
    1f90:	f002 fe92 	bl	4cb8 <Button2::setLongClickTime(unsigned int)>
  encoderButton.setClickHandler([](Button2 &b) {
    1f94:	4993      	ldr	r1, [pc, #588]	; (21e4 <setup+0x27c>)
    1f96:	4892      	ldr	r0, [pc, #584]	; (21e0 <setup+0x278>)
    1f98:	f002 fe90 	bl	4cbc <Button2::setClickHandler(void (*)(Button2&))>
  encoderButton.setDoubleClickHandler([](Button2 &b) {
    1f9c:	4992      	ldr	r1, [pc, #584]	; (21e8 <setup+0x280>)
    1f9e:	4890      	ldr	r0, [pc, #576]	; (21e0 <setup+0x278>)
    1fa0:	f002 fe8e 	bl	4cc0 <Button2::setDoubleClickHandler(void (*)(Button2&))>
  encoder.write(ctr.bpm);
    1fa4:	f8d9 2000 	ldr.w	r2, [r9]
		noInterrupts();
    1fa8:	b672      	cpsid	i
		encoder.position = p;
    1faa:	4b90      	ldr	r3, [pc, #576]	; (21ec <setup+0x284>)
    1fac:	615a      	str	r2, [r3, #20]
		interrupts();
    1fae:	b662      	cpsie	i
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    1fb0:	4d8f      	ldr	r5, [pc, #572]	; (21f0 <setup+0x288>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1fb2:	f240 28ee 	movw	r8, #750	; 0x2ee
    1fb6:	4c8f      	ldr	r4, [pc, #572]	; (21f4 <setup+0x28c>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1fb8:	4f8f      	ldr	r7, [pc, #572]	; (21f8 <setup+0x290>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1fba:	f8df a280 	ldr.w	sl, [pc, #640]	; 223c <setup+0x2d4>
		uint32_t millis_begin = systick_millis_count;
    1fbe:	682e      	ldr	r6, [r5, #0]
		yield();
    1fc0:	f005 fa7a 	bl	74b8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1fc4:	7823      	ldrb	r3, [r4, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	f000 80d1 	beq.w	216e <setup+0x206>
    1fcc:	783b      	ldrb	r3, [r7, #0]
    1fce:	07db      	lsls	r3, r3, #31
    1fd0:	f140 80cd 	bpl.w	216e <setup+0x206>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1fd4:	682b      	ldr	r3, [r5, #0]
    1fd6:	f8da 2000 	ldr.w	r2, [sl]
    1fda:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1fdc:	2b0e      	cmp	r3, #14
    1fde:	f240 80c6 	bls.w	216e <setup+0x206>
  Serial1.begin(31250);
    1fe2:	2200      	movs	r2, #0
    1fe4:	f647 2112 	movw	r1, #31250	; 0x7a12
    1fe8:	4884      	ldr	r0, [pc, #528]	; (21fc <setup+0x294>)
    1fea:	f003 f85f 	bl	50ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  Serial2.begin(31250);
    1fee:	2200      	movs	r2, #0
    1ff0:	f647 2112 	movw	r1, #31250	; 0x7a12
    1ff4:	4882      	ldr	r0, [pc, #520]	; (2200 <setup+0x298>)
    1ff6:	f003 f859 	bl	50ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  clock1.begin(clock1Handler, tickSwitcher(ctr.bpm, DEFAULT));
    1ffa:	edd9 7a00 	vldr	s15, [r9]
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    1ffe:	4b81      	ldr	r3, [pc, #516]	; (2204 <setup+0x29c>)
    2000:	eeb8 6ae7 	vcvt.f32.s32	s12, s15

	template <typename period_t>
	uint32_t cyclesFromPeriod(period_t period) {
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
    2004:	4a80      	ldr	r2, [pc, #512]	; (2208 <setup+0x2a0>)
    2006:	9304      	str	r3, [sp, #16]
        vtable_ptr_ = std::addressof(vt);
    2008:	4e80      	ldr	r6, [pc, #512]	; (220c <setup+0x2a4>)
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    200a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    200e:	9602      	str	r6, [sp, #8]
    2010:	ed9f 5b71 	vldr	d5, [pc, #452]	; 21d8 <setup+0x270>
    2014:	ee85 7b06 	vdiv.f64	d7, d5, d6
    2018:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    201c:	ee17 3a90 	vmov	r3, s15
    2020:	4293      	cmp	r3, r2
    2022:	d806      	bhi.n	2032 <setup+0xca>
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
    2024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2028:	00dc      	lsls	r4, r3, #3
    202a:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    202c:	2c10      	cmp	r4, #16
    202e:	f200 808b 	bhi.w	2148 <setup+0x1e0>
    2032:	4b77      	ldr	r3, [pc, #476]	; (2210 <setup+0x2a8>)
    2034:	f10d 0810 	add.w	r8, sp, #16
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2038:	4640      	mov	r0, r8
    203a:	4d76      	ldr	r5, [pc, #472]	; (2214 <setup+0x2ac>)
    203c:	4798      	blx	r3
  clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    203e:	edd9 7a00 	vldr	s15, [r9]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    2042:	4b75      	ldr	r3, [pc, #468]	; (2218 <setup+0x2b0>)
    int total = 0;
    2044:	2200      	movs	r2, #0
  clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    2046:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    204a:	4629      	mov	r1, r5
    204c:	9304      	str	r3, [sp, #16]
        total |= (1 << i);
    204e:	2701      	movs	r7, #1
    for (int i=0;i<numOfBs;i++) {
    2050:	4613      	mov	r3, r2
        vtable_ptr_ = std::addressof(vt);
    2052:	9602      	str	r6, [sp, #8]
      if (btState[i]) {
    2054:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        total |= (1 << i);
    2058:	fa07 f403 	lsl.w	r4, r7, r3
    for (int i=0;i<numOfBs;i++) {
    205c:	3301      	adds	r3, #1
      if (btState[i]) {
    205e:	b100      	cbz	r0, 2062 <setup+0xfa>
        total |= (1 << i);
    2060:	4322      	orrs	r2, r4
    for (int i=0;i<numOfBs;i++) {
    2062:	2b04      	cmp	r3, #4
    2064:	d1f6      	bne.n	2054 <setup+0xec>
    if (total == 0){
    2066:	2a00      	cmp	r2, #0
    2068:	f000 80b0 	beq.w	21cc <setup+0x264>
  clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    206c:	ee07 2a90 	vmov	s15, r2
    2070:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  if (divideState) {
    2074:	4f69      	ldr	r7, [pc, #420]	; (221c <setup+0x2b4>)
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2076:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  if (divideState) {
    207a:	783b      	ldrb	r3, [r7, #0]
    207c:	2b00      	cmp	r3, #0
    207e:	f000 8084 	beq.w	218a <setup+0x222>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2082:	eef3 4a00 	vmov.f32	s9, #48	; 0x41800000  16.0
    2086:	ed9f 3b54 	vldr	d3, [pc, #336]	; 21d8 <setup+0x270>
    208a:	ee84 6aa6 	vdiv.f32	s12, s9, s13
    208e:	ee83 7b05 	vdiv.f64	d7, d3, d5
    2092:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2096:	ee27 7b06 	vmul.f64	d7, d7, d6
    209a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    209e:	ee17 3a90 	vmov	r3, s15
		if (period < 0 || period > MAX_PERIOD)
    20a2:	4a59      	ldr	r2, [pc, #356]	; (2208 <setup+0x2a0>)
    20a4:	4293      	cmp	r3, r2
    20a6:	d805      	bhi.n	20b4 <setup+0x14c>
			return (24000000 / 1000000) * period - 1;
    20a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20ac:	00dc      	lsls	r4, r3, #3
    20ae:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    20b0:	2c10      	cmp	r4, #16
    20b2:	d838      	bhi.n	2126 <setup+0x1be>
    20b4:	4b56      	ldr	r3, [pc, #344]	; (2210 <setup+0x2a8>)
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    20b6:	4640      	mov	r0, r8
        total |= (1 << i);
    20b8:	2401      	movs	r4, #1
    20ba:	4798      	blx	r3
  ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());
    20bc:	edd9 7a00 	vldr	s15, [r9]
    int total = 0;
    20c0:	2200      	movs	r2, #0
  ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());
    20c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    for (int i=0;i<numOfBs;i++) {
    20c6:	4613      	mov	r3, r2
      if (btState[i]) {
    20c8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        total |= (1 << i);
    20cc:	fa04 f003 	lsl.w	r0, r4, r3
    for (int i=0;i<numOfBs;i++) {
    20d0:	3301      	adds	r3, #1
      if (btState[i]) {
    20d2:	b101      	cbz	r1, 20d6 <setup+0x16e>
        total |= (1 << i);
    20d4:	4302      	orrs	r2, r0
    for (int i=0;i<numOfBs;i++) {
    20d6:	2b04      	cmp	r3, #4
    20d8:	d1f6      	bne.n	20c8 <setup+0x160>
    if (total == 0){
    20da:	2a00      	cmp	r2, #0
    20dc:	d079      	beq.n	21d2 <setup+0x26a>
  ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());
    20de:	ee07 2a90 	vmov	s15, r2
    20e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    20e6:	783b      	ldrb	r3, [r7, #0]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d064      	beq.n	21b6 <setup+0x24e>
    return (bpm * inputStep / 16.0f);
    20ec:	ee67 7a27 	vmul.f32	s15, s14, s15
    20f0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2220 <setup+0x2b8>
    20f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    20f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    20fc:	ee17 0a90 	vmov	r0, s15
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    2100:	2301      	movs	r3, #1
  ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());
    2102:	f8c9 0004 	str.w	r0, [r9, #4]
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    2106:	223c      	movs	r2, #60	; 0x3c
    2108:	2102      	movs	r1, #2
    210a:	4846      	ldr	r0, [pc, #280]	; (2224 <setup+0x2bc>)
    210c:	9300      	str	r3, [sp, #0]
    210e:	f002 fa81 	bl	4614 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>
    2112:	2800      	cmp	r0, #0
    2114:	d14a      	bne.n	21ac <setup+0x244>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2116:	2119      	movs	r1, #25
    2118:	4843      	ldr	r0, [pc, #268]	; (2228 <setup+0x2c0>)
    211a:	f005 f94f 	bl	73bc <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    211e:	4843      	ldr	r0, [pc, #268]	; (222c <setup+0x2c4>)
    2120:	f003 fbf6 	bl	5910 <Print::println()>
        for (;;);
    2124:	e7fe      	b.n	2124 <setup+0x1bc>
        vtable_ptr_->copy_ptr(
    2126:	4641      	mov	r1, r8
    2128:	a80a      	add	r0, sp, #40	; 0x28
        vtable_ptr_{other.vtable_ptr_}
    212a:	9608      	str	r6, [sp, #32]
        vtable_ptr_->copy_ptr(
    212c:	f7fd fffe 	bl	12c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    2130:	4622      	mov	r2, r4
    2132:	a908      	add	r1, sp, #32
    2134:	483e      	ldr	r0, [pc, #248]	; (2230 <setup+0x2c8>)
    2136:	f003 faa3 	bl	5680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    213a:	9b08      	ldr	r3, [sp, #32]
    213c:	a80a      	add	r0, sp, #40	; 0x28
    213e:	68db      	ldr	r3, [r3, #12]
    2140:	4798      	blx	r3
    2142:	9b02      	ldr	r3, [sp, #8]
    2144:	68db      	ldr	r3, [r3, #12]
    }
    2146:	e7b6      	b.n	20b6 <setup+0x14e>
        vtable_ptr_->copy_ptr(
    2148:	f10d 0810 	add.w	r8, sp, #16
    214c:	a80a      	add	r0, sp, #40	; 0x28
        vtable_ptr_{other.vtable_ptr_}
    214e:	9608      	str	r6, [sp, #32]
        vtable_ptr_->copy_ptr(
    2150:	4641      	mov	r1, r8
    2152:	f7fd ffeb 	bl	12c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    2156:	4622      	mov	r2, r4
    2158:	a908      	add	r1, sp, #32
    215a:	4836      	ldr	r0, [pc, #216]	; (2234 <setup+0x2cc>)
    215c:	f003 fa90 	bl	5680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2160:	9b08      	ldr	r3, [sp, #32]
    2162:	a80a      	add	r0, sp, #40	; 0x28
    2164:	68db      	ldr	r3, [r3, #12]
    2166:	4798      	blx	r3
    2168:	9b02      	ldr	r3, [sp, #8]
    216a:	68db      	ldr	r3, [r3, #12]
    }
    216c:	e764      	b.n	2038 <setup+0xd0>
			uint32_t elapsed = systick_millis_count - millis_begin;
    216e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    2170:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    2172:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2174:	b132      	cbz	r2, 2184 <setup+0x21c>
				if (elapsed > 2000) break;
    2176:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    217a:	f63f af32 	bhi.w	1fe2 <setup+0x7a>
			yield();
    217e:	f005 f99b 	bl	74b8 <yield>
    2182:	e71d      	b.n	1fc0 <setup+0x58>
				if (elapsed > 750) break;
    2184:	4543      	cmp	r3, r8
    2186:	d9fa      	bls.n	217e <setup+0x216>
    2188:	e72b      	b.n	1fe2 <setup+0x7a>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    218a:	ed9f 4b13 	vldr	d4, [pc, #76]	; 21d8 <setup+0x270>
    218e:	ed9f 6a24 	vldr	s12, [pc, #144]	; 2220 <setup+0x2b8>
    2192:	ee84 7b05 	vdiv.f64	d7, d4, d5
    2196:	ee66 6a86 	vmul.f32	s13, s13, s12
    219a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
    219e:	ee27 7b06 	vmul.f64	d7, d7, d6
    21a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    21a6:	ee17 3a90 	vmov	r3, s15
    return bpmTickInterval(bpm, 16.0, inputStep);
    21aa:	e77a      	b.n	20a2 <setup+0x13a>
}
    21ac:	b00e      	add	sp, #56	; 0x38
    21ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  displayImage();
    21b2:	f7ff be71 	b.w	1e98 <displayImage()>
    return (bpm * 16.0f / inputStep);
    21b6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    21ba:	ee27 7a26 	vmul.f32	s14, s14, s13
    21be:	eec7 6a27 	vdiv.f32	s13, s14, s15
    21c2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
    21c6:	ee17 0a90 	vmov	r0, s15
    21ca:	e799      	b.n	2100 <setup+0x198>
    21cc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    21d0:	e750      	b.n	2074 <setup+0x10c>
    21d2:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    21d6:	e786      	b.n	20e6 <setup+0x17e>
    21d8:	00000000 	.word	0x00000000
    21dc:	414312d0 	.word	0x414312d0
    21e0:	2000269c 	.word	0x2000269c
    21e4:	00002ba5 	.word	0x00002ba5
    21e8:	00002241 	.word	0x00002241
    21ec:	20002680 	.word	0x20002680
    21f0:	2000277c 	.word	0x2000277c
    21f4:	200027aa 	.word	0x200027aa
    21f8:	200027a9 	.word	0x200027a9
    21fc:	20000e18 	.word	0x20000e18
    2200:	20000e78 	.word	0x20000e78
    2204:	00002b99 	.word	0x00002b99
    2208:	0aaaaaaa 	.word	0x0aaaaaaa
    220c:	200009a0 	.word	0x200009a0
    2210:	0000013d 	.word	0x0000013d
    2214:	200025b7 	.word	0x200025b7
    2218:	00002d71 	.word	0x00002d71
    221c:	200019a6 	.word	0x200019a6
    2220:	3d800000 	.word	0x3d800000
    2224:	20002614 	.word	0x20002614
    2228:	20000c40 	.word	0x20000c40
    222c:	20000e08 	.word	0x20000e08
    2230:	20001724 	.word	0x20001724
    2234:	2000171c 	.word	0x2000171c
    2238:	2000172c 	.word	0x2000172c
    223c:	2000278c 	.word	0x2000278c

00002240 <setup::{lambda(Button2&)#2}::_FUN(Button2&)>:
    divideState=!divideState;
    2240:	4b61      	ldr	r3, [pc, #388]	; (23c8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x188>)
    int total = 0;
    2242:	2200      	movs	r2, #0
    2244:	4961      	ldr	r1, [pc, #388]	; (23cc <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x18c>)
  encoderButton.setDoubleClickHandler([](Button2 &b) {
    2246:	b5f0      	push	{r4, r5, r6, r7, lr}
    clock2.update(tickSwitcher(ctr.bpm, bGang.tally()));
    2248:	4d61      	ldr	r5, [pc, #388]	; (23d0 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x190>)
  encoderButton.setDoubleClickHandler([](Button2 &b) {
    224a:	b083      	sub	sp, #12
    divideState=!divideState;
    224c:	781e      	ldrb	r6, [r3, #0]
    clock2.update(tickSwitcher(ctr.bpm, bGang.tally()));
    224e:	4608      	mov	r0, r1
    2250:	edd5 7a00 	vldr	s15, [r5]
        total |= (1 << i);
    2254:	f04f 0e01 	mov.w	lr, #1
    divideState=!divideState;
    2258:	f086 0601 	eor.w	r6, r6, #1
    clock2.update(tickSwitcher(ctr.bpm, bGang.tally()));
    225c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    divideState=!divideState;
    2260:	701e      	strb	r6, [r3, #0]
    for (int i=0;i<numOfBs;i++) {
    2262:	4613      	mov	r3, r2
      if (btState[i]) {
    2264:	f810 4f01 	ldrb.w	r4, [r0, #1]!
        total |= (1 << i);
    2268:	fa0e fc03 	lsl.w	ip, lr, r3
    for (int i=0;i<numOfBs;i++) {
    226c:	3301      	adds	r3, #1
      if (btState[i]) {
    226e:	b10c      	cbz	r4, 2274 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x34>
        total |= (1 << i);
    2270:	ea42 020c 	orr.w	r2, r2, ip
    for (int i=0;i<numOfBs;i++) {
    2274:	2b04      	cmp	r3, #4
    2276:	d1f5      	bne.n	2264 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x24>
    if (total == 0){
    2278:	2a00      	cmp	r2, #0
    227a:	f000 809a 	beq.w	23b2 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x172>
    clock2.update(tickSwitcher(ctr.bpm, bGang.tally()));
    227e:	ee07 2a90 	vmov	s15, r2
    2282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2286:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
    228a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 23c0 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x180>
  if (divideState) {
    228e:	2e00      	cmp	r6, #0
    2290:	d077      	beq.n	2382 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x142>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2292:	ee83 6b04 	vdiv.f64	d6, d3, d4
    2296:	eeb3 5a00 	vmov.f32	s10, #48	; 0x41800000  16.0
    229a:	eec5 7a07 	vdiv.f32	s15, s10, s14
    229e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    22a2:	ee26 7b07 	vmul.f64	d7, d6, d7
    22a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    22aa:	ee17 3a90 	vmov	r3, s15
		if (period < 0 || period > MAX_PERIOD)
    22ae:	4a49      	ldr	r2, [pc, #292]	; (23d4 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x194>)
    22b0:	4293      	cmp	r3, r2
    22b2:	d809      	bhi.n	22c8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x88>
			return (24000000 / 1000000) * period - 1;
    22b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    22b8:	00db      	lsls	r3, r3, #3
    22ba:	3b01      	subs	r3, #1
		if (cycles < 17) return;
    22bc:	2b10      	cmp	r3, #16
    22be:	d903      	bls.n	22c8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x88>
		if (channel) channel->LDVAL = cycles;
    22c0:	4a45      	ldr	r2, [pc, #276]	; (23d8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x198>)
    22c2:	6812      	ldr	r2, [r2, #0]
    22c4:	b102      	cbz	r2, 22c8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x88>
    22c6:	6013      	str	r3, [r2, #0]
    int total = 0;
    22c8:	2200      	movs	r2, #0
        total |= (1 << i);
    22ca:	f04f 0c01 	mov.w	ip, #1
    for (int i=0;i<numOfBs;i++) {
    22ce:	4613      	mov	r3, r2
      if (btState[i]) {
    22d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        total |= (1 << i);
    22d4:	fa0c f403 	lsl.w	r4, ip, r3
    for (int i=0;i<numOfBs;i++) {
    22d8:	3301      	adds	r3, #1
      if (btState[i]) {
    22da:	b100      	cbz	r0, 22de <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x9e>
        total |= (1 << i);
    22dc:	4322      	orrs	r2, r4
    for (int i=0;i<numOfBs;i++) {
    22de:	2b04      	cmp	r3, #4
    22e0:	d1f6      	bne.n	22d0 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x90>
    if (total == 0){
    22e2:	2a00      	cmp	r2, #0
    22e4:	d068      	beq.n	23b8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x178>
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    22e6:	ee07 2a90 	vmov	s15, r2
    22ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    22ee:	2e00      	cmp	r6, #0
    22f0:	d056      	beq.n	23a0 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x160>
    return (bpm * inputStep / 16.0f);
    22f2:	ee65 5aa7 	vmul.f32	s11, s11, s15
    22f6:	eddf 7a39 	vldr	s15, [pc, #228]	; 23dc <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x19c>
    22fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
    22fe:	eebc 7ae5 	vcvt.u32.f32	s14, s11
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2302:	4c37      	ldr	r4, [pc, #220]	; (23e0 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x1a0>)
    2304:	2600      	movs	r6, #0
    2306:	2707      	movs	r7, #7
    2308:	2330      	movs	r3, #48	; 0x30
    230a:	4632      	mov	r2, r6
    230c:	4631      	mov	r1, r6
    230e:	4620      	mov	r0, r4
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2310:	ed85 7a01 	vstr	s14, [r5, #4]
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2314:	e9cd 7600 	strd	r7, r6, [sp]
    2318:	f001 f966 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.fillRect(65, 0, 60, 7, BLACK); //7
    231c:	4632      	mov	r2, r6
    231e:	4620      	mov	r0, r4
    2320:	233c      	movs	r3, #60	; 0x3c
    2322:	2141      	movs	r1, #65	; 0x41
    2324:	e9cd 7600 	strd	r7, r6, [sp]
    2328:	f001 f95e 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    232c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextSize(1);
    2330:	4620      	mov	r0, r4
    2332:	2101      	movs	r1, #1
    2334:	e9c4 6304 	strd	r6, r3, [r4, #16]
    2338:	f001 fdae 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    233c:	2205      	movs	r2, #5
    233e:	4929      	ldr	r1, [pc, #164]	; (23e4 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x1a4>)
    2340:	4620      	mov	r0, r4
    2342:	f003 fab1 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2346:	6829      	ldr	r1, [r5, #0]
    2348:	4620      	mov	r0, r4
    234a:	f003 fad5 	bl	58f8 <Print::print(long)>
    cursor_x = x;
    234e:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    2350:	2205      	movs	r2, #5
    2352:	4924      	ldr	r1, [pc, #144]	; (23e4 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x1a4>)
    2354:	6123      	str	r3, [r4, #16]
    2356:	4620      	mov	r0, r4
    2358:	f003 faa6 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    235c:	6869      	ldr	r1, [r5, #4]
    235e:	4620      	mov	r0, r4
    2360:	f003 faca 	bl	58f8 <Print::print(long)>
    display.display(); // Partial update
    2364:	4620      	mov	r0, r4
    2366:	f002 fb33 	bl	49d0 <Adafruit_SSD1306::display()>
    oledControl.updateMode();
    236a:	f7ff fcbd 	bl	1ce8 <OLEDControl::updateMode() [clone .isra.0]>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    236e:	2113      	movs	r1, #19
    2370:	481d      	ldr	r0, [pc, #116]	; (23e8 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x1a8>)
    2372:	f005 f823 	bl	73bc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2376:	481d      	ldr	r0, [pc, #116]	; (23ec <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x1ac>)
  });
    2378:	b003      	add	sp, #12
    237a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    237e:	f003 bac7 	b.w	5910 <Print::println()>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2382:	ee83 6b04 	vdiv.f64	d6, d3, d4
    2386:	eddf 7a15 	vldr	s15, [pc, #84]	; 23dc <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x19c>
    238a:	ee27 7a27 	vmul.f32	s14, s14, s15
    238e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2392:	ee26 7b07 	vmul.f64	d7, d6, d7
    2396:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    239a:	ee17 3a90 	vmov	r3, s15
    return bpmTickInterval(bpm, 16.0, inputStep);
    239e:	e786      	b.n	22ae <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x6e>
    return (bpm * 16.0f / inputStep);
    23a0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    23a4:	ee65 5a87 	vmul.f32	s11, s11, s14
    23a8:	ee85 7aa7 	vdiv.f32	s14, s11, s15
    23ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    23b0:	e7a7      	b.n	2302 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0xc2>
    23b2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    23b6:	e766      	b.n	2286 <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0x46>
    23b8:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    23bc:	e797      	b.n	22ee <setup::{lambda(Button2&)#2}::_FUN(Button2&)+0xae>
    23be:	bf00      	nop
    23c0:	00000000 	.word	0x00000000
    23c4:	414312d0 	.word	0x414312d0
    23c8:	200019a6 	.word	0x200019a6
    23cc:	200025b7 	.word	0x200025b7
    23d0:	2000172c 	.word	0x2000172c
    23d4:	0aaaaaaa 	.word	0x0aaaaaaa
    23d8:	20001724 	.word	0x20001724
    23dc:	3d800000 	.word	0x3d800000
    23e0:	20002614 	.word	0x20002614
    23e4:	200002b4 	.word	0x200002b4
    23e8:	2000098c 	.word	0x2000098c
    23ec:	20000e08 	.word	0x20000e08

000023f0 <loop>:
void loop() {
    23f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f4:	4cba      	ldr	r4, [pc, #744]	; (26e0 <loop+0x2f0>)
    23f6:	b08f      	sub	sp, #60	; 0x3c
    23f8:	4eba      	ldr	r6, [pc, #744]	; (26e4 <loop+0x2f4>)
        bGang.changes = true;
    23fa:	f04f 0a01 	mov.w	sl, #1
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    23fe:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 26f4 <loop+0x304>
    2402:	f1a4 0518 	sub.w	r5, r4, #24
    2406:	f104 0740 	add.w	r7, r4, #64	; 0x40
    240a:	f1a4 0828 	sub.w	r8, r4, #40	; 0x28
    if (bGang.binaries[i].update()) {
    240e:	4620      	mov	r0, r4
    2410:	f002 fbd2 	bl	4bb8 <Bounce::update()>
    2414:	b9d8      	cbnz	r0, 244e <loop+0x5e>
  for (int i = 0; i < bGang.numOfBs; i++) {
    2416:	3410      	adds	r4, #16
    2418:	3501      	adds	r5, #1
    241a:	3604      	adds	r6, #4
    241c:	42a7      	cmp	r7, r4
    241e:	d1f6      	bne.n	240e <loop+0x1e>
    if (changes) {
    2420:	f898 3014 	ldrb.w	r3, [r8, #20]
    2424:	2b00      	cmp	r3, #0
    2426:	d13e      	bne.n	24a6 <loop+0xb6>
    2428:	4daf      	ldr	r5, [pc, #700]	; (26e8 <loop+0x2f8>)
		if (interrupts_in_use < 2) {
    242a:	49b0      	ldr	r1, [pc, #704]	; (26ec <loop+0x2fc>)
    242c:	7e0b      	ldrb	r3, [r1, #24]
    242e:	2b01      	cmp	r3, #1
    2430:	f240 8120 	bls.w	2674 <loop+0x284>
			noInterrupts();
    2434:	b672      	cpsid	i
		int32_t ret = encoder.position;
    2436:	694b      	ldr	r3, [r1, #20]
		interrupts();
    2438:	b662      	cpsie	i
  int delta = encoderVal - ctr.bpm;
    243a:	682e      	ldr	r6, [r5, #0]
    243c:	1b9a      	subs	r2, r3, r6
  if (delta!=0) {
    243e:	2a00      	cmp	r2, #0
    2440:	d15a      	bne.n	24f8 <loop+0x108>
  encoderButton.loop();
    2442:	48ab      	ldr	r0, [pc, #684]	; (26f0 <loop+0x300>)
}
    2444:	b00f      	add	sp, #60	; 0x3c
    2446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  encoderButton.loop();
    244a:	f002 bcd7 	b.w	4dfc <Button2::loop()>
      if (bGang.binaries[i].fallingEdge()) {
    244e:	4620      	mov	r0, r4
    2450:	f002 fbe0 	bl	4c14 <Bounce::fallingEdge()>
    2454:	2800      	cmp	r0, #0
    2456:	d0de      	beq.n	2416 <loop+0x26>
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    2458:	2300      	movs	r3, #0
    245a:	2212      	movs	r2, #18
    245c:	48a5      	ldr	r0, [pc, #660]	; (26f4 <loop+0x304>)
    245e:	9301      	str	r3, [sp, #4]
        bGang.btState[i] =! bGang.btState[i];
    2460:	782b      	ldrb	r3, [r5, #0]
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    2462:	f9b6 b000 	ldrsh.w	fp, [r6]
        bGang.btState[i] =! bGang.btState[i];
    2466:	f083 0301 	eor.w	r3, r3, #1
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    246a:	4659      	mov	r1, fp
        bGang.btState[i] =! bGang.btState[i];
    246c:	702b      	strb	r3, [r5, #0]
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    246e:	2314      	movs	r3, #20
        bGang.changes = true;
    2470:	f888 a014 	strb.w	sl, [r8, #20]
    display.fillRect(xButtons[a], 18, 10, 20, BLACK);
    2474:	9300      	str	r3, [sp, #0]
    2476:	230a      	movs	r3, #10
    2478:	f001 f8b6 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.setTextSize(2);
    247c:	2102      	movs	r1, #2
    247e:	489d      	ldr	r0, [pc, #628]	; (26f4 <loop+0x304>)
    2480:	f001 fd0a 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
    cursor_y = y;
    2484:	2312      	movs	r3, #18
	size_t print(int n)				{ return print((long)n); }
    2486:	7829      	ldrb	r1, [r5, #0]
    2488:	f8a9 3012 	strh.w	r3, [r9, #18]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    248c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    cursor_x = x;
    2490:	f8a9 b010 	strh.w	fp, [r9, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2494:	f8c9 3014 	str.w	r3, [r9, #20]
    2498:	4896      	ldr	r0, [pc, #600]	; (26f4 <loop+0x304>)
    249a:	f003 fa2d 	bl	58f8 <Print::print(long)>
    display.display();
    249e:	4895      	ldr	r0, [pc, #596]	; (26f4 <loop+0x304>)
    24a0:	f002 fa96 	bl	49d0 <Adafruit_SSD1306::display()>
  }
    24a4:	e7b7      	b.n	2416 <loop+0x26>
    if (divideState) {
    24a6:	4c94      	ldr	r4, [pc, #592]	; (26f8 <loop+0x308>)
      changes = false;
    24a8:	2600      	movs	r6, #0
      display.fillRect(31,50,25,25, BLACK);
    24aa:	2319      	movs	r3, #25
    24ac:	2232      	movs	r2, #50	; 0x32
    if (divideState) {
    24ae:	7825      	ldrb	r5, [r4, #0]
      changes = false;
    24b0:	f888 6014 	strb.w	r6, [r8, #20]
    if (divideState) {
    24b4:	2d00      	cmp	r5, #0
    24b6:	f000 80f0 	beq.w	269a <loop+0x2aa>
      display.fillRect(31,50,25,25, BLACK);
    24ba:	211f      	movs	r1, #31
    24bc:	488d      	ldr	r0, [pc, #564]	; (26f4 <loop+0x304>)
    24be:	e9cd 3600 	strd	r3, r6, [sp]
    24c2:	f001 f891 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    if (divideState) {
    24c6:	7823      	ldrb	r3, [r4, #0]
    24c8:	2b00      	cmp	r3, #0
    24ca:	f000 8268 	beq.w	299e <loop+0x5ae>
    24ce:	4f8b      	ldr	r7, [pc, #556]	; (26fc <loop+0x30c>)
    for (int i=0;i<numOfBs;i++) {
    24d0:	4633      	mov	r3, r6
        total |= (1 << i);
    24d2:	2501      	movs	r5, #1
    24d4:	463a      	mov	r2, r7
      if (btState[i]) {
    24d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
        total |= (1 << i);
    24da:	fa05 f003 	lsl.w	r0, r5, r3
    for (int i=0;i<numOfBs;i++) {
    24de:	3301      	adds	r3, #1
      if (btState[i]) {
    24e0:	b101      	cbz	r1, 24e4 <loop+0xf4>
        total |= (1 << i);
    24e2:	4306      	orrs	r6, r0
    for (int i=0;i<numOfBs;i++) {
    24e4:	2b04      	cmp	r3, #4
    24e6:	d1f6      	bne.n	24d6 <loop+0xe6>
      if (bGang.tally() < 10) {
    24e8:	2e09      	cmp	r6, #9
    24ea:	f300 827e 	bgt.w	29ea <loop+0x5fa>
    24ee:	2e00      	cmp	r6, #0
    24f0:	f000 827b 	beq.w	29ea <loop+0x5fa>
    24f4:	232b      	movs	r3, #43	; 0x2b
    24f6:	e254      	b.n	29a2 <loop+0x5b2>
    if(by>0 && bpm < max){
    24f8:	f340 810c 	ble.w	2714 <loop+0x324>
    24fc:	68ea      	ldr	r2, [r5, #12]
    24fe:	4296      	cmp	r6, r2
    2500:	da04      	bge.n	250c <loop+0x11c>
      if(bpm > max) bpm = max;
    2502:	429a      	cmp	r2, r3
    2504:	f280 810d 	bge.w	2722 <loop+0x332>
      if(bpm < min) bpm = min;
    2508:	4616      	mov	r6, r2
    250a:	602a      	str	r2, [r5, #0]
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    250c:	ee07 6a90 	vmov	s15, r6
		if (period < 0 || period > MAX_PERIOD)
    2510:	4a7b      	ldr	r2, [pc, #492]	; (2700 <loop+0x310>)
  if (divideState) {
    2512:	4c79      	ldr	r4, [pc, #484]	; (26f8 <loop+0x308>)
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  if (divideState) {
    2518:	f894 e000 	ldrb.w	lr, [r4]
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    251c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2520:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 26d8 <loop+0x2e8>
    2524:	ee85 6b07 	vdiv.f64	d6, d5, d7
    2528:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    252c:	ee17 3a90 	vmov	r3, s15
    2530:	4293      	cmp	r3, r2
    2532:	d809      	bhi.n	2548 <loop+0x158>
			return (24000000 / 1000000) * period - 1;
    2534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2538:	00db      	lsls	r3, r3, #3
    253a:	3b01      	subs	r3, #1
		if (cycles < 17) return;
    253c:	2b10      	cmp	r3, #16
    253e:	d903      	bls.n	2548 <loop+0x158>
		if (channel) channel->LDVAL = cycles;
    2540:	4a70      	ldr	r2, [pc, #448]	; (2704 <loop+0x314>)
    2542:	6812      	ldr	r2, [r2, #0]
    2544:	b102      	cbz	r2, 2548 <loop+0x158>
    2546:	6013      	str	r3, [r2, #0]
    int total = 0;
    2548:	2300      	movs	r3, #0
    254a:	486c      	ldr	r0, [pc, #432]	; (26fc <loop+0x30c>)
        total |= (1 << i);
    254c:	f04f 0901 	mov.w	r9, #1
    2550:	4607      	mov	r7, r0
    for (int i=0;i<numOfBs;i++) {
    2552:	461a      	mov	r2, r3
    2554:	4698      	mov	r8, r3
      if (btState[i]) {
    2556:	f817 3f01 	ldrb.w	r3, [r7, #1]!
        total |= (1 << i);
    255a:	fa09 fc02 	lsl.w	ip, r9, r2
    for (int i=0;i<numOfBs;i++) {
    255e:	3201      	adds	r2, #1
      if (btState[i]) {
    2560:	b10b      	cbz	r3, 2566 <loop+0x176>
        total |= (1 << i);
    2562:	ea48 080c 	orr.w	r8, r8, ip
    for (int i=0;i<numOfBs;i++) {
    2566:	2a04      	cmp	r2, #4
    2568:	d1f5      	bne.n	2556 <loop+0x166>
    if (total == 0){
    256a:	4643      	mov	r3, r8
    256c:	2b00      	cmp	r3, #0
    256e:	f000 8130 	beq.w	27d2 <loop+0x3e2>
    clock2.update(tickSwitcher(ctr.bpm, bGang.tally()));
    2572:	ee07 8a90 	vmov	s15, r8
    2576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  if (divideState) {
    257a:	f1be 0f00 	cmp.w	lr, #0
    257e:	f000 810f 	beq.w	27a0 <loop+0x3b0>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2582:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
    2586:	eec5 7a87 	vdiv.f32	s15, s11, s14
    258a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    258e:	ee27 7b06 	vmul.f64	d7, d7, d6
    2592:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    2596:	ee17 3a90 	vmov	r3, s15
		if (period < 0 || period > MAX_PERIOD)
    259a:	4a59      	ldr	r2, [pc, #356]	; (2700 <loop+0x310>)
    259c:	4293      	cmp	r3, r2
    259e:	d809      	bhi.n	25b4 <loop+0x1c4>
			return (24000000 / 1000000) * period - 1;
    25a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    25a4:	00db      	lsls	r3, r3, #3
    25a6:	3b01      	subs	r3, #1
		if (cycles < 17) return;
    25a8:	2b10      	cmp	r3, #16
    25aa:	d903      	bls.n	25b4 <loop+0x1c4>
		if (channel) channel->LDVAL = cycles;
    25ac:	4a56      	ldr	r2, [pc, #344]	; (2708 <loop+0x318>)
    25ae:	6812      	ldr	r2, [r2, #0]
    25b0:	b102      	cbz	r2, 25b4 <loop+0x1c4>
    25b2:	6013      	str	r3, [r2, #0]
		noInterrupts();
    25b4:	b672      	cpsid	i
		encoder.position = p;
    25b6:	614e      	str	r6, [r1, #20]
		interrupts();
    25b8:	b662      	cpsie	i
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());    
    25ba:	edd5 7a00 	vldr	s15, [r5]
    int total = 0;
    25be:	2200      	movs	r2, #0
        total |= (1 << i);
    25c0:	2701      	movs	r7, #1
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());    
    25c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    for (int i=0;i<numOfBs;i++) {
    25c6:	4613      	mov	r3, r2
      if (btState[i]) {
    25c8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
        total |= (1 << i);
    25cc:	fa07 f603 	lsl.w	r6, r7, r3
    for (int i=0;i<numOfBs;i++) {
    25d0:	3301      	adds	r3, #1
      if (btState[i]) {
    25d2:	b101      	cbz	r1, 25d6 <loop+0x1e6>
        total |= (1 << i);
    25d4:	4332      	orrs	r2, r6
    for (int i=0;i<numOfBs;i++) {
    25d6:	2b04      	cmp	r3, #4
    25d8:	d1f6      	bne.n	25c8 <loop+0x1d8>
    if (total == 0){
    25da:	2a00      	cmp	r2, #0
    25dc:	f000 80f6 	beq.w	27cc <loop+0x3dc>
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());    
    25e0:	ee07 2a90 	vmov	s15, r2
    25e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	2b00      	cmp	r3, #0
    25ec:	f000 80e5 	beq.w	27ba <loop+0x3ca>
    return (bpm * inputStep / 16.0f);
    25f0:	ee27 7a27 	vmul.f32	s14, s14, s15
    25f4:	eddf 7a46 	vldr	s15, [pc, #280]	; 2710 <loop+0x320>
    25f8:	ee27 7a27 	vmul.f32	s14, s14, s15
    25fc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2600:	4c3c      	ldr	r4, [pc, #240]	; (26f4 <loop+0x304>)
    2602:	2600      	movs	r6, #0
    2604:	2707      	movs	r7, #7
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally());    
    2606:	ed85 7a01 	vstr	s14, [r5, #4]
    display.fillRect(0, 0, 48, 7, BLACK); //7
    260a:	4632      	mov	r2, r6
    260c:	4631      	mov	r1, r6
    260e:	4620      	mov	r0, r4
    2610:	2330      	movs	r3, #48	; 0x30
    2612:	e9cd 7600 	strd	r7, r6, [sp]
    2616:	f000 ffe7 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.fillRect(65, 0, 60, 7, BLACK); //7
    261a:	4632      	mov	r2, r6
    261c:	4620      	mov	r0, r4
    261e:	233c      	movs	r3, #60	; 0x3c
    2620:	2141      	movs	r1, #65	; 0x41
    2622:	e9cd 7600 	strd	r7, r6, [sp]
    2626:	f000 ffdf 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    262a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextSize(1);
    262e:	4620      	mov	r0, r4
    2630:	2101      	movs	r1, #1
    2632:	e9c4 6304 	strd	r6, r3, [r4, #16]
    2636:	f001 fc2f 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    263a:	2205      	movs	r2, #5
    263c:	4933      	ldr	r1, [pc, #204]	; (270c <loop+0x31c>)
    263e:	4620      	mov	r0, r4
    2640:	f003 f932 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2644:	6829      	ldr	r1, [r5, #0]
    2646:	4620      	mov	r0, r4
    2648:	f003 f956 	bl	58f8 <Print::print(long)>
    cursor_x = x;
    264c:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    264e:	2205      	movs	r2, #5
    2650:	492e      	ldr	r1, [pc, #184]	; (270c <loop+0x31c>)
    2652:	6123      	str	r3, [r4, #16]
    2654:	4620      	mov	r0, r4
    2656:	f003 f927 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    265a:	6869      	ldr	r1, [r5, #4]
    265c:	4620      	mov	r0, r4
    265e:	f003 f94b 	bl	58f8 <Print::print(long)>
    display.display(); // Partial update
    2662:	4620      	mov	r0, r4
    2664:	f002 f9b4 	bl	49d0 <Adafruit_SSD1306::display()>
  encoderButton.loop();
    2668:	4821      	ldr	r0, [pc, #132]	; (26f0 <loop+0x300>)
}
    266a:	b00f      	add	sp, #60	; 0x3c
    266c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  encoderButton.loop();
    2670:	f002 bbc4 	b.w	4dfc <Button2::loop()>
			noInterrupts();
    2674:	b672      	cpsid	i
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2676:	e9d1 3000 	ldrd	r3, r0, [r1]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    267a:	688a      	ldr	r2, [r1, #8]
    267c:	681b      	ldr	r3, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    267e:	6800      	ldr	r0, [r0, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2680:	401a      	ands	r2, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2682:	68cb      	ldr	r3, [r1, #12]
    2684:	4218      	tst	r0, r3
    2686:	d04f      	beq.n	2728 <loop+0x338>
		uint8_t state = arg->state & 3;
    2688:	7c0b      	ldrb	r3, [r1, #16]
    268a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    268e:	b10a      	cbz	r2, 2694 <loop+0x2a4>
    2690:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2694:	f043 0308 	orr.w	r3, r3, #8
    2698:	e04c      	b.n	2734 <loop+0x344>
      display.fillRect(75,50,25,25, BLACK);
    269a:	e9cd 3500 	strd	r3, r5, [sp]
    269e:	214b      	movs	r1, #75	; 0x4b
    26a0:	4814      	ldr	r0, [pc, #80]	; (26f4 <loop+0x304>)
    26a2:	f000 ffa1 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    if (divideState) {
    26a6:	7823      	ldrb	r3, [r4, #0]
    26a8:	2b00      	cmp	r3, #0
    26aa:	f000 8095 	beq.w	27d8 <loop+0x3e8>
    26ae:	4f13      	ldr	r7, [pc, #76]	; (26fc <loop+0x30c>)
    for (int i=0;i<numOfBs;i++) {
    26b0:	462b      	mov	r3, r5
        total |= (1 << i);
    26b2:	2601      	movs	r6, #1
    26b4:	463a      	mov	r2, r7
      if (btState[i]) {
    26b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
        total |= (1 << i);
    26ba:	fa06 f003 	lsl.w	r0, r6, r3
    for (int i=0;i<numOfBs;i++) {
    26be:	3301      	adds	r3, #1
      if (btState[i]) {
    26c0:	b101      	cbz	r1, 26c4 <loop+0x2d4>
        total |= (1 << i);
    26c2:	4305      	orrs	r5, r0
    for (int i=0;i<numOfBs;i++) {
    26c4:	2b04      	cmp	r3, #4
    26c6:	d1f6      	bne.n	26b6 <loop+0x2c6>
      if (bGang.tally() < 10) {
    26c8:	2d09      	cmp	r5, #9
    26ca:	f300 8190 	bgt.w	29ee <loop+0x5fe>
    26ce:	2d00      	cmp	r5, #0
    26d0:	f000 818d 	beq.w	29ee <loop+0x5fe>
    26d4:	232b      	movs	r3, #43	; 0x2b
    26d6:	e081      	b.n	27dc <loop+0x3ec>
    26d8:	00000000 	.word	0x00000000
    26dc:	414312d0 	.word	0x414312d0
    26e0:	200025d0 	.word	0x200025d0
    26e4:	2000081c 	.word	0x2000081c
    26e8:	2000172c 	.word	0x2000172c
    26ec:	20002680 	.word	0x20002680
    26f0:	2000269c 	.word	0x2000269c
    26f4:	20002614 	.word	0x20002614
    26f8:	200019a6 	.word	0x200019a6
    26fc:	200025b7 	.word	0x200025b7
    2700:	0aaaaaaa 	.word	0x0aaaaaaa
    2704:	2000171c 	.word	0x2000171c
    2708:	20001724 	.word	0x20001724
    270c:	200002b4 	.word	0x200002b4
    2710:	3d800000 	.word	0x3d800000
    else if(by<0 && bpm > min){
    2714:	68aa      	ldr	r2, [r5, #8]
    2716:	4296      	cmp	r6, r2
    2718:	f77f aef8 	ble.w	250c <loop+0x11c>
      if(bpm < min) bpm = min;
    271c:	429a      	cmp	r2, r3
    271e:	f73f aef3 	bgt.w	2508 <loop+0x118>
      bpm += by;
    2722:	461e      	mov	r6, r3
    2724:	602b      	str	r3, [r5, #0]
    2726:	e6f1      	b.n	250c <loop+0x11c>
		uint8_t state = arg->state & 3;
    2728:	7c0b      	ldrb	r3, [r1, #16]
    272a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    272e:	b10a      	cbz	r2, 2734 <loop+0x344>
    2730:	f043 0304 	orr.w	r3, r3, #4
		arg->state = (state >> 2);
    2734:	089a      	lsrs	r2, r3, #2
		switch (state) {
    2736:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2738:	740a      	strb	r2, [r1, #16]
		switch (state) {
    273a:	2b0d      	cmp	r3, #13
    273c:	f63f ae7b 	bhi.w	2436 <loop+0x46>
    2740:	a201      	add	r2, pc, #4	; (adr r2, 2748 <loop+0x358>)
    2742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2746:	bf00      	nop
    2748:	00002789 	.word	0x00002789
    274c:	00002781 	.word	0x00002781
    2750:	00002799 	.word	0x00002799
    2754:	00002781 	.word	0x00002781
    2758:	00002437 	.word	0x00002437
    275c:	00002791 	.word	0x00002791
    2760:	00002789 	.word	0x00002789
    2764:	00002789 	.word	0x00002789
    2768:	00002791 	.word	0x00002791
    276c:	00002437 	.word	0x00002437
    2770:	00002781 	.word	0x00002781
    2774:	00002799 	.word	0x00002799
    2778:	00002781 	.word	0x00002781
    277c:	00002789 	.word	0x00002789
				arg->position--;
    2780:	694b      	ldr	r3, [r1, #20]
    2782:	3b01      	subs	r3, #1
    2784:	614b      	str	r3, [r1, #20]
				return;
    2786:	e657      	b.n	2438 <loop+0x48>
				arg->position++;
    2788:	694b      	ldr	r3, [r1, #20]
    278a:	3301      	adds	r3, #1
    278c:	614b      	str	r3, [r1, #20]
				return;
    278e:	e653      	b.n	2438 <loop+0x48>
				arg->position -= 2;
    2790:	694b      	ldr	r3, [r1, #20]
    2792:	3b02      	subs	r3, #2
    2794:	614b      	str	r3, [r1, #20]
				return;
    2796:	e64f      	b.n	2438 <loop+0x48>
				arg->position += 2;
    2798:	694b      	ldr	r3, [r1, #20]
    279a:	3302      	adds	r3, #2
    279c:	614b      	str	r3, [r1, #20]
				return;
    279e:	e64b      	b.n	2438 <loop+0x48>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    27a0:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 2710 <loop+0x320>
    27a4:	ee27 7a27 	vmul.f32	s14, s14, s15
    27a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    27ac:	ee27 7b06 	vmul.f64	d7, d7, d6
    27b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    27b4:	ee17 3a90 	vmov	r3, s15
    return bpmTickInterval(bpm, 16.0, inputStep);
    27b8:	e6ef      	b.n	259a <loop+0x1aa>
    return (bpm * 16.0f / inputStep);
    27ba:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    27be:	ee27 7a26 	vmul.f32	s14, s14, s13
    27c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
    27c6:	eebc 7ae6 	vcvt.u32.f32	s14, s13
    27ca:	e719      	b.n	2600 <loop+0x210>
    27cc:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    27d0:	e70a      	b.n	25e8 <loop+0x1f8>
    27d2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    27d6:	e6d0      	b.n	257a <loop+0x18a>
    27d8:	234b      	movs	r3, #75	; 0x4b
    27da:	4f89      	ldr	r7, [pc, #548]	; (2a00 <loop+0x610>)
    27dc:	4e89      	ldr	r6, [pc, #548]	; (2a04 <loop+0x614>)
    int total = 0;
    27de:	2100      	movs	r1, #0
    27e0:	463a      	mov	r2, r7
        total |= (1 << i);
    27e2:	f04f 0c01 	mov.w	ip, #1
    27e6:	8233      	strh	r3, [r6, #16]
    cursor_y = y;
    27e8:	2332      	movs	r3, #50	; 0x32
    27ea:	8273      	strh	r3, [r6, #18]
    for (int i=0;i<numOfBs;i++) {
    27ec:	460b      	mov	r3, r1
      if (btState[i]) {
    27ee:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        total |= (1 << i);
    27f2:	fa0c f503 	lsl.w	r5, ip, r3
    for (int i=0;i<numOfBs;i++) {
    27f6:	3301      	adds	r3, #1
      if (btState[i]) {
    27f8:	b100      	cbz	r0, 27fc <loop+0x40c>
        total |= (1 << i);
    27fa:	4329      	orrs	r1, r5
    for (int i=0;i<numOfBs;i++) {
    27fc:	2b04      	cmp	r3, #4
    27fe:	d1f6      	bne.n	27ee <loop+0x3fe>
      total = 16;
    2800:	2900      	cmp	r1, #0
    2802:	4880      	ldr	r0, [pc, #512]	; (2a04 <loop+0x614>)
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2804:	4d80      	ldr	r5, [pc, #512]	; (2a08 <loop+0x618>)
    2806:	bf08      	it	eq
    2808:	2110      	moveq	r1, #16
    timerFlag = true;
    280a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 2a28 <loop+0x638>
    280e:	f003 f873 	bl	58f8 <Print::print(long)>
    display.display();
    2812:	487c      	ldr	r0, [pc, #496]	; (2a04 <loop+0x614>)
    2814:	f002 f8dc 	bl	49d0 <Adafruit_SSD1306::display()>
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2818:	edd5 7a00 	vldr	s15, [r5]
    int total = 0;
    281c:	2200      	movs	r2, #0
    timerFlag = true;
    281e:	f04f 0c01 	mov.w	ip, #1
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    2826:	4639      	mov	r1, r7
    for (int i=0;i<numOfBs;i++) {
    2828:	4613      	mov	r3, r2
    timerFlag = true;
    282a:	f888 c000 	strb.w	ip, [r8]
      if (btState[i]) {
    282e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        total |= (1 << i);
    2832:	fa0c fe03 	lsl.w	lr, ip, r3
    for (int i=0;i<numOfBs;i++) {
    2836:	3301      	adds	r3, #1
      if (btState[i]) {
    2838:	b108      	cbz	r0, 283e <loop+0x44e>
        total |= (1 << i);
    283a:	ea42 020e 	orr.w	r2, r2, lr
    for (int i=0;i<numOfBs;i++) {
    283e:	2b04      	cmp	r3, #4
    2840:	d1f5      	bne.n	282e <loop+0x43e>
    if (total == 0){
    2842:	2a00      	cmp	r2, #0
    2844:	f000 80a8 	beq.w	2998 <loop+0x5a8>
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2848:	ee07 2a90 	vmov	s15, r2
    284c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    2850:	7823      	ldrb	r3, [r4, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	f000 8097 	beq.w	2986 <loop+0x596>
    return (bpm * inputStep / 16.0f);
    2858:	ee27 7a27 	vmul.f32	s14, s14, s15
    285c:	eddf 7a6b 	vldr	s15, [pc, #428]	; 2a0c <loop+0x61c>
    2860:	ee27 7a27 	vmul.f32	s14, s14, s15
    2864:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2868:	f04f 0900 	mov.w	r9, #0
    286c:	f04f 0a07 	mov.w	sl, #7
    ctr.bpmPoly = calcBPM(ctr.bpm, bGang.tally()); 
    2870:	ed85 7a01 	vstr	s14, [r5, #4]
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2874:	2330      	movs	r3, #48	; 0x30
    2876:	464a      	mov	r2, r9
    2878:	4649      	mov	r1, r9
    287a:	4862      	ldr	r0, [pc, #392]	; (2a04 <loop+0x614>)
    287c:	e9cd a900 	strd	sl, r9, [sp]
    2880:	f000 feb2 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.fillRect(65, 0, 60, 7, BLACK); //7
    2884:	464a      	mov	r2, r9
    2886:	233c      	movs	r3, #60	; 0x3c
    2888:	2141      	movs	r1, #65	; 0x41
    288a:	485e      	ldr	r0, [pc, #376]	; (2a04 <loop+0x614>)
    288c:	e9cd a900 	strd	sl, r9, [sp]
    2890:	f000 feaa 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2894:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextSize(1);
    2898:	2101      	movs	r1, #1
    289a:	485a      	ldr	r0, [pc, #360]	; (2a04 <loop+0x614>)
    289c:	6173      	str	r3, [r6, #20]
    cursor_x = x;
    289e:	f8c6 9010 	str.w	r9, [r6, #16]
    28a2:	f001 faf9 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    28a6:	2205      	movs	r2, #5
    28a8:	4959      	ldr	r1, [pc, #356]	; (2a10 <loop+0x620>)
    28aa:	4856      	ldr	r0, [pc, #344]	; (2a04 <loop+0x614>)
    28ac:	f002 fffc 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    28b0:	6829      	ldr	r1, [r5, #0]
    28b2:	4854      	ldr	r0, [pc, #336]	; (2a04 <loop+0x614>)
    28b4:	f003 f820 	bl	58f8 <Print::print(long)>
    28b8:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    28ba:	2205      	movs	r2, #5
    28bc:	4954      	ldr	r1, [pc, #336]	; (2a10 <loop+0x620>)
    28be:	6133      	str	r3, [r6, #16]
    28c0:	4850      	ldr	r0, [pc, #320]	; (2a04 <loop+0x614>)
    28c2:	f002 fff1 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    28c6:	6869      	ldr	r1, [r5, #4]
    28c8:	484e      	ldr	r0, [pc, #312]	; (2a04 <loop+0x614>)
    28ca:	f003 f815 	bl	58f8 <Print::print(long)>
    display.display(); // Partial update
    28ce:	484d      	ldr	r0, [pc, #308]	; (2a04 <loop+0x614>)
    28d0:	f002 f87e 	bl	49d0 <Adafruit_SSD1306::display()>
    return currentState;
    28d4:	4b4f      	ldr	r3, [pc, #316]	; (2a14 <loop+0x624>)
    if (!oledControl.isPlaying()) {
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	2b00      	cmp	r3, #0
    28da:	f47f ada6 	bne.w	242a <loop+0x3a>
      clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    28de:	edd5 7a00 	vldr	s15, [r5]
        total |= (1 << i);
    28e2:	2601      	movs	r6, #1
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    28e4:	4a4c      	ldr	r2, [pc, #304]	; (2a18 <loop+0x628>)
      clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    28e6:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
        vtable_ptr_ = std::addressof(vt);
    28ea:	f8df c140 	ldr.w	ip, [pc, #320]	; 2a2c <loop+0x63c>
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    28ee:	9204      	str	r2, [sp, #16]
    for (int i=0;i<numOfBs;i++) {
    28f0:	461a      	mov	r2, r3
        vtable_ptr_ = std::addressof(vt);
    28f2:	f8cd c008 	str.w	ip, [sp, #8]
      if (btState[i]) {
    28f6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
        total |= (1 << i);
    28fa:	fa06 f002 	lsl.w	r0, r6, r2
    for (int i=0;i<numOfBs;i++) {
    28fe:	3201      	adds	r2, #1
      if (btState[i]) {
    2900:	b101      	cbz	r1, 2904 <loop+0x514>
        total |= (1 << i);
    2902:	4303      	orrs	r3, r0
    for (int i=0;i<numOfBs;i++) {
    2904:	2a04      	cmp	r2, #4
    2906:	d1f6      	bne.n	28f6 <loop+0x506>
    if (total == 0){
    2908:	2b00      	cmp	r3, #0
    290a:	d072      	beq.n	29f2 <loop+0x602>
      clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally()));
    290c:	ee07 3a90 	vmov	s15, r3
    2910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    2914:	7823      	ldrb	r3, [r4, #0]
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2916:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  if (divideState) {
    291a:	2b00      	cmp	r3, #0
    291c:	d054      	beq.n	29c8 <loop+0x5d8>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    291e:	eef3 4a00 	vmov.f32	s9, #48	; 0x41800000  16.0
    2922:	ed9f 3b35 	vldr	d3, [pc, #212]	; 29f8 <loop+0x608>
    2926:	ee84 7aa7 	vdiv.f32	s14, s9, s15
    292a:	ee83 6b05 	vdiv.f64	d6, d3, d5
    292e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2932:	ee26 7b07 	vmul.f64	d7, d6, d7
    2936:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    293a:	ee17 3a90 	vmov	r3, s15
		if (period < 0 || period > MAX_PERIOD)
    293e:	4a37      	ldr	r2, [pc, #220]	; (2a1c <loop+0x62c>)
    2940:	4293      	cmp	r3, r2
    2942:	d805      	bhi.n	2950 <loop+0x560>
			return (24000000 / 1000000) * period - 1;
    2944:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2948:	00dc      	lsls	r4, r3, #3
    294a:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    294c:	2c10      	cmp	r4, #16
    294e:	d807      	bhi.n	2960 <loop+0x570>
    2950:	4b33      	ldr	r3, [pc, #204]	; (2a20 <loop+0x630>)
    2952:	ae04      	add	r6, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2954:	4630      	mov	r0, r6
    2956:	4798      	blx	r3
      timerFlag = false;
    2958:	2300      	movs	r3, #0
    295a:	f888 3000 	strb.w	r3, [r8]
    295e:	e564      	b.n	242a <loop+0x3a>
        vtable_ptr_->copy_ptr(
    2960:	ae04      	add	r6, sp, #16
    2962:	a80a      	add	r0, sp, #40	; 0x28
        vtable_ptr_{other.vtable_ptr_}
    2964:	f8cd c020 	str.w	ip, [sp, #32]
        vtable_ptr_->copy_ptr(
    2968:	4631      	mov	r1, r6
    296a:	f7fd fbdf 	bl	12c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    296e:	4622      	mov	r2, r4
    2970:	a908      	add	r1, sp, #32
    2972:	482c      	ldr	r0, [pc, #176]	; (2a24 <loop+0x634>)
    2974:	f002 fe84 	bl	5680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2978:	9b08      	ldr	r3, [sp, #32]
    297a:	a80a      	add	r0, sp, #40	; 0x28
    297c:	68db      	ldr	r3, [r3, #12]
    297e:	4798      	blx	r3
    2980:	9b02      	ldr	r3, [sp, #8]
    2982:	68db      	ldr	r3, [r3, #12]
    }
    2984:	e7e6      	b.n	2954 <loop+0x564>
    return (bpm * 16.0f / inputStep);
    2986:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    298a:	ee27 7a26 	vmul.f32	s14, s14, s13
    298e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    2992:	eebc 7ae6 	vcvt.u32.f32	s14, s13
    2996:	e767      	b.n	2868 <loop+0x478>
    2998:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    299c:	e758      	b.n	2850 <loop+0x460>
    299e:	234b      	movs	r3, #75	; 0x4b
    29a0:	4f17      	ldr	r7, [pc, #92]	; (2a00 <loop+0x610>)
    29a2:	4e18      	ldr	r6, [pc, #96]	; (2a04 <loop+0x614>)
    int total = 0;
    29a4:	2100      	movs	r1, #0
    29a6:	4a16      	ldr	r2, [pc, #88]	; (2a00 <loop+0x610>)
        total |= (1 << i);
    29a8:	f04f 0c01 	mov.w	ip, #1
    29ac:	8233      	strh	r3, [r6, #16]
    cursor_y = y;
    29ae:	2332      	movs	r3, #50	; 0x32
    29b0:	8273      	strh	r3, [r6, #18]
    for (int i=0;i<numOfBs;i++) {
    29b2:	460b      	mov	r3, r1
      if (btState[i]) {
    29b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        total |= (1 << i);
    29b8:	fa0c f503 	lsl.w	r5, ip, r3
    for (int i=0;i<numOfBs;i++) {
    29bc:	3301      	adds	r3, #1
      if (btState[i]) {
    29be:	b100      	cbz	r0, 29c2 <loop+0x5d2>
        total |= (1 << i);
    29c0:	4329      	orrs	r1, r5
    for (int i=0;i<numOfBs;i++) {
    29c2:	2b04      	cmp	r3, #4
    29c4:	d1f6      	bne.n	29b4 <loop+0x5c4>
    29c6:	e71b      	b.n	2800 <loop+0x410>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    29c8:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 29f8 <loop+0x608>
    29cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2a0c <loop+0x61c>
    29d0:	ee84 6b05 	vdiv.f64	d6, d4, d5
    29d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    29d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    29dc:	ee26 7b07 	vmul.f64	d7, d6, d7
    29e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    29e4:	ee17 3a90 	vmov	r3, s15
    return bpmTickInterval(bpm, 16.0, inputStep);
    29e8:	e7a9      	b.n	293e <loop+0x54e>
    29ea:	231f      	movs	r3, #31
    29ec:	e7d9      	b.n	29a2 <loop+0x5b2>
    29ee:	231f      	movs	r3, #31
    29f0:	e6f4      	b.n	27dc <loop+0x3ec>
    29f2:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    29f6:	e78d      	b.n	2914 <loop+0x524>
    29f8:	00000000 	.word	0x00000000
    29fc:	414312d0 	.word	0x414312d0
    2a00:	200025b7 	.word	0x200025b7
    2a04:	20002614 	.word	0x20002614
    2a08:	2000172c 	.word	0x2000172c
    2a0c:	3d800000 	.word	0x3d800000
    2a10:	200002b4 	.word	0x200002b4
    2a14:	20002728 	.word	0x20002728
    2a18:	00002d71 	.word	0x00002d71
    2a1c:	0aaaaaaa 	.word	0x0aaaaaaa
    2a20:	0000013d 	.word	0x0000013d
    2a24:	20001724 	.word	0x20001724
    2a28:	200027a5 	.word	0x200027a5
    2a2c:	200009a0 	.word	0x200009a0

00002a30 <midiClock(HardwareSerial&, int)>:
  serialPort.write(MIDI_CLOCK);
    2a30:	6802      	ldr	r2, [r0, #0]
void midiClock(HardwareSerial &serialPort, int portNum) {
    2a32:	b5f0      	push	{r4, r5, r6, r7, lr}
  serialPort.write(MIDI_CLOCK);
    2a34:	6813      	ldr	r3, [r2, #0]
void midiClock(HardwareSerial &serialPort, int portNum) {
    2a36:	b08d      	sub	sp, #52	; 0x34
    2a38:	460c      	mov	r4, r1
  serialPort.write(MIDI_CLOCK);
    2a3a:	21f8      	movs	r1, #248	; 0xf8
    2a3c:	4798      	blx	r3
    return currentState;
    2a3e:	4b48      	ldr	r3, [pc, #288]	; (2b60 <midiClock(HardwareSerial&, int)+0x130>)
  if(oledControl.isPlaying()) {
    2a40:	781b      	ldrb	r3, [r3, #0]
    if (portNum==1) {
    2a42:	b10b      	cbz	r3, 2a48 <midiClock(HardwareSerial&, int)+0x18>
    2a44:	2c01      	cmp	r4, #1
    2a46:	d001      	beq.n	2a4c <midiClock(HardwareSerial&, int)+0x1c>
}
    2a48:	b00d      	add	sp, #52	; 0x34
    2a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      clockCounter+=1;
    2a4c:	4a45      	ldr	r2, [pc, #276]	; (2b64 <midiClock(HardwareSerial&, int)+0x134>)
      clockCounter=clockCounter%96;
    2a4e:	f104 34aa 	add.w	r4, r4, #2863311530	; 0xaaaaaaaa
      clockCounter+=1;
    2a52:	6813      	ldr	r3, [r2, #0]
    2a54:	3301      	adds	r3, #1
      clockCounter=clockCounter%96;
    2a56:	fba4 1403 	umull	r1, r4, r4, r3
    2a5a:	09a4      	lsrs	r4, r4, #6
    2a5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2a60:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
    2a64:	6014      	str	r4, [r2, #0]
      if (clockCounter==0&&timerFlag==true){
    2a66:	2c00      	cmp	r4, #0
    2a68:	d1ee      	bne.n	2a48 <midiClock(HardwareSerial&, int)+0x18>
    2a6a:	4d3f      	ldr	r5, [pc, #252]	; (2b68 <midiClock(HardwareSerial&, int)+0x138>)
    2a6c:	782b      	ldrb	r3, [r5, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d0ea      	beq.n	2a48 <midiClock(HardwareSerial&, int)+0x18>
        clock2.end();
    2a72:	483e      	ldr	r0, [pc, #248]	; (2b6c <midiClock(HardwareSerial&, int)+0x13c>)
    2a74:	f002 fe86 	bl	5784 <IntervalTimer::end()>
  serialPort.write(MIDI_START);
    2a78:	21fa      	movs	r1, #250	; 0xfa
    2a7a:	483d      	ldr	r0, [pc, #244]	; (2b70 <midiClock(HardwareSerial&, int)+0x140>)
    2a7c:	f002 fcf2 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
    2a80:	21fa      	movs	r1, #250	; 0xfa
    2a82:	483c      	ldr	r0, [pc, #240]	; (2b74 <midiClock(HardwareSerial&, int)+0x144>)
    2a84:	f002 fcee 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
        clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally())); 
    2a88:	4b3b      	ldr	r3, [pc, #236]	; (2b78 <midiClock(HardwareSerial&, int)+0x148>)
        vtable_ptr_ = std::addressof(vt);
    2a8a:	4f3c      	ldr	r7, [pc, #240]	; (2b7c <midiClock(HardwareSerial&, int)+0x14c>)
        total |= (1 << i);
    2a8c:	f04f 0c01 	mov.w	ip, #1
        clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally())); 
    2a90:	ed93 5a00 	vldr	s10, [r3]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    2a94:	4b3a      	ldr	r3, [pc, #232]	; (2b80 <midiClock(HardwareSerial&, int)+0x150>)
    2a96:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    2a9a:	4a3a      	ldr	r2, [pc, #232]	; (2b84 <midiClock(HardwareSerial&, int)+0x154>)
    2a9c:	9302      	str	r3, [sp, #8]
    for (int i=0;i<numOfBs;i++) {
    2a9e:	4623      	mov	r3, r4
        vtable_ptr_ = std::addressof(vt);
    2aa0:	9700      	str	r7, [sp, #0]
      if (btState[i]) {
    2aa2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
        total |= (1 << i);
    2aa6:	fa0c f003 	lsl.w	r0, ip, r3
    for (int i=0;i<numOfBs;i++) {
    2aaa:	3301      	adds	r3, #1
      if (btState[i]) {
    2aac:	b101      	cbz	r1, 2ab0 <midiClock(HardwareSerial&, int)+0x80>
        total |= (1 << i);
    2aae:	4304      	orrs	r4, r0
    for (int i=0;i<numOfBs;i++) {
    2ab0:	2b04      	cmp	r3, #4
    2ab2:	d1f6      	bne.n	2aa2 <midiClock(HardwareSerial&, int)+0x72>
    if (total == 0){
    2ab4:	2c00      	cmp	r4, #0
    2ab6:	d04c      	beq.n	2b52 <midiClock(HardwareSerial&, int)+0x122>
        clock2.begin(clock2Handler, tickSwitcher(ctr.bpm, bGang.tally())); 
    2ab8:	ee07 4a90 	vmov	s15, r4
    2abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (divideState) {
    2ac0:	4b31      	ldr	r3, [pc, #196]	; (2b88 <midiClock(HardwareSerial&, int)+0x158>)
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2ac2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  if (divideState) {
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d031      	beq.n	2b30 <midiClock(HardwareSerial&, int)+0x100>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2acc:	eef3 4a00 	vmov.f32	s9, #48	; 0x41800000  16.0
    2ad0:	ed9f 3b21 	vldr	d3, [pc, #132]	; 2b58 <midiClock(HardwareSerial&, int)+0x128>
    2ad4:	ee84 7aa7 	vdiv.f32	s14, s9, s15
    2ad8:	ee83 6b05 	vdiv.f64	d6, d3, d5
    2adc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2ae0:	ee26 7b07 	vmul.f64	d7, d6, d7
    2ae4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    2ae8:	ee17 3a90 	vmov	r3, s15
		if (period < 0 || period > MAX_PERIOD)
    2aec:	4a27      	ldr	r2, [pc, #156]	; (2b8c <midiClock(HardwareSerial&, int)+0x15c>)
    2aee:	4293      	cmp	r3, r2
    2af0:	d81b      	bhi.n	2b2a <midiClock(HardwareSerial&, int)+0xfa>
			return (24000000 / 1000000) * period - 1;
    2af2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2af6:	00dc      	lsls	r4, r3, #3
    2af8:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    2afa:	2c10      	cmp	r4, #16
    2afc:	d915      	bls.n	2b2a <midiClock(HardwareSerial&, int)+0xfa>
        vtable_ptr_->copy_ptr(
    2afe:	ae02      	add	r6, sp, #8
    2b00:	a808      	add	r0, sp, #32
        vtable_ptr_{other.vtable_ptr_}
    2b02:	9706      	str	r7, [sp, #24]
        vtable_ptr_->copy_ptr(
    2b04:	4631      	mov	r1, r6
    2b06:	f7fd fb11 	bl	12c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    2b0a:	4622      	mov	r2, r4
    2b0c:	a906      	add	r1, sp, #24
    2b0e:	4817      	ldr	r0, [pc, #92]	; (2b6c <midiClock(HardwareSerial&, int)+0x13c>)
    2b10:	f002 fdb6 	bl	5680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2b14:	9b06      	ldr	r3, [sp, #24]
    2b16:	a808      	add	r0, sp, #32
    2b18:	68db      	ldr	r3, [r3, #12]
    2b1a:	4798      	blx	r3
    2b1c:	9b00      	ldr	r3, [sp, #0]
    2b1e:	68db      	ldr	r3, [r3, #12]
    2b20:	4630      	mov	r0, r6
    2b22:	4798      	blx	r3
        timerFlag=false;
    2b24:	2300      	movs	r3, #0
    2b26:	702b      	strb	r3, [r5, #0]
}
    2b28:	e78e      	b.n	2a48 <midiClock(HardwareSerial&, int)+0x18>
    2b2a:	4b19      	ldr	r3, [pc, #100]	; (2b90 <midiClock(HardwareSerial&, int)+0x160>)
    2b2c:	ae02      	add	r6, sp, #8
    2b2e:	e7f7      	b.n	2b20 <midiClock(HardwareSerial&, int)+0xf0>
  return (60000000.0 / 24.0 / bpm) * (normally16 / inputStep);
    2b30:	ed9f 4b09 	vldr	d4, [pc, #36]	; 2b58 <midiClock(HardwareSerial&, int)+0x128>
    2b34:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2b94 <midiClock(HardwareSerial&, int)+0x164>
    2b38:	ee84 6b05 	vdiv.f64	d6, d4, d5
    2b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    2b44:	ee26 7b07 	vmul.f64	d7, d6, d7
    2b48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    2b4c:	ee17 3a90 	vmov	r3, s15
    return bpmTickInterval(bpm, 16.0, inputStep);
    2b50:	e7cc      	b.n	2aec <midiClock(HardwareSerial&, int)+0xbc>
    2b52:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    2b56:	e7b3      	b.n	2ac0 <midiClock(HardwareSerial&, int)+0x90>
    2b58:	00000000 	.word	0x00000000
    2b5c:	414312d0 	.word	0x414312d0
    2b60:	20002728 	.word	0x20002728
    2b64:	20002610 	.word	0x20002610
    2b68:	200027a5 	.word	0x200027a5
    2b6c:	20001724 	.word	0x20001724
    2b70:	20000e78 	.word	0x20000e78
    2b74:	20000e18 	.word	0x20000e18
    2b78:	2000172c 	.word	0x2000172c
    2b7c:	200009a0 	.word	0x200009a0
    2b80:	00002d71 	.word	0x00002d71
    2b84:	200025b7 	.word	0x200025b7
    2b88:	200019a6 	.word	0x200019a6
    2b8c:	0aaaaaaa 	.word	0x0aaaaaaa
    2b90:	0000013d 	.word	0x0000013d
    2b94:	3d800000 	.word	0x3d800000

00002b98 <clock1Handler()>:
void clock1Handler() { midiClock(Serial1, 1); }
    2b98:	2101      	movs	r1, #1
    2b9a:	4801      	ldr	r0, [pc, #4]	; (2ba0 <clock1Handler()+0x8>)
    2b9c:	f7ff bf48 	b.w	2a30 <midiClock(HardwareSerial&, int)>
    2ba0:	20000e18 	.word	0x20000e18

00002ba4 <setup::{lambda(Button2&)#1}::_FUN(Button2&)>:
  encoderButton.setClickHandler([](Button2 &b) {
    2ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return currentState;
    2ba6:	4d6a      	ldr	r5, [pc, #424]	; (2d50 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1ac>)
  encoderButton.setClickHandler([](Button2 &b) {
    2ba8:	b085      	sub	sp, #20
    if (!oledControl.isPlaying()) {
    2baa:	782c      	ldrb	r4, [r5, #0]
    2bac:	2c00      	cmp	r4, #0
    2bae:	d159      	bne.n	2c64 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0xc0>
  serialPort.write(MIDI_START);
    2bb0:	21fa      	movs	r1, #250	; 0xfa
    2bb2:	4868      	ldr	r0, [pc, #416]	; (2d54 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b0>)
    2bb4:	f002 fc56 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
    2bb8:	21fa      	movs	r1, #250	; 0xfa
    2bba:	4867      	ldr	r0, [pc, #412]	; (2d58 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b4>)
        display.fillRect(6, 18, 10, 16, BLACK);
    2bbc:	2710      	movs	r7, #16
  serialPort.write(MIDI_START);
    2bbe:	f002 fc51 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
    if (currentState == PLAY_MODE) {
    2bc2:	782e      	ldrb	r6, [r5, #0]
    2bc4:	2e01      	cmp	r6, #1
    2bc6:	bf14      	ite	ne
    2bc8:	2301      	movne	r3, #1
    2bca:	2300      	moveq	r3, #0
    2bcc:	702b      	strb	r3, [r5, #0]
        display.fillRect(6, 18, 10, 16, BLACK);
    2bce:	f04f 030a 	mov.w	r3, #10
    2bd2:	4d62      	ldr	r5, [pc, #392]	; (2d5c <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b8>)
    switch (currentState) {
    2bd4:	f000 80a1 	beq.w	2d1a <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x176>
        display.fillRect(6, 18, 10, 16, BLACK);
    2bd8:	2212      	movs	r2, #18
    2bda:	2106      	movs	r1, #6
    2bdc:	4628      	mov	r0, r5
        display.drawBitmap(6,18, playIcon, 10, 16, WHITE);
    2bde:	2601      	movs	r6, #1
        display.fillRect(6, 18, 10, 16, BLACK);
    2be0:	e9cd 7400 	strd	r7, r4, [sp]
    2be4:	f000 fd00 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
        display.drawBitmap(6,18, playIcon, 10, 16, WHITE);
    2be8:	230a      	movs	r3, #10
    2bea:	9300      	str	r3, [sp, #0]
    2bec:	4b5c      	ldr	r3, [pc, #368]	; (2d60 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1bc>)
    2bee:	e9cd 7601 	strd	r7, r6, [sp, #4]
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2bf2:	2707      	movs	r7, #7
        display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    2bf4:	4628      	mov	r0, r5
    2bf6:	2212      	movs	r2, #18
    2bf8:	2106      	movs	r1, #6
    2bfa:	f000 fe4d 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2bfe:	4622      	mov	r2, r4
    2c00:	4621      	mov	r1, r4
    2c02:	4628      	mov	r0, r5
    2c04:	2330      	movs	r3, #48	; 0x30
    2c06:	e9cd 7400 	strd	r7, r4, [sp]
    2c0a:	f000 fced 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.fillRect(65, 0, 60, 7, BLACK); //7
    2c0e:	4622      	mov	r2, r4
    2c10:	4628      	mov	r0, r5
    2c12:	233c      	movs	r3, #60	; 0x3c
    2c14:	2141      	movs	r1, #65	; 0x41
    2c16:	e9cd 7400 	strd	r7, r4, [sp]
    2c1a:	f000 fce5 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2c1e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextSize(1);
    2c22:	4631      	mov	r1, r6
    2c24:	4628      	mov	r0, r5
    2c26:	e9c5 4304 	strd	r4, r3, [r5, #16]
    display.print(int(ctr.bpm));
    2c2a:	4c4e      	ldr	r4, [pc, #312]	; (2d64 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c0>)
    display.setTextSize(1);
    2c2c:	f001 f934 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2c30:	2205      	movs	r2, #5
    2c32:	494d      	ldr	r1, [pc, #308]	; (2d68 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c4>)
    2c34:	4628      	mov	r0, r5
    2c36:	f002 fe37 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2c3a:	6821      	ldr	r1, [r4, #0]
    2c3c:	4628      	mov	r0, r5
    2c3e:	f002 fe5b 	bl	58f8 <Print::print(long)>
    cursor_x = x;
    2c42:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    2c44:	2205      	movs	r2, #5
    2c46:	4948      	ldr	r1, [pc, #288]	; (2d68 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c4>)
    2c48:	612b      	str	r3, [r5, #16]
    2c4a:	4628      	mov	r0, r5
    2c4c:	f002 fe2c 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2c50:	6861      	ldr	r1, [r4, #4]
    2c52:	4628      	mov	r0, r5
    2c54:	f002 fe50 	bl	58f8 <Print::print(long)>
    display.display(); // Partial update
    2c58:	4628      	mov	r0, r5
  });
    2c5a:	b005      	add	sp, #20
    2c5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display(); // Partial update
    2c60:	f001 beb6 	b.w	49d0 <Adafruit_SSD1306::display()>
  serialPort.write(MIDI_STOP);
    2c64:	21fc      	movs	r1, #252	; 0xfc
    2c66:	483b      	ldr	r0, [pc, #236]	; (2d54 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b0>)
    2c68:	f002 fbfc 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
    2c6c:	21fc      	movs	r1, #252	; 0xfc
    2c6e:	483a      	ldr	r0, [pc, #232]	; (2d58 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b4>)
        display.fillRect(6, 18, 10, 16, BLACK);
    2c70:	2710      	movs	r7, #16
  serialPort.write(MIDI_STOP);
    2c72:	f002 fbf7 	bl	5464 <HardwareSerialIMXRT::write(unsigned char)>
    if (currentState == PLAY_MODE) {
    2c76:	782e      	ldrb	r6, [r5, #0]
        display.fillRect(6, 18, 10, 16, BLACK);
    2c78:	4c38      	ldr	r4, [pc, #224]	; (2d5c <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1b8>)
    if (currentState == PLAY_MODE) {
    2c7a:	2e01      	cmp	r6, #1
    2c7c:	bf14      	ite	ne
    2c7e:	2301      	movne	r3, #1
    2c80:	2300      	moveq	r3, #0
    2c82:	702b      	strb	r3, [r5, #0]
        display.fillRect(6, 18, 10, 16, BLACK);
    2c84:	f04f 0500 	mov.w	r5, #0
    2c88:	f04f 030a 	mov.w	r3, #10
    switch (currentState) {
    2c8c:	d052      	beq.n	2d34 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x190>
        display.fillRect(6, 18, 10, 16, BLACK);
    2c8e:	2212      	movs	r2, #18
    2c90:	2106      	movs	r1, #6
    2c92:	4620      	mov	r0, r4
        display.drawBitmap(6,18, playIcon, 10, 16, WHITE);
    2c94:	2601      	movs	r6, #1
        display.fillRect(6, 18, 10, 16, BLACK);
    2c96:	e9cd 7500 	strd	r7, r5, [sp]
    2c9a:	f000 fca5 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
        display.drawBitmap(6,18, playIcon, 10, 16, WHITE);
    2c9e:	230a      	movs	r3, #10
    2ca0:	9300      	str	r3, [sp, #0]
    2ca2:	4b2f      	ldr	r3, [pc, #188]	; (2d60 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1bc>)
    2ca4:	e9cd 7601 	strd	r7, r6, [sp, #4]
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2ca8:	2707      	movs	r7, #7
        display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    2caa:	4620      	mov	r0, r4
    2cac:	2212      	movs	r2, #18
    2cae:	2106      	movs	r1, #6
    2cb0:	f000 fdf2 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
    display.fillRect(0, 0, 48, 7, BLACK); //7
    2cb4:	462a      	mov	r2, r5
    2cb6:	4629      	mov	r1, r5
    2cb8:	4620      	mov	r0, r4
    2cba:	2330      	movs	r3, #48	; 0x30
    2cbc:	e9cd 7500 	strd	r7, r5, [sp]
    2cc0:	f000 fc92 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
    display.fillRect(65, 0, 60, 7, BLACK); //7
    2cc4:	462a      	mov	r2, r5
    2cc6:	4620      	mov	r0, r4
    2cc8:	233c      	movs	r3, #60	; 0x3c
    2cca:	2141      	movs	r1, #65	; 0x41
    2ccc:	e9cd 7500 	strd	r7, r5, [sp]
    2cd0:	f000 fc8a 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2cd4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    display.setTextSize(1);
    2cd8:	4631      	mov	r1, r6
    2cda:	4620      	mov	r0, r4
    2cdc:	e9c4 5304 	strd	r5, r3, [r4, #16]
    display.print(int(ctr.bpm));
    2ce0:	4d20      	ldr	r5, [pc, #128]	; (2d64 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c0>)
    display.setTextSize(1);
    2ce2:	f001 f8d9 	bl	3e98 <Adafruit_GFX::setTextSize(unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2ce6:	2205      	movs	r2, #5
    2ce8:	491f      	ldr	r1, [pc, #124]	; (2d68 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c4>)
    2cea:	4620      	mov	r0, r4
    2cec:	f002 fddc 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2cf0:	6829      	ldr	r1, [r5, #0]
    2cf2:	4620      	mov	r0, r4
    2cf4:	f002 fe00 	bl	58f8 <Print::print(long)>
    cursor_x = x;
    2cf8:	2341      	movs	r3, #65	; 0x41
							  return write((const uint8_t *)str, strlen(str)); }
    2cfa:	2205      	movs	r2, #5
    2cfc:	491a      	ldr	r1, [pc, #104]	; (2d68 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c4>)
    2cfe:	6123      	str	r3, [r4, #16]
    2d00:	4620      	mov	r0, r4
    2d02:	f002 fdd1 	bl	58a8 <Print::write(unsigned char const*, unsigned int)>
	size_t print(int n)				{ return print((long)n); }
    2d06:	6869      	ldr	r1, [r5, #4]
    2d08:	4620      	mov	r0, r4
    2d0a:	f002 fdf5 	bl	58f8 <Print::print(long)>
    display.display(); // Partial update
    2d0e:	4620      	mov	r0, r4
  });
    2d10:	b005      	add	sp, #20
    2d12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    display.display(); // Partial update
    2d16:	f001 be5b 	b.w	49d0 <Adafruit_SSD1306::display()>
        display.fillRect(6, 18, 10, 16, BLACK);
    2d1a:	2212      	movs	r2, #18
    2d1c:	2106      	movs	r1, #6
    2d1e:	4628      	mov	r0, r5
    2d20:	e9cd 7400 	strd	r7, r4, [sp]
    2d24:	f000 fc60 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
        display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    2d28:	230a      	movs	r3, #10
    2d2a:	e9cd 7601 	strd	r7, r6, [sp, #4]
    2d2e:	9300      	str	r3, [sp, #0]
    2d30:	4b0e      	ldr	r3, [pc, #56]	; (2d6c <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c8>)
    2d32:	e75e      	b.n	2bf2 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x4e>
        display.fillRect(6, 18, 10, 16, BLACK);
    2d34:	2212      	movs	r2, #18
    2d36:	2106      	movs	r1, #6
    2d38:	4620      	mov	r0, r4
    2d3a:	e9cd 7500 	strd	r7, r5, [sp]
    2d3e:	f000 fc53 	bl	35e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>
        display.drawBitmap(6,18, pauseIcon, 10, 16, WHITE);
    2d42:	230a      	movs	r3, #10
    2d44:	e9cd 7601 	strd	r7, r6, [sp, #4]
    2d48:	9300      	str	r3, [sp, #0]
    2d4a:	4b08      	ldr	r3, [pc, #32]	; (2d6c <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x1c8>)
    2d4c:	e7ac      	b.n	2ca8 <setup::{lambda(Button2&)#1}::_FUN(Button2&)+0x104>
    2d4e:	bf00      	nop
    2d50:	20002728 	.word	0x20002728
    2d54:	20000e18 	.word	0x20000e18
    2d58:	20000e78 	.word	0x20000e78
    2d5c:	20002614 	.word	0x20002614
    2d60:	60001cbc 	.word	0x60001cbc
    2d64:	2000172c 	.word	0x2000172c
    2d68:	200002b4 	.word	0x200002b4
    2d6c:	60001c9c 	.word	0x60001c9c

00002d70 <clock2Handler()>:
  serialPort.write(MIDI_CLOCK);
    2d70:	21f8      	movs	r1, #248	; 0xf8
    2d72:	4801      	ldr	r0, [pc, #4]	; (2d78 <clock2Handler()+0x8>)
    2d74:	f002 bb76 	b.w	5464 <HardwareSerialIMXRT::write(unsigned char)>
    2d78:	20000e78 	.word	0x20000e78

00002d7c <SPIClass::begin()>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2d7c:	6843      	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    2d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2d82:	e9d3 4100 	ldrd	r4, r1, [r3]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2d86:	4d81      	ldr	r5, [pc, #516]	; (2f8c <SPIClass::begin()+0x210>)

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2d88:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2d8c:	6822      	ldr	r2, [r4, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    2d8e:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2d92:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2d96:	497e      	ldr	r1, [pc, #504]	; (2f90 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2d98:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2d9a:	69aa      	ldr	r2, [r5, #24]
    2d9c:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    2d9e:	4a7d      	ldr	r2, [pc, #500]	; (2f94 <SPIClass::begin()+0x218>)
    2da0:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2da2:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2da4:	f890 e010 	ldrb.w	lr, [r0, #16]
    2da8:	4a7b      	ldr	r2, [pc, #492]	; (2f98 <SPIClass::begin()+0x21c>)
    2daa:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2dae:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2db2:	7c31      	ldrb	r1, [r6, #16]
    2db4:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2db8:	6889      	ldr	r1, [r1, #8]
    2dba:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2dbe:	f890 c011 	ldrb.w	ip, [r0, #17]
    2dc2:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2dc6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2dca:	f895 1020 	ldrb.w	r1, [r5, #32]
    2dce:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    2dd2:	6889      	ldr	r1, [r1, #8]
    2dd4:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2dd8:	7c81      	ldrb	r1, [r0, #18]
    2dda:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2dde:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2de2:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
    2de6:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    2dea:	f8db b008 	ldr.w	fp, [fp, #8]
    2dee:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2df2:	f8d4 a000 	ldr.w	sl, [r4]
    2df6:	685f      	ldr	r7, [r3, #4]
    2df8:	ea4a 0a07 	orr.w	sl, sl, r7
    2dfc:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2e00:	7c34      	ldrb	r4, [r6, #16]
    2e02:	f8de e014 	ldr.w	lr, [lr, #20]
    2e06:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    2e0a:	6864      	ldr	r4, [r4, #4]
    2e0c:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2e10:	f895 4020 	ldrb.w	r4, [r5, #32]
    2e14:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
    2e18:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    2e1c:	6864      	ldr	r4, [r4, #4]
    2e1e:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2e22:	6b49      	ldr	r1, [r1, #52]	; 0x34
    2e24:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
    2e28:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    2e2c:	6852      	ldr	r2, [r2, #4]
    2e2e:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2e32:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
    2e36:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2e38:	69da      	ldr	r2, [r3, #28]
    2e3a:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2e3e:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2e40:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    2e44:	601a      	str	r2, [r3, #0]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    2e46:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2e48:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    2e4a:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2e4e:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2e50:	7cc2      	ldrb	r2, [r0, #19]
    2e52:	2a00      	cmp	r2, #0
    2e54:	d031      	beq.n	2eba <SPIClass::begin()+0x13e>
			__disable_irq();
    2e56:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2e58:	7cc3      	ldrb	r3, [r0, #19]
    2e5a:	07dc      	lsls	r4, r3, #31
    2e5c:	d508      	bpl.n	2e70 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2e5e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2e62:	6944      	ldr	r4, [r0, #20]
    2e64:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    2e68:	4022      	ands	r2, r4
    2e6a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2e6c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    2e70:	0799      	lsls	r1, r3, #30
    2e72:	d508      	bpl.n	2e86 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2e74:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2e78:	6984      	ldr	r4, [r0, #24]
    2e7a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    2e7e:	4022      	ands	r2, r4
    2e80:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2e82:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    2e86:	075a      	lsls	r2, r3, #29
    2e88:	d508      	bpl.n	2e9c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2e8a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2e8e:	69c4      	ldr	r4, [r0, #28]
    2e90:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    2e94:	4022      	ands	r2, r4
    2e96:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2e98:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    2e9c:	071f      	lsls	r7, r3, #28
    2e9e:	d508      	bpl.n	2eb2 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2ea0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2ea4:	6a04      	ldr	r4, [r0, #32]
    2ea6:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    2eaa:	4022      	ands	r2, r4
    2eac:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    2eae:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    2eb2:	06de      	lsls	r6, r3, #27
    2eb4:	d455      	bmi.n	2f62 <SPIClass::begin()+0x1e6>
			__enable_irq();
    2eb6:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2eb8:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    2eba:	4c38      	ldr	r4, [pc, #224]	; (2f9c <SPIClass::begin()+0x220>)
    2ebc:	6882      	ldr	r2, [r0, #8]
    2ebe:	42a2      	cmp	r2, r4
    2ec0:	d059      	beq.n	2f76 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    2ec2:	4a32      	ldr	r2, [pc, #200]	; (2f8c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    2ec4:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2ec6:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2ec8:	4935      	ldr	r1, [pc, #212]	; (2fa0 <SPIClass::begin()+0x224>)
    2eca:	f3c2 1601 	ubfx	r6, r2, #4, #2
    2ece:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    2ed2:	4d34      	ldr	r5, [pc, #208]	; (2fa4 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2ed4:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    2ed8:	3201      	adds	r2, #1
    2eda:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    2ede:	42aa      	cmp	r2, r5
    2ee0:	d831      	bhi.n	2f46 <SPIClass::begin()+0x1ca>
    2ee2:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2ee4:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    2ee6:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2ee8:	2103      	movs	r1, #3
		port().CR = 0;
    2eea:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    2eec:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2eee:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2ef0:	2101      	movs	r1, #1
		port().CCR = _ccr;
    2ef2:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2ef4:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2ef6:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    2ef8:	7cc3      	ldrb	r3, [r0, #19]
    2efa:	b313      	cbz	r3, 2f42 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2efc:	07dd      	lsls	r5, r3, #31
    2efe:	d504      	bpl.n	2f0a <SPIClass::begin()+0x18e>
    2f00:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2f02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f06:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    2f0a:	079c      	lsls	r4, r3, #30
    2f0c:	d504      	bpl.n	2f18 <SPIClass::begin()+0x19c>
    2f0e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2f10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f14:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    2f18:	0759      	lsls	r1, r3, #29
    2f1a:	d504      	bpl.n	2f26 <SPIClass::begin()+0x1aa>
    2f1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2f1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f22:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2f26:	071a      	lsls	r2, r3, #28
    2f28:	d504      	bpl.n	2f34 <SPIClass::begin()+0x1b8>
    2f2a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2f2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f30:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2f34:	06db      	lsls	r3, r3, #27
    2f36:	d504      	bpl.n	2f42 <SPIClass::begin()+0x1c6>
    2f38:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2f3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2f3e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	// We should initialize the SPI to be in a known default state.
	beginTransaction(SPISettings());
	endTransaction();
}
    2f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    2f46:	4918      	ldr	r1, [pc, #96]	; (2fa8 <SPIClass::begin()+0x22c>)
    2f48:	fba1 5102 	umull	r5, r1, r1, r2
    2f4c:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    2f4e:	fbb2 f2f1 	udiv	r2, r2, r1
    2f52:	42a2      	cmp	r2, r4
    2f54:	bf88      	it	hi
    2f56:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    2f58:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2f5c:	d30d      	bcc.n	2f7a <SPIClass::begin()+0x1fe>
    2f5e:	4a13      	ldr	r2, [pc, #76]	; (2fac <SPIClass::begin()+0x230>)
				div = d-2;
    2f60:	e7c0      	b.n	2ee4 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2f62:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f66:	6a41      	ldr	r1, [r0, #36]	; 0x24
    2f68:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    2f6c:	400b      	ands	r3, r1
    2f6e:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2f70:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    2f74:	e79f      	b.n	2eb6 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    2f76:	68c2      	ldr	r2, [r0, #12]
    2f78:	e7b5      	b.n	2ee6 <SPIClass::begin()+0x16a>
			if (d > 2) {
    2f7a:	2902      	cmp	r1, #2
    2f7c:	d9b1      	bls.n	2ee2 <SPIClass::begin()+0x166>
				div = d-2;
    2f7e:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2f80:	084c      	lsrs	r4, r1, #1
    2f82:	0222      	lsls	r2, r4, #8
    2f84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    2f88:	430a      	orrs	r2, r1
    2f8a:	e7ab      	b.n	2ee4 <SPIClass::begin()+0x168>
    2f8c:	400fc000 	.word	0x400fc000
    2f90:	e3ffffcf 	.word	0xe3ffffcf
    2f94:	08000010 	.word	0x08000010
    2f98:	200009c0 	.word	0x200009c0
    2f9c:	003d0900 	.word	0x003d0900
    2fa0:	200009b0 	.word	0x200009b0
    2fa4:	003d08ff 	.word	0x003d08ff
    2fa8:	431bde83 	.word	0x431bde83
    2fac:	007f7fff 	.word	0x007f7fff

00002fb0 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    2fb0:	2000      	movs	r0, #0
    2fb2:	4770      	bx	lr

00002fb4 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2fb4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2fb8:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    2fbc:	1a10      	subs	r0, r2, r0
    2fbe:	4770      	bx	lr

00002fc0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2fc0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2fc4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2fc8:	429a      	cmp	r2, r3
    2fca:	d905      	bls.n	2fd8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    2fcc:	1c5a      	adds	r2, r3, #1
    2fce:	4403      	add	r3, r0
    2fd0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2fd4:	7e98      	ldrb	r0, [r3, #26]
    2fd6:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2fd8:	f04f 30ff 	mov.w	r0, #4294967295
	}
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop

00002fe0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2fe0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2fe4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2fe8:	429a      	cmp	r2, r3
    2fea:	d902      	bls.n	2ff2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    2fec:	4418      	add	r0, r3
    2fee:	7e80      	ldrb	r0, [r0, #26]
    2ff0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2ff2:	f04f 30ff 	mov.w	r0, #4294967295
	}
    2ff6:	4770      	bx	lr

00002ff8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    2ff8:	4770      	bx	lr
    2ffa:	bf00      	nop

00002ffc <TwoWire::write(unsigned char)>:
{
    2ffc:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    2ffe:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    3002:	b178      	cbz	r0, 3024 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    3004:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    3008:	2a88      	cmp	r2, #136	; 0x88
    300a:	d903      	bls.n	3014 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    300c:	2201      	movs	r2, #1
			return 0;
    300e:	2000      	movs	r0, #0
    3010:	605a      	str	r2, [r3, #4]
    3012:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    3014:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    3018:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    301a:	441a      	add	r2, r3
    301c:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    3020:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    3024:	4770      	bx	lr
    3026:	bf00      	nop

00003028 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    3028:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    302a:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    302e:	b90c      	cbnz	r4, 3034 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    3030:	4620      	mov	r0, r4
    3032:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    3034:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    3038:	4605      	mov	r5, r0
    303a:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    303e:	42a2      	cmp	r2, r4
    3040:	d80d      	bhi.n	305e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    3042:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    3044:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    3048:	4622      	mov	r2, r4
    304a:	4418      	add	r0, r3
    304c:	f002 ff3a 	bl	5ec4 <memcpy>
		txBufferLength += quantity;
    3050:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    3054:	4620      	mov	r0, r4
		txBufferLength += quantity;
    3056:	4423      	add	r3, r4
    3058:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    305c:	bd38      	pop	{r3, r4, r5, pc}
    305e:	2201      	movs	r2, #1
    3060:	6042      	str	r2, [r0, #4]
    3062:	e7ef      	b.n	3044 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00003064 <TwoWire::force_clock()>:
{
    3064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    3068:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    306c:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    306e:	7e01      	ldrb	r1, [r0, #24]
{
    3070:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    3072:	7e43      	ldrb	r3, [r0, #25]
{
    3074:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    3076:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    307a:	4a38      	ldr	r2, [pc, #224]	; (315c <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    307c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3080:	4f37      	ldr	r7, [pc, #220]	; (3160 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    3082:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    3084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    3088:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    308c:	0109      	lsls	r1, r1, #4
    308e:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    3090:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    3094:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    3098:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    309c:	011b      	lsls	r3, r3, #4
    309e:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    30a0:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    30a2:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    30a6:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    30aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    30ae:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    30b0:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    30b2:	492c      	ldr	r1, [pc, #176]	; (3164 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    30b4:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    30b6:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    30ba:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    30bc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    30c0:	686b      	ldr	r3, [r5, #4]
    30c2:	4333      	orrs	r3, r6
    30c4:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    30c6:	4b28      	ldr	r3, [pc, #160]	; (3168 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    30c8:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    30ca:	683a      	ldr	r2, [r7, #0]
    30cc:	fba3 3202 	umull	r3, r2, r3, r2
    30d0:	0c92      	lsrs	r2, r2, #18
    30d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    30d6:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    30d8:	684b      	ldr	r3, [r1, #4]
    30da:	1b1b      	subs	r3, r3, r4
    30dc:	429a      	cmp	r2, r3
    30de:	d8fb      	bhi.n	30d8 <TwoWire::force_clock()+0x74>
    30e0:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    30e4:	4a1f      	ldr	r2, [pc, #124]	; (3164 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    30e6:	f8df e080 	ldr.w	lr, [pc, #128]	; 3168 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    30ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    30ee:	4203      	tst	r3, r0
    30f0:	d002      	beq.n	30f8 <TwoWire::force_clock()+0x94>
    30f2:	68ab      	ldr	r3, [r5, #8]
    30f4:	4233      	tst	r3, r6
    30f6:	d12f      	bne.n	3158 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    30f8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    30fc:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    30fe:	6839      	ldr	r1, [r7, #0]
    3100:	fbae 3101 	umull	r3, r1, lr, r1
    3104:	0c89      	lsrs	r1, r1, #18
    3106:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    310a:	6853      	ldr	r3, [r2, #4]
    310c:	1b1b      	subs	r3, r3, r4
    310e:	4299      	cmp	r1, r3
    3110:	d8fb      	bhi.n	310a <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    3112:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    3116:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3118:	6839      	ldr	r1, [r7, #0]
    311a:	fbae 3101 	umull	r3, r1, lr, r1
    311e:	0c89      	lsrs	r1, r1, #18
    3120:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3124:	6853      	ldr	r3, [r2, #4]
    3126:	1b1b      	subs	r3, r3, r4
    3128:	4299      	cmp	r1, r3
    312a:	d8fb      	bhi.n	3124 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    312c:	f1bc 0c01 	subs.w	ip, ip, #1
    3130:	d1db      	bne.n	30ea <TwoWire::force_clock()+0x86>
	bool ret = false;
    3132:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    3134:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    3138:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    313a:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    313e:	68db      	ldr	r3, [r3, #12]
    3140:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    3144:	f899 3019 	ldrb.w	r3, [r9, #25]
    3148:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    314c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    3150:	6013      	str	r3, [r2, #0]
}
    3152:	b003      	add	sp, #12
    3154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    3158:	2001      	movs	r0, #1
    315a:	e7eb      	b.n	3134 <TwoWire::force_clock()+0xd0>
    315c:	200009c0 	.word	0x200009c0
    3160:	20000e04 	.word	0x20000e04
    3164:	e0001000 	.word	0xe0001000
    3168:	431bde83 	.word	0x431bde83

0000316c <TwoWire::wait_idle()>:
	return systick_millis_count;
    316c:	4a0e      	ldr	r2, [pc, #56]	; (31a8 <TwoWire::wait_idle()+0x3c>)
{
    316e:	b510      	push	{r4, lr}
    3170:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    3172:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    3174:	e005      	b.n	3182 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    3176:	01db      	lsls	r3, r3, #7
    3178:	d407      	bmi.n	318a <TwoWire::wait_idle()+0x1e>
    317a:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    317c:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    317e:	2b10      	cmp	r3, #16
    3180:	d808      	bhi.n	3194 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    3182:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    3184:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3188:	d1f5      	bne.n	3176 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    318a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    318e:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    3190:	6163      	str	r3, [r4, #20]
}
    3192:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    3194:	f7ff ff66 	bl	3064 <TwoWire::force_clock()>
    3198:	2800      	cmp	r0, #0
    319a:	d0fa      	beq.n	3192 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    319c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    31a0:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    31a2:	6163      	str	r3, [r4, #20]
	return true;
    31a4:	e7f5      	b.n	3192 <TwoWire::wait_idle()+0x26>
    31a6:	bf00      	nop
    31a8:	2000277c 	.word	0x2000277c

000031ac <TwoWire::endTransmission(unsigned char)>:
{
    31ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    31b0:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    31b4:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    31b6:	f1ba 0f00 	cmp.w	sl, #0
    31ba:	d04f      	beq.n	325c <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    31bc:	4681      	mov	r9, r0
    31be:	4688      	mov	r8, r1
    31c0:	f7ff ffd4 	bl	316c <TwoWire::wait_idle()>
    31c4:	2800      	cmp	r0, #0
    31c6:	d049      	beq.n	325c <TwoWire::endTransmission(unsigned char)+0xb0>
    31c8:	4e37      	ldr	r6, [pc, #220]	; (32a8 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    31ca:	2400      	movs	r4, #0
    31cc:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    31ce:	e018      	b.n	3202 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    31d0:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    31d2:	0519      	lsls	r1, r3, #20
    31d4:	d451      	bmi.n	327a <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    31d6:	04da      	lsls	r2, r3, #19
    31d8:	d455      	bmi.n	3286 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    31da:	0558      	lsls	r0, r3, #21
    31dc:	d459      	bmi.n	3292 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    31de:	0499      	lsls	r1, r3, #18
    31e0:	d441      	bmi.n	3266 <TwoWire::endTransmission(unsigned char)+0xba>
    31e2:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    31e4:	1bd2      	subs	r2, r2, r7
    31e6:	2a32      	cmp	r2, #50	; 0x32
    31e8:	d83d      	bhi.n	3266 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    31ea:	4554      	cmp	r4, sl
    31ec:	d907      	bls.n	31fe <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    31ee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    31f0:	0752      	lsls	r2, r2, #29
    31f2:	d104      	bne.n	31fe <TwoWire::endTransmission(unsigned char)+0x52>
    31f4:	059b      	lsls	r3, r3, #22
    31f6:	d455      	bmi.n	32a4 <TwoWire::endTransmission(unsigned char)+0xf8>
    31f8:	f1b8 0f00 	cmp.w	r8, #0
    31fc:	d052      	beq.n	32a4 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    31fe:	f004 f95b 	bl	74b8 <yield>
		if (tx_index <= tx_len) {
    3202:	4554      	cmp	r4, sl
    3204:	d8e4      	bhi.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    3206:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    3208:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    320a:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    320e:	d4df      	bmi.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
    3210:	e013      	b.n	323a <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    3212:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    3216:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    3218:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    321a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    321e:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    3220:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    3222:	d01e      	beq.n	3262 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    3224:	458a      	cmp	sl, r1
				fifo_used++;
    3226:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    322a:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    322e:	d90e      	bls.n	324e <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3230:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    3234:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3236:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    3238:	d0ca      	beq.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    323a:	2101      	movs	r1, #1
				if (tx_index == 0) {
    323c:	2c00      	cmp	r4, #0
    323e:	d0e8      	beq.n	3212 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3240:	4621      	mov	r1, r4
				fifo_used++;
    3242:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3244:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    3246:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    3248:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    324c:	d8f0      	bhi.n	3230 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    324e:	f1b8 0f00 	cmp.w	r8, #0
    3252:	d0bd      	beq.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
    3254:	f44f 7300 	mov.w	r3, #512	; 0x200
    3258:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    325a:	e7b9      	b.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    325c:	2004      	movs	r0, #4
}
    325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    3262:	2401      	movs	r4, #1
    3264:	e7b4      	b.n	31d0 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3266:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    3268:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    326c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    326e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3272:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    3274:	662a      	str	r2, [r5, #96]	; 0x60
}
    3276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    327a:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    327c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    327e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    3282:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    3284:	e7eb      	b.n	325e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3286:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    3288:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    328a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    328e:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    3290:	e7e5      	b.n	325e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    3292:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    3294:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    3298:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    329a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    329e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    32a0:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    32a2:	e7dc      	b.n	325e <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    32a4:	2000      	movs	r0, #0
    32a6:	e7da      	b.n	325e <TwoWire::endTransmission(unsigned char)+0xb2>
    32a8:	2000277c 	.word	0x2000277c

000032ac <TwoWire::isr()>:
{
    32ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    32ae:	6906      	ldr	r6, [r0, #16]
{
    32b0:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    32b2:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    32b6:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    32ba:	d001      	beq.n	32c0 <TwoWire::isr()+0x14>
    32bc:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    32c0:	07a8      	lsls	r0, r5, #30
    32c2:	d50b      	bpl.n	32dc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    32c4:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    32c8:	0411      	lsls	r1, r2, #16
    32ca:	d53d      	bpl.n	3348 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    32cc:	2300      	movs	r3, #0
    32ce:	2101      	movs	r1, #1
    32d0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    32d4:	4423      	add	r3, r4
    32d6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    32da:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    32dc:	07ea      	lsls	r2, r5, #31
    32de:	d510      	bpl.n	3302 <TwoWire::isr()+0x56>
		if (!transmitting) {
    32e0:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    32e4:	b1f7      	cbz	r7, 3324 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    32e6:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    32ea:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    32ee:	42bb      	cmp	r3, r7
    32f0:	d926      	bls.n	3340 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    32f2:	1c7b      	adds	r3, r7, #1
    32f4:	4427      	add	r7, r4
    32f6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    32fa:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    32fe:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    3302:	05ab      	lsls	r3, r5, #22
    3304:	d50d      	bpl.n	3322 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    3306:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    330a:	b118      	cbz	r0, 3314 <TwoWire::isr()+0x68>
    330c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    3310:	b103      	cbz	r3, 3314 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    3312:	4798      	blx	r3
		rxBufferIndex = 0;
    3314:	2300      	movs	r3, #0
    3316:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    331a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    331e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    3322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    3324:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    3328:	b103      	cbz	r3, 332c <TwoWire::isr()+0x80>
				(*user_onRequest)();
    332a:	4798      	blx	r3
			txBufferIndex = 0;
    332c:	2300      	movs	r3, #0
    332e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    3332:	2301      	movs	r3, #1
    3334:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    3338:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    333c:	42bb      	cmp	r3, r7
    333e:	d8d8      	bhi.n	32f2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    3340:	2300      	movs	r3, #0
    3342:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    3346:	e7dc      	b.n	3302 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    3348:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    334c:	2b87      	cmp	r3, #135	; 0x87
    334e:	d8c5      	bhi.n	32dc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    3350:	1c59      	adds	r1, r3, #1
    3352:	b2c9      	uxtb	r1, r1
    3354:	e7be      	b.n	32d4 <TwoWire::isr()+0x28>
    3356:	bf00      	nop

00003358 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    3358:	4801      	ldr	r0, [pc, #4]	; (3360 <lpi2c1_isr()+0x8>)
    335a:	f7ff bfa7 	b.w	32ac <TwoWire::isr()>
    335e:	bf00      	nop
    3360:	20000ed8 	.word	0x20000ed8

00003364 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    3364:	4801      	ldr	r0, [pc, #4]	; (336c <lpi2c3_isr()+0x8>)
    3366:	f7ff bfa1 	b.w	32ac <TwoWire::isr()>
    336a:	bf00      	nop
    336c:	20001018 	.word	0x20001018

00003370 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    3370:	4801      	ldr	r0, [pc, #4]	; (3378 <lpi2c4_isr()+0x8>)
    3372:	f7ff bf9b 	b.w	32ac <TwoWire::isr()>
    3376:	bf00      	nop
    3378:	20001158 	.word	0x20001158

0000337c <TwoWire::setClock(unsigned long)>:
{
    337c:	b410      	push	{r4}
	if (frequency < 400000) {
    337e:	4c14      	ldr	r4, [pc, #80]	; (33d0 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    3380:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    3382:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    3384:	42a1      	cmp	r1, r4
	port->MCR = 0;
    3386:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    3388:	d814      	bhi.n	33b4 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    338a:	4c12      	ldr	r4, [pc, #72]	; (33d4 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    338c:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    338e:	4912      	ldr	r1, [pc, #72]	; (33d8 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    3390:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    3394:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    3396:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    3398:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    339a:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    339c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    339e:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    33a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    33a4:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    33a6:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    33a8:	6218      	str	r0, [r3, #32]
}
    33aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    33ae:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    33b0:	611a      	str	r2, [r3, #16]
}
    33b2:	4770      	bx	lr
	} else if (frequency < 1000000) {
    33b4:	4809      	ldr	r0, [pc, #36]	; (33dc <TwoWire::setClock(unsigned long)+0x60>)
    33b6:	4281      	cmp	r1, r0
    33b8:	d907      	bls.n	33ca <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    33ba:	4c09      	ldr	r4, [pc, #36]	; (33e0 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    33bc:	4809      	ldr	r0, [pc, #36]	; (33e4 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    33be:	490a      	ldr	r1, [pc, #40]	; (33e8 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    33c0:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    33c2:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    33c4:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    33c6:	62d9      	str	r1, [r3, #44]	; 0x2c
    33c8:	e7e8      	b.n	339c <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    33ca:	4c08      	ldr	r4, [pc, #32]	; (33ec <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    33cc:	4808      	ldr	r0, [pc, #32]	; (33f0 <TwoWire::setClock(unsigned long)+0x74>)
    33ce:	e7f6      	b.n	33be <TwoWire::setClock(unsigned long)+0x42>
    33d0:	00061a7f 	.word	0x00061a7f
    33d4:	1928373b 	.word	0x1928373b
    33d8:	05050bb8 	.word	0x05050bb8
    33dc:	000f423f 	.word	0x000f423f
    33e0:	0407090a 	.word	0x0407090a
    33e4:	01010960 	.word	0x01010960
    33e8:	00057f00 	.word	0x00057f00
    33ec:	0c121a1c 	.word	0x0c121a1c
    33f0:	02020e10 	.word	0x02020e10

000033f4 <Print::flush()>:
	virtual void flush()				{ }
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop

000033f8 <Adafruit_GFX::startWrite()>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop

000033fc <Adafruit_GFX::writePixel(short, short, unsigned short)>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
    33fc:	b410      	push	{r4}
  drawPixel(x, y, color);
    33fe:	6804      	ldr	r4, [r0, #0]
    3400:	6924      	ldr	r4, [r4, #16]
    3402:	46a4      	mov	ip, r4
}
    3404:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
    3408:	4760      	bx	ip
    340a:	bf00      	nop

0000340c <Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
    340c:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
    340e:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    3410:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
    3414:	9502      	str	r5, [sp, #8]
    3416:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3418:	46a4      	mov	ip, r4
}
    341a:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
    341c:	4760      	bx	ip
    341e:	bf00      	nop

00003420 <Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
    3420:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
    3422:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
    3424:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
    3428:	9502      	str	r5, [sp, #8]
    342a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    342c:	46a4      	mov	ip, r4
}
    342e:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
    3430:	4760      	bx	ip
    3432:	bf00      	nop

00003434 <Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
    3434:	b430      	push	{r4, r5}
    3436:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
    343a:	6804      	ldr	r4, [r0, #0]
    343c:	9502      	str	r5, [sp, #8]
                                 uint16_t color) {
    343e:	f8bd 500c 	ldrh.w	r5, [sp, #12]
  fillRect(x, y, w, h, color);
    3442:	9503      	str	r5, [sp, #12]
    3444:	6c24      	ldr	r4, [r4, #64]	; 0x40
    3446:	46a4      	mov	ip, r4
}
    3448:	bc30      	pop	{r4, r5}
  fillRect(x, y, w, h, color);
    344a:	4760      	bx	ip

0000344c <Adafruit_GFX::fillScreen(unsigned short)>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
    344c:	b530      	push	{r4, r5, lr}
  fillRect(0, 0, _width, _height, color);
    344e:	2200      	movs	r2, #0
void Adafruit_GFX::fillScreen(uint16_t color) {
    3450:	b083      	sub	sp, #12
  fillRect(0, 0, _width, _height, color);
    3452:	6804      	ldr	r4, [r0, #0]
    3454:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    3458:	9101      	str	r1, [sp, #4]
    345a:	4611      	mov	r1, r2
    345c:	9500      	str	r5, [sp, #0]
    345e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    3462:	6c24      	ldr	r4, [r4, #64]	; 0x40
    3464:	47a0      	blx	r4
}
    3466:	b003      	add	sp, #12
    3468:	bd30      	pop	{r4, r5, pc}
    346a:	bf00      	nop

0000346c <Adafruit_GFX::invertDisplay(bool)>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
    346c:	4770      	bx	lr
    346e:	bf00      	nop

00003470 <Adafruit_GFX::setRotation(unsigned char)>:
  rotation = (x & 3);
    3470:	f001 0303 	and.w	r3, r1, #3
    3474:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
    3476:	07cb      	lsls	r3, r1, #31
    3478:	d405      	bmi.n	3486 <Adafruit_GFX::setRotation(unsigned char)+0x16>
    _width = WIDTH;
    347a:	8902      	ldrh	r2, [r0, #8]
    _height = HEIGHT;
    347c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    _width = WIDTH;
    3480:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    3482:	81c3      	strh	r3, [r0, #14]
}
    3484:	4770      	bx	lr
    _width = HEIGHT;
    3486:	8942      	ldrh	r2, [r0, #10]
    _height = WIDTH;
    3488:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    _width = HEIGHT;
    348c:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
    348e:	81c3      	strh	r3, [r0, #14]
}
    3490:	4770      	bx	lr
    3492:	bf00      	nop

00003494 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    3494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3498:	461c      	mov	r4, r3
    349a:	460b      	mov	r3, r1
  startWrite();
    349c:	6801      	ldr	r1, [r0, #0]
                                 uint16_t color) {
    349e:	b084      	sub	sp, #16
    34a0:	4e11      	ldr	r6, [pc, #68]	; (34e8 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x54>)
    34a2:	4605      	mov	r5, r0
  startWrite();
    34a4:	694f      	ldr	r7, [r1, #20]
                                 uint16_t color) {
    34a6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    34aa:	42b7      	cmp	r7, r6
    34ac:	d110      	bne.n	34d0 <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x3c>
  writeLine(x, y, x, y + h - 1, color);
    34ae:	3c01      	subs	r4, #1
    34b0:	f8cd 8004 	str.w	r8, [sp, #4]
    34b4:	4628      	mov	r0, r5
    34b6:	4414      	add	r4, r2
    34b8:	b224      	sxth	r4, r4
    34ba:	9400      	str	r4, [sp, #0]
    34bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    34be:	4619      	mov	r1, r3
    34c0:	47a0      	blx	r4
  endWrite();
    34c2:	682b      	ldr	r3, [r5, #0]
    34c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34c6:	42b3      	cmp	r3, r6
    34c8:	d109      	bne.n	34de <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x4a>
}
    34ca:	b004      	add	sp, #16
    34cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
  startWrite();
    34d4:	47b8      	blx	r7
  writeLine(x, y, x, y + h - 1, color);
    34d6:	6829      	ldr	r1, [r5, #0]
    34d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    34dc:	e7e7      	b.n	34ae <Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)+0x1a>
  endWrite();
    34de:	4628      	mov	r0, r5
}
    34e0:	b004      	add	sp, #16
    34e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
    34e6:	4718      	bx	r3
    34e8:	000033f9 	.word	0x000033f9

000034ec <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)>:
                                 uint16_t color) {
    34ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  startWrite();
    34f0:	6805      	ldr	r5, [r0, #0]
                                 uint16_t color) {
    34f2:	b085      	sub	sp, #20
    34f4:	4e12      	ldr	r6, [pc, #72]	; (3540 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x54>)
    34f6:	4604      	mov	r4, r0
  startWrite();
    34f8:	696f      	ldr	r7, [r5, #20]
                                 uint16_t color) {
    34fa:	4699      	mov	r9, r3
    34fc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    3500:	42b7      	cmp	r7, r6
    3502:	d110      	bne.n	3526 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x3a>
  writeLine(x, y, x + w - 1, y, color);
    3504:	f109 33ff 	add.w	r3, r9, #4294967295
    3508:	f8cd 8004 	str.w	r8, [sp, #4]
    350c:	9200      	str	r2, [sp, #0]
    350e:	4620      	mov	r0, r4
    3510:	440b      	add	r3, r1
    3512:	6aad      	ldr	r5, [r5, #40]	; 0x28
    3514:	b21b      	sxth	r3, r3
    3516:	47a8      	blx	r5
  endWrite();
    3518:	6823      	ldr	r3, [r4, #0]
    351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    351c:	42b3      	cmp	r3, r6
    351e:	d109      	bne.n	3534 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x48>
}
    3520:	b005      	add	sp, #20
    3522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3526:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
    352a:	47b8      	blx	r7
  writeLine(x, y, x + w - 1, y, color);
    352c:	6825      	ldr	r5, [r4, #0]
    352e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    3532:	e7e7      	b.n	3504 <Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)+0x18>
  endWrite();
    3534:	4620      	mov	r0, r4
}
    3536:	b005      	add	sp, #20
    3538:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  endWrite();
    353c:	4718      	bx	r3
    353e:	bf00      	nop
    3540:	000033f9 	.word	0x000033f9

00003544 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    3544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (x0 == x1) {
    3548:	4299      	cmp	r1, r3
                            uint16_t color) {
    354a:	b087      	sub	sp, #28
    354c:	4605      	mov	r5, r0
    354e:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
    3552:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
  if (x0 == x1) {
    3556:	d022      	beq.n	359e <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x5a>
  } else if (y0 == y1) {
    3558:	42a2      	cmp	r2, r4
    355a:	d012      	beq.n	3582 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x3e>
    startWrite();
    355c:	6807      	ldr	r7, [r0, #0]
    355e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 35e4 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0xa0>
    3562:	f8d7 9014 	ldr.w	r9, [r7, #20]
    3566:	45c1      	cmp	r9, r8
    3568:	d133      	bne.n	35d2 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x8e>
    writeLine(x0, y0, x1, y1, color);
    356a:	4628      	mov	r0, r5
    356c:	e9cd 4600 	strd	r4, r6, [sp]
    3570:	6abc      	ldr	r4, [r7, #40]	; 0x28
    3572:	47a0      	blx	r4
    endWrite();
    3574:	682b      	ldr	r3, [r5, #0]
    3576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3578:	4543      	cmp	r3, r8
    357a:	d125      	bne.n	35c8 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x84>
}
    357c:	b007      	add	sp, #28
    357e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x0 > x1)
    3582:	4299      	cmp	r1, r3
    3584:	dc1c      	bgt.n	35c0 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x7c>
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    3586:	960e      	str	r6, [sp, #56]	; 0x38
    3588:	3301      	adds	r3, #1
    358a:	682c      	ldr	r4, [r5, #0]
    358c:	4628      	mov	r0, r5
    358e:	1a5b      	subs	r3, r3, r1
    3590:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    3592:	b21b      	sxth	r3, r3
    3594:	46a4      	mov	ip, r4
}
    3596:	b007      	add	sp, #28
    3598:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    359c:	4760      	bx	ip
    if (y0 > y1)
    359e:	42a2      	cmp	r2, r4
    35a0:	dd02      	ble.n	35a8 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x64>
    35a2:	4613      	mov	r3, r2
    35a4:	4622      	mov	r2, r4
    35a6:	461c      	mov	r4, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
    35a8:	960e      	str	r6, [sp, #56]	; 0x38
    35aa:	1c63      	adds	r3, r4, #1
    35ac:	682c      	ldr	r4, [r5, #0]
    35ae:	4628      	mov	r0, r5
    35b0:	1a9b      	subs	r3, r3, r2
    35b2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    35b4:	b21b      	sxth	r3, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    35b6:	46a4      	mov	ip, r4
}
    35b8:	b007      	add	sp, #28
    35ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
    35be:	4760      	bx	ip
    if (x0 > x1)
    35c0:	4608      	mov	r0, r1
    35c2:	4619      	mov	r1, r3
    35c4:	4603      	mov	r3, r0
    35c6:	e7de      	b.n	3586 <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x42>
    endWrite();
    35c8:	4628      	mov	r0, r5
}
    35ca:	b007      	add	sp, #28
    35cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
    35d0:	4718      	bx	r3
    35d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    35d6:	9103      	str	r1, [sp, #12]
    startWrite();
    35d8:	47c8      	blx	r9
    writeLine(x0, y0, x1, y1, color);
    35da:	682f      	ldr	r7, [r5, #0]
    35dc:	9903      	ldr	r1, [sp, #12]
    35de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    35e2:	e7c2      	b.n	356a <Adafruit_GFX::drawLine(short, short, short, short, unsigned short)+0x26>
    35e4:	000033f9 	.word	0x000033f9

000035e8 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)>:
  startWrite();
    35e8:	f8d0 c000 	ldr.w	ip, [r0]
                            uint16_t color) {
    35ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35f0:	4690      	mov	r8, r2
    35f2:	461f      	mov	r7, r3
    35f4:	4a1f      	ldr	r2, [pc, #124]	; (3674 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    35f6:	b083      	sub	sp, #12
  startWrite();
    35f8:	f8dc 3014 	ldr.w	r3, [ip, #20]
                            uint16_t color) {
    35fc:	4605      	mov	r5, r0
    35fe:	460c      	mov	r4, r1
    3600:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
    3604:	4293      	cmp	r3, r2
    3606:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
    360a:	d129      	bne.n	3660 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x78>
  for (int16_t i = x; i < x + w; i++) {
    360c:	4427      	add	r7, r4
    360e:	42a7      	cmp	r7, r4
    3610:	dd1e      	ble.n	3650 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    3612:	f8df b064 	ldr.w	fp, [pc, #100]	; 3678 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x90>
    3616:	e00a      	b.n	362e <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
    3618:	3401      	adds	r4, #1
  drawFastVLine(x, y, h, color);
    361a:	f8cd a000 	str.w	sl, [sp]
    361e:	f8dc 6038 	ldr.w	r6, [ip, #56]	; 0x38
    3622:	b224      	sxth	r4, r4
    3624:	47b0      	blx	r6
  endWrite();
    3626:	f8d5 c000 	ldr.w	ip, [r5]
  for (int16_t i = x; i < x + w; i++) {
    362a:	42bc      	cmp	r4, r7
    362c:	da10      	bge.n	3650 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x68>
    writeFastVLine(i, y, h, color);
    362e:	f8dc 6020 	ldr.w	r6, [ip, #32]
  drawFastVLine(x, y, h, color);
    3632:	464b      	mov	r3, r9
    3634:	4642      	mov	r2, r8
    3636:	4621      	mov	r1, r4
    3638:	455e      	cmp	r6, fp
    363a:	4628      	mov	r0, r5
    363c:	d0ec      	beq.n	3618 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x30>
    363e:	3401      	adds	r4, #1
    writeFastVLine(i, y, h, color);
    3640:	f8cd a000 	str.w	sl, [sp]
    3644:	47b0      	blx	r6
  endWrite();
    3646:	f8d5 c000 	ldr.w	ip, [r5]
    364a:	b224      	sxth	r4, r4
  for (int16_t i = x; i < x + w; i++) {
    364c:	42bc      	cmp	r4, r7
    364e:	dbee      	blt.n	362e <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x46>
  endWrite();
    3650:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    3654:	4a07      	ldr	r2, [pc, #28]	; (3674 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x8c>)
    3656:	4293      	cmp	r3, r2
    3658:	d106      	bne.n	3668 <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x80>
}
    365a:	b003      	add	sp, #12
    365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  startWrite();
    3660:	4798      	blx	r3
  endWrite();
    3662:	f8d5 c000 	ldr.w	ip, [r5]
    3666:	e7d1      	b.n	360c <Adafruit_GFX::fillRect(short, short, short, short, unsigned short)+0x24>
    3668:	4628      	mov	r0, r5
}
    366a:	b003      	add	sp, #12
    366c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    3670:	4718      	bx	r3
    3672:	bf00      	nop
    3674:	000033f9 	.word	0x000033f9
    3678:	0000340d 	.word	0x0000340d

0000367c <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)>:
                            uint16_t color) {
    367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3680:	461d      	mov	r5, r3
  startWrite();
    3682:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
    3684:	4616      	mov	r6, r2
    3686:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3744 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xc8>
  startWrite();
    368a:	695a      	ldr	r2, [r3, #20]
                            uint16_t color) {
    368c:	b085      	sub	sp, #20
    368e:	4604      	mov	r4, r0
    3690:	454a      	cmp	r2, r9
    3692:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
    3696:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
    369a:	d143      	bne.n	3724 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xa8>
  writeFastHLine(x, y, w, color);
    369c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    36a0:	4632      	mov	r2, r6
    36a2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 3748 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xcc>
    36a6:	4620      	mov	r0, r4
  drawFastHLine(x, y, w, color);
    36a8:	9700      	str	r7, [sp, #0]
    36aa:	45d3      	cmp	fp, sl
  writeFastHLine(x, y, w, color);
    36ac:	9103      	str	r1, [sp, #12]
  drawFastHLine(x, y, w, color);
    36ae:	bf08      	it	eq
    36b0:	f8d3 b03c 	ldreq.w	fp, [r3, #60]	; 0x3c
  writeFastHLine(x, y, w, color);
    36b4:	462b      	mov	r3, r5
    36b6:	47d8      	blx	fp
  writeFastHLine(x, y + h - 1, w, color);
    36b8:	6823      	ldr	r3, [r4, #0]
    36ba:	f108 32ff 	add.w	r2, r8, #4294967295
  writeFastHLine(x, y, w, color);
    36be:	9903      	ldr	r1, [sp, #12]
  writeFastHLine(x, y + h - 1, w, color);
    36c0:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    36c4:	4432      	add	r2, r6
  drawFastHLine(x, y, w, color);
    36c6:	9700      	str	r7, [sp, #0]
    36c8:	45d3      	cmp	fp, sl
  writeFastHLine(x, y + h - 1, w, color);
    36ca:	b212      	sxth	r2, r2
    36cc:	d134      	bne.n	3738 <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xbc>
  drawFastHLine(x, y, w, color);
    36ce:	f8d3 a03c 	ldr.w	sl, [r3, #60]	; 0x3c
    36d2:	4620      	mov	r0, r4
    36d4:	9103      	str	r1, [sp, #12]
    36d6:	462b      	mov	r3, r5
    36d8:	47d0      	blx	sl
}
    36da:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x, y, h, color);
    36dc:	6823      	ldr	r3, [r4, #0]
    36de:	4632      	mov	r2, r6
    36e0:	f8df a068 	ldr.w	sl, [pc, #104]	; 374c <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xd0>
    36e4:	4620      	mov	r0, r4
    36e6:	f8d3 b020 	ldr.w	fp, [r3, #32]
  writeFastVLine(x + w - 1, y, h, color);
    36ea:	3d01      	subs	r5, #1
  drawFastVLine(x, y, h, color);
    36ec:	9700      	str	r7, [sp, #0]
    36ee:	45d3      	cmp	fp, sl
  writeFastVLine(x, y, h, color);
    36f0:	9103      	str	r1, [sp, #12]
  drawFastVLine(x, y, h, color);
    36f2:	bf08      	it	eq
    36f4:	f8d3 b038 	ldreq.w	fp, [r3, #56]	; 0x38
  writeFastVLine(x, y, h, color);
    36f8:	4643      	mov	r3, r8
    36fa:	47d8      	blx	fp
    36fc:	9903      	ldr	r1, [sp, #12]
  writeFastVLine(x + w - 1, y, h, color);
    36fe:	6822      	ldr	r2, [r4, #0]
  drawFastVLine(x, y, h, color);
    3700:	4643      	mov	r3, r8
  writeFastVLine(x + w - 1, y, h, color);
    3702:	440d      	add	r5, r1
    3704:	4620      	mov	r0, r4
    3706:	b229      	sxth	r1, r5
    3708:	6a15      	ldr	r5, [r2, #32]
  drawFastVLine(x, y, h, color);
    370a:	9700      	str	r7, [sp, #0]
    370c:	4555      	cmp	r5, sl
    370e:	bf08      	it	eq
    3710:	6b95      	ldreq	r5, [r2, #56]	; 0x38
  writeFastVLine(x + w - 1, y, h, color);
    3712:	4632      	mov	r2, r6
    3714:	47a8      	blx	r5
  endWrite();
    3716:	6823      	ldr	r3, [r4, #0]
    3718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    371a:	454b      	cmp	r3, r9
    371c:	d107      	bne.n	372e <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0xb2>
}
    371e:	b005      	add	sp, #20
    3720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3724:	9103      	str	r1, [sp, #12]
  startWrite();
    3726:	4790      	blx	r2
  writeFastHLine(x, y, w, color);
    3728:	6823      	ldr	r3, [r4, #0]
    372a:	9903      	ldr	r1, [sp, #12]
    372c:	e7b6      	b.n	369c <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x20>
  endWrite();
    372e:	4620      	mov	r0, r4
}
    3730:	b005      	add	sp, #20
    3732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    3736:	4718      	bx	r3
  writeFastHLine(x, y + h - 1, w, color);
    3738:	9103      	str	r1, [sp, #12]
    373a:	462b      	mov	r3, r5
    373c:	4620      	mov	r0, r4
    373e:	47d8      	blx	fp
    3740:	9903      	ldr	r1, [sp, #12]
    3742:	e7cb      	b.n	36dc <Adafruit_GFX::drawRect(short, short, short, short, unsigned short)+0x60>
    3744:	000033f9 	.word	0x000033f9
    3748:	00003421 	.word	0x00003421
    374c:	0000340d 	.word	0x0000340d

00003750 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)>:
                             uint16_t color) {
    3750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3754:	ed2d 8b02 	vpush	{d8}
    3758:	b085      	sub	sp, #20
    375a:	4698      	mov	r8, r3
    375c:	460c      	mov	r4, r1
    375e:	4616      	mov	r6, r2
    3760:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    3764:	eba8 0a01 	sub.w	sl, r8, r1
                             uint16_t color) {
    3768:	4607      	mov	r7, r0
    376a:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    376e:	ebac 0302 	sub.w	r3, ip, r2
    3772:	f1ba 0f00 	cmp.w	sl, #0
    3776:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
    377a:	bfb8      	it	lt
    377c:	f1ca 0a00 	rsblt	sl, sl, #0
    3780:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
  if (steep) {
    3784:	4555      	cmp	r5, sl
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    3786:	9500      	str	r5, [sp, #0]
  if (steep) {
    3788:	dd66      	ble.n	3858 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x108>
    378a:	4641      	mov	r1, r8
    378c:	4620      	mov	r0, r4
    378e:	4622      	mov	r2, r4
    3790:	4643      	mov	r3, r8
    _swap_int16_t(x0, y0);
    3792:	4634      	mov	r4, r6
    _swap_int16_t(x1, y1);
    3794:	46e0      	mov	r8, ip
    _swap_int16_t(x0, y0);
    3796:	4606      	mov	r6, r0
    _swap_int16_t(x1, y1);
    3798:	468c      	mov	ip, r1
  if (x0 > x1) {
    379a:	4544      	cmp	r4, r8
    379c:	dd08      	ble.n	37b0 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x60>
    379e:	4615      	mov	r5, r2
    37a0:	4630      	mov	r0, r6
    37a2:	4621      	mov	r1, r4
    37a4:	461a      	mov	r2, r3
    _swap_int16_t(y0, y1);
    37a6:	4666      	mov	r6, ip
  if (x0 > x1) {
    37a8:	4644      	mov	r4, r8
    37aa:	462b      	mov	r3, r5
    _swap_int16_t(y0, y1);
    37ac:	4684      	mov	ip, r0
  if (x0 > x1) {
    37ae:	4688      	mov	r8, r1
  dy = abs(y1 - y0);
    37b0:	1a9b      	subs	r3, r3, r2
  dx = x1 - x0;
    37b2:	eba8 0204 	sub.w	r2, r8, r4
  dy = abs(y1 - y0);
    37b6:	2b00      	cmp	r3, #0
  int16_t err = dx / 2;
    37b8:	b215      	sxth	r5, r2
  dx = x1 - x0;
    37ba:	b292      	uxth	r2, r2
  dy = abs(y1 - y0);
    37bc:	bfb8      	it	lt
    37be:	425b      	neglt	r3, r3
  int16_t err = dx / 2;
    37c0:	2d00      	cmp	r5, #0
  dx = x1 - x0;
    37c2:	9201      	str	r2, [sp, #4]
  int16_t err = dx / 2;
    37c4:	bfb8      	it	lt
    37c6:	3501      	addlt	r5, #1
  if (y0 < y1) {
    37c8:	45b4      	cmp	ip, r6
  int16_t err = dx / 2;
    37ca:	ea4f 0565 	mov.w	r5, r5, asr #1
  if (y0 < y1) {
    37ce:	dd3a      	ble.n	3846 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xf6>
    ystep = 1;
    37d0:	2201      	movs	r2, #1
    37d2:	9202      	str	r2, [sp, #8]
    err -= dy;
    37d4:	b29b      	uxth	r3, r3
    37d6:	ee08 7a10 	vmov	s16, r7
    37da:	9303      	str	r3, [sp, #12]
    37dc:	e01e      	b.n	381c <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xcc>
      writePixel(y0, x0, color);
    37de:	ee18 1a10 	vmov	r1, s16
    37e2:	4f20      	ldr	r7, [pc, #128]	; (3864 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    37e4:	ee18 0a10 	vmov	r0, s16
      writePixel(y0, x0, color);
    37e8:	f8d1 c000 	ldr.w	ip, [r1]
  drawPixel(x, y, color);
    37ec:	4631      	mov	r1, r6
      writePixel(y0, x0, color);
    37ee:	f8dc b018 	ldr.w	fp, [ip, #24]
    37f2:	45bb      	cmp	fp, r7
    37f4:	d12e      	bne.n	3854 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x104>
  drawPixel(x, y, color);
    37f6:	f8dc b010 	ldr.w	fp, [ip, #16]
    37fa:	47d8      	blx	fp
    err -= dy;
    37fc:	9b03      	ldr	r3, [sp, #12]
    37fe:	3401      	adds	r4, #1
      y0 += ystep;
    3800:	9a02      	ldr	r2, [sp, #8]
    err -= dy;
    3802:	1aeb      	subs	r3, r5, r3
      err += dx;
    3804:	9901      	ldr	r1, [sp, #4]
      y0 += ystep;
    3806:	18b2      	adds	r2, r6, r2
    3808:	b224      	sxth	r4, r4
    err -= dy;
    380a:	b21d      	sxth	r5, r3
    380c:	b29b      	uxth	r3, r3
    if (err < 0) {
    380e:	2d00      	cmp	r5, #0
      err += dx;
    3810:	440b      	add	r3, r1
    if (err < 0) {
    3812:	da01      	bge.n	3818 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xc8>
      y0 += ystep;
    3814:	b216      	sxth	r6, r2
      err += dx;
    3816:	b21d      	sxth	r5, r3
  for (; x0 <= x1; x0++) {
    3818:	45a0      	cmp	r8, r4
    381a:	db16      	blt.n	384a <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xfa>
    if (steep) {
    381c:	9b00      	ldr	r3, [sp, #0]
  drawPixel(x, y, color);
    381e:	4622      	mov	r2, r4
    3820:	4621      	mov	r1, r4
    if (steep) {
    3822:	4553      	cmp	r3, sl
  drawPixel(x, y, color);
    3824:	464b      	mov	r3, r9
    if (steep) {
    3826:	dcda      	bgt.n	37de <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x8e>
      writePixel(x0, y0, color);
    3828:	ee18 3a10 	vmov	r3, s16
    382c:	4f0d      	ldr	r7, [pc, #52]	; (3864 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x114>)
  drawPixel(x, y, color);
    382e:	4632      	mov	r2, r6
    3830:	ee18 0a10 	vmov	r0, s16
      writePixel(x0, y0, color);
    3834:	f8d3 c000 	ldr.w	ip, [r3]
  drawPixel(x, y, color);
    3838:	464b      	mov	r3, r9
      writePixel(x0, y0, color);
    383a:	f8dc b018 	ldr.w	fp, [ip, #24]
    383e:	45bb      	cmp	fp, r7
    3840:	d0d9      	beq.n	37f6 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xa6>
    3842:	47d8      	blx	fp
    3844:	e7da      	b.n	37fc <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
  for (; x0 <= x1; x0++) {
    3846:	4544      	cmp	r4, r8
    3848:	dd08      	ble.n	385c <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x10c>
}
    384a:	b005      	add	sp, #20
    384c:	ecbd 8b02 	vpop	{d8}
    3850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      writePixel(y0, x0, color);
    3854:	47d8      	blx	fp
    3856:	e7d1      	b.n	37fc <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0xac>
    3858:	4663      	mov	r3, ip
    385a:	e79e      	b.n	379a <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x4a>
    ystep = -1;
    385c:	f04f 32ff 	mov.w	r2, #4294967295
    3860:	9202      	str	r2, [sp, #8]
    3862:	e7b7      	b.n	37d4 <Adafruit_GFX::writeLine(short, short, short, short, unsigned short)+0x84>
    3864:	000033fd 	.word	0x000033fd

00003868 <Adafruit_GFX::Adafruit_GFX(short, short)>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    3868:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
    386a:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
    386c:	4a08      	ldr	r2, [pc, #32]	; (3890 <Adafruit_GFX::Adafruit_GFX(short, short)+0x28>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    386e:	8101      	strh	r1, [r0, #8]
  _width = WIDTH;
    3870:	8181      	strh	r1, [r0, #12]
  textcolor = textbgcolor = 0xFFFF;
    3872:	f04f 31ff 	mov.w	r1, #4294967295
  textsize_x = textsize_y = 1;
    3876:	6182      	str	r2, [r0, #24]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
    3878:	4a06      	ldr	r2, [pc, #24]	; (3894 <Adafruit_GFX::Adafruit_GFX(short, short)+0x2c>)
    387a:	b410      	push	{r4}
	constexpr Print() : write_error(0) {}
    387c:	2400      	movs	r4, #0
    387e:	6002      	str	r2, [r0, #0]
    3880:	6044      	str	r4, [r0, #4]
  _cp437 = false;
    3882:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
    3884:	6204      	str	r4, [r0, #32]
  textcolor = textbgcolor = 0xFFFF;
    3886:	e9c0 4104 	strd	r4, r1, [r0, #16]
}
    388a:	f85d 4b04 	ldr.w	r4, [sp], #4
    388e:	4770      	bx	lr
    3890:	01000101 	.word	0x01000101
    3894:	20000854 	.word	0x20000854

00003898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>:
                              int16_t w, int16_t h, uint16_t color) {
    3898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    389c:	b087      	sub	sp, #28
    389e:	4682      	mov	sl, r0
  startWrite();
    38a0:	6800      	ldr	r0, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
    38a2:	4617      	mov	r7, r2
    38a4:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    38a8:	4688      	mov	r8, r1
    38aa:	9305      	str	r3, [sp, #20]
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    38ac:	1df3      	adds	r3, r6, #7
    38ae:	4a35      	ldr	r2, [pc, #212]	; (3984 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
                              int16_t w, int16_t h, uint16_t color) {
    38b0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    38b4:	bf48      	it	mi
    38b6:	f106 030e 	addmi.w	r3, r6, #14
                              int16_t w, int16_t h, uint16_t color) {
    38ba:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    38be:	10db      	asrs	r3, r3, #3
    38c0:	9303      	str	r3, [sp, #12]
  startWrite();
    38c2:	6943      	ldr	r3, [r0, #20]
    38c4:	4293      	cmp	r3, r2
    38c6:	d153      	bne.n	3970 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xd8>
  for (int16_t j = 0; j < h; j++, y++) {
    38c8:	2c00      	cmp	r4, #0
    38ca:	dd45      	ble.n	3958 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xc0>
    38cc:	443c      	add	r4, r7
    38ce:	4684      	mov	ip, r0
    38d0:	b2a3      	uxth	r3, r4
    38d2:	9304      	str	r3, [sp, #16]
    38d4:	2300      	movs	r3, #0
    38d6:	461d      	mov	r5, r3
    38d8:	9302      	str	r3, [sp, #8]
    for (int16_t i = 0; i < w; i++) {
    38da:	2e00      	cmp	r6, #0
    38dc:	dd31      	ble.n	3942 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    38de:	9a05      	ldr	r2, [sp, #20]
    for (int16_t i = 0; i < w; i++) {
    38e0:	2300      	movs	r3, #0
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    38e2:	9902      	ldr	r1, [sp, #8]
    38e4:	440a      	add	r2, r1
    38e6:	9201      	str	r2, [sp, #4]
    38e8:	e00a      	b.n	3900 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
        b <<= 1;
    38ea:	b2ed      	uxtb	r5, r5
        writePixel(x + i, y, color);
    38ec:	eb04 0108 	add.w	r1, r4, r8
      if (b & 0x80)
    38f0:	f015 0f80 	tst.w	r5, #128	; 0x80
    38f4:	b209      	sxth	r1, r1
    38f6:	d113      	bne.n	3920 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x88>
    for (int16_t i = 0; i < w; i++) {
    38f8:	3401      	adds	r4, #1
    38fa:	b223      	sxth	r3, r4
    38fc:	42b3      	cmp	r3, r6
    38fe:	d020      	beq.n	3942 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xaa>
      if (i & 7)
    3900:	f013 0f07 	tst.w	r3, #7
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    3904:	ea4f 02e3 	mov.w	r2, r3, asr #3
    3908:	b29c      	uxth	r4, r3
        b <<= 1;
    390a:	ea4f 0545 	mov.w	r5, r5, lsl #1
      if (i & 7)
    390e:	d1ec      	bne.n	38ea <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x52>
        b = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
    3910:	9b01      	ldr	r3, [sp, #4]
    3912:	eb04 0108 	add.w	r1, r4, r8
    3916:	5c9d      	ldrb	r5, [r3, r2]
        writePixel(x + i, y, color);
    3918:	b209      	sxth	r1, r1
      if (b & 0x80)
    391a:	f015 0f80 	tst.w	r5, #128	; 0x80
    391e:	d0eb      	beq.n	38f8 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
        writePixel(x + i, y, color);
    3920:	f8dc 9018 	ldr.w	r9, [ip, #24]
  drawPixel(x, y, color);
    3924:	465b      	mov	r3, fp
    3926:	4818      	ldr	r0, [pc, #96]	; (3988 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xf0>)
    3928:	463a      	mov	r2, r7
    392a:	4581      	cmp	r9, r0
    392c:	d11b      	bne.n	3966 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xce>
    392e:	3401      	adds	r4, #1
    3930:	f8dc 9010 	ldr.w	r9, [ip, #16]
    3934:	4650      	mov	r0, sl
    3936:	47c8      	blx	r9
  endWrite();
    3938:	f8da c000 	ldr.w	ip, [sl]
    for (int16_t i = 0; i < w; i++) {
    393c:	b223      	sxth	r3, r4
    393e:	42b3      	cmp	r3, r6
    3940:	d1de      	bne.n	3900 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x68>
  for (int16_t j = 0; j < h; j++, y++) {
    3942:	3701      	adds	r7, #1
    3944:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    3948:	4413      	add	r3, r2
    394a:	9a04      	ldr	r2, [sp, #16]
    394c:	9302      	str	r3, [sp, #8]
    394e:	b2bb      	uxth	r3, r7
    3950:	b23f      	sxth	r7, r7
    3952:	429a      	cmp	r2, r3
    3954:	d1c1      	bne.n	38da <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x42>
    3956:	4660      	mov	r0, ip
  endWrite();
    3958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    395a:	4a0a      	ldr	r2, [pc, #40]	; (3984 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xec>)
    395c:	4293      	cmp	r3, r2
    395e:	d10c      	bne.n	397a <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0xe2>
}
    3960:	b007      	add	sp, #28
    3962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        writePixel(x + i, y, color);
    3966:	4650      	mov	r0, sl
    3968:	47c8      	blx	r9
  endWrite();
    396a:	f8da c000 	ldr.w	ip, [sl]
    396e:	e7c3      	b.n	38f8 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x60>
  startWrite();
    3970:	4650      	mov	r0, sl
    3972:	4798      	blx	r3
  endWrite();
    3974:	f8da 0000 	ldr.w	r0, [sl]
    3978:	e7a6      	b.n	38c8 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)+0x30>
    397a:	4650      	mov	r0, sl
}
    397c:	b007      	add	sp, #28
    397e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
    3982:	4718      	bx	r3
    3984:	000033f9 	.word	0x000033f9
    3988:	000033fd 	.word	0x000033fd

0000398c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
                            uint8_t size_y) {
    398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3990:	ed2d 8b02 	vpush	{d8}
    3994:	b091      	sub	sp, #68	; 0x44
    3996:	4691      	mov	r9, r2
    3998:	4682      	mov	sl, r0
    399a:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    399e:	9104      	str	r1, [sp, #16]
    39a0:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
    39a4:	9205      	str	r2, [sp, #20]
    39a6:	910e      	str	r1, [sp, #56]	; 0x38
  if (!gfxFont) { // 'Classic' built-in font
    39a8:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
    39aa:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
    39ae:	f8bd b074 	ldrh.w	fp, [sp, #116]	; 0x74
    39b2:	9102      	str	r1, [sp, #8]
  if (!gfxFont) { // 'Classic' built-in font
    39b4:	2a00      	cmp	r2, #0
    39b6:	f000 80b3 	beq.w	3b20 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x194>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    39ba:	7a11      	ldrb	r1, [r2, #8]
  return gfxFont->bitmap;
    39bc:	e9d2 2400 	ldrd	r2, r4, [r2]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    39c0:	1a5b      	subs	r3, r3, r1
    if (size_x > 1 || size_y > 1) {
    39c2:	9902      	ldr	r1, [sp, #8]
  return gfxFont->bitmap;
    39c4:	9203      	str	r2, [sp, #12]
  return gfxFont->glyph + c;
    39c6:	b2db      	uxtb	r3, r3
    if (size_x > 1 || size_y > 1) {
    39c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    39ca:	4311      	orrs	r1, r2
  return gfxFont->glyph + c;
    39cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    39d0:	f834 7033 	ldrh.w	r7, [r4, r3, lsl #3]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    39d4:	f992 0005 	ldrsb.w	r0, [r2, #5]
    if (size_x > 1 || size_y > 1) {
    39d8:	2901      	cmp	r1, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    39da:	78d3      	ldrb	r3, [r2, #3]
    39dc:	f892 8002 	ldrb.w	r8, [r2, #2]
           yo = pgm_read_byte(&glyph->yOffset);
    39e0:	f992 4006 	ldrsb.w	r4, [r2, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
    39e4:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t xo = pgm_read_byte(&glyph->xOffset),
    39e6:	9008      	str	r0, [sp, #32]
    if (size_x > 1 || size_y > 1) {
    39e8:	d85a      	bhi.n	3aa0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x114>
    int16_t xo16 = 0, yo16 = 0;
    39ea:	2300      	movs	r3, #0
    39ec:	930b      	str	r3, [sp, #44]	; 0x2c
    39ee:	9309      	str	r3, [sp, #36]	; 0x24
    startWrite();
    39f0:	4ba3      	ldr	r3, [pc, #652]	; (3c80 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    39f2:	f8da 2000 	ldr.w	r2, [sl]
    39f6:	4619      	mov	r1, r3
    39f8:	930f      	str	r3, [sp, #60]	; 0x3c
    39fa:	6953      	ldr	r3, [r2, #20]
    39fc:	428b      	cmp	r3, r1
    39fe:	f040 817d 	bne.w	3cfc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x370>
    for (yy = 0; yy < h; yy++) {
    3a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a04:	2b00      	cmp	r3, #0
    3a06:	d078      	beq.n	3afa <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x16e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3a08:	fa1f f389 	uxth.w	r3, r9
    for (yy = 0; yy < h; yy++) {
    3a0c:	46d3      	mov	fp, sl
    3a0e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3a12:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + xo + xx, y + yo + yy, color);
    3a14:	4423      	add	r3, r4
    3a16:	930d      	str	r3, [sp, #52]	; 0x34
    for (yy = 0; yy < h; yy++) {
    3a18:	2300      	movs	r3, #0
    3a1a:	461d      	mov	r5, r3
    3a1c:	9307      	str	r3, [sp, #28]
    3a1e:	9306      	str	r3, [sp, #24]
      for (xx = 0; xx < w; xx++) {
    3a20:	f1b8 0f00 	cmp.w	r8, #0
    3a24:	d061      	beq.n	3aea <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x15e>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3a26:	9906      	ldr	r1, [sp, #24]
    3a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3a2a:	9c02      	ldr	r4, [sp, #8]
    3a2c:	18cb      	adds	r3, r1, r3
    3a2e:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a30:	9e07      	ldr	r6, [sp, #28]
    3a32:	fb03 0304 	mla	r3, r3, r4, r0
      for (xx = 0; xx < w; xx++) {
    3a36:	2400      	movs	r4, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3a38:	b21b      	sxth	r3, r3
    3a3a:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
    3a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3a40:	440b      	add	r3, r1
    3a42:	b21b      	sxth	r3, r3
    3a44:	ee08 3a90 	vmov	s17, r3
    3a48:	e005      	b.n	3a56 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xca>
      for (xx = 0; xx < w; xx++) {
    3a4a:	3401      	adds	r4, #1
        bits <<= 1;
    3a4c:	006d      	lsls	r5, r5, #1
      for (xx = 0; xx < w; xx++) {
    3a4e:	b2e4      	uxtb	r4, r4
        bits <<= 1;
    3a50:	b2ed      	uxtb	r5, r5
      for (xx = 0; xx < w; xx++) {
    3a52:	45a0      	cmp	r8, r4
    3a54:	d945      	bls.n	3ae2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x156>
        if (!(bit++ & 7)) {
    3a56:	4633      	mov	r3, r6
    3a58:	3601      	adds	r6, #1
    3a5a:	0759      	lsls	r1, r3, #29
    3a5c:	b2f6      	uxtb	r6, r6
    3a5e:	d103      	bne.n	3a68 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xdc>
          bits = pgm_read_byte(&bitmap[bo++]);
    3a60:	1c7b      	adds	r3, r7, #1
    3a62:	9903      	ldr	r1, [sp, #12]
    3a64:	5dcd      	ldrb	r5, [r1, r7]
    3a66:	b29f      	uxth	r7, r3
        if (bits & 0x80) {
    3a68:	062b      	lsls	r3, r5, #24
    3a6a:	d5ee      	bpl.n	3a4a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
          if (size_x == 1 && size_y == 1) {
    3a6c:	f1b9 0f01 	cmp.w	r9, #1
    3a70:	d11b      	bne.n	3aaa <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
    3a72:	9b02      	ldr	r3, [sp, #8]
    3a74:	2b01      	cmp	r3, #1
    3a76:	d118      	bne.n	3aaa <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x11e>
            writePixel(x + xo + xx, y + yo + yy, color);
    3a78:	9b08      	ldr	r3, [sp, #32]
    3a7a:	4658      	mov	r0, fp
    3a7c:	9904      	ldr	r1, [sp, #16]
    3a7e:	f8d2 a018 	ldr.w	sl, [r2, #24]
    3a82:	1859      	adds	r1, r3, r1
    3a84:	4b7f      	ldr	r3, [pc, #508]	; (3c84 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    3a86:	4421      	add	r1, r4
    3a88:	459a      	cmp	sl, r3
    3a8a:	9b05      	ldr	r3, [sp, #20]
  drawPixel(x, y, color);
    3a8c:	bf08      	it	eq
    3a8e:	f8d2 a010 	ldreq.w	sl, [r2, #16]
            writePixel(x + xo + xx, y + yo + yy, color);
    3a92:	b209      	sxth	r1, r1
    3a94:	ee18 2a90 	vmov	r2, s17
    3a98:	47d0      	blx	sl
    endWrite();
    3a9a:	f8db 2000 	ldr.w	r2, [fp]
    3a9e:	e7d4      	b.n	3a4a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
      xo16 = xo;
    3aa0:	b203      	sxth	r3, r0
    3aa2:	9309      	str	r3, [sp, #36]	; 0x24
      yo16 = yo;
    3aa4:	b223      	sxth	r3, r4
    3aa6:	930b      	str	r3, [sp, #44]	; 0x2c
    3aa8:	e7a2      	b.n	39f0 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x64>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3aac:	f8d2 a01c 	ldr.w	sl, [r2, #28]
    3ab0:	1919      	adds	r1, r3, r4
    3ab2:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 3c8c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>
    3ab6:	9b04      	ldr	r3, [sp, #16]
    3ab8:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
    3abc:	45f2      	cmp	sl, lr
    3abe:	fb01 3109 	mla	r1, r1, r9, r3
    3ac2:	fa0f f389 	sxth.w	r3, r9
  fillRect(x, y, w, h, color);
    3ac6:	9000      	str	r0, [sp, #0]
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3ac8:	b209      	sxth	r1, r1
    3aca:	d120      	bne.n	3b0e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x182>
  fillRect(x, y, w, h, color);
    3acc:	9805      	ldr	r0, [sp, #20]
    3ace:	9001      	str	r0, [sp, #4]
    3ad0:	4658      	mov	r0, fp
    3ad2:	f8d2 a040 	ldr.w	sl, [r2, #64]	; 0x40
    3ad6:	ee18 2a10 	vmov	r2, s16
    3ada:	47d0      	blx	sl
    endWrite();
    3adc:	f8db 2000 	ldr.w	r2, [fp]
}
    3ae0:	e7b3      	b.n	3a4a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
        if (!(bit++ & 7)) {
    3ae2:	9b07      	ldr	r3, [sp, #28]
    3ae4:	4443      	add	r3, r8
    3ae6:	b2db      	uxtb	r3, r3
    3ae8:	9307      	str	r3, [sp, #28]
    for (yy = 0; yy < h; yy++) {
    3aea:	9b06      	ldr	r3, [sp, #24]
    3aec:	990a      	ldr	r1, [sp, #40]	; 0x28
    3aee:	3301      	adds	r3, #1
    3af0:	b2db      	uxtb	r3, r3
    3af2:	4299      	cmp	r1, r3
    3af4:	9306      	str	r3, [sp, #24]
    3af6:	d893      	bhi.n	3a20 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x94>
    3af8:	46da      	mov	sl, fp
    endWrite();
    3afa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3afc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3afe:	4293      	cmp	r3, r2
    3b00:	f040 80f5 	bne.w	3cee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x362>
}
    3b04:	b011      	add	sp, #68	; 0x44
    3b06:	ecbd 8b02 	vpop	{d8}
    3b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
    3b0e:	9a05      	ldr	r2, [sp, #20]
    3b10:	4658      	mov	r0, fp
    3b12:	9201      	str	r2, [sp, #4]
    3b14:	ee18 2a10 	vmov	r2, s16
    3b18:	47d0      	blx	sl
    endWrite();
    3b1a:	f8db 2000 	ldr.w	r2, [fp]
    3b1e:	e794      	b.n	3a4a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0xbe>
    if ((x >= _width) ||              // Clip right
    3b20:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    3b24:	9904      	ldr	r1, [sp, #16]
    3b26:	428a      	cmp	r2, r1
    3b28:	ddec      	ble.n	3b04 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    3b2a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    3b2e:	454a      	cmp	r2, r9
    3b30:	dde8      	ble.n	3b04 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((x + 6 * size_x - 1) < 0) || // Clip left
    3b32:	2206      	movs	r2, #6
    3b34:	980e      	ldr	r0, [sp, #56]	; 0x38
    3b36:	fb12 1200 	smlabb	r2, r2, r0, r1
        (y >= _height) ||             // Clip bottom
    3b3a:	2a00      	cmp	r2, #0
    3b3c:	dde2      	ble.n	3b04 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
        ((y + 8 * size_y - 1) < 0))   // Clip top
    3b3e:	9a02      	ldr	r2, [sp, #8]
    3b40:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
    3b44:	2a00      	cmp	r2, #0
    3b46:	dddd      	ble.n	3b04 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    if (!_cp437 && (c >= 176))
    3b48:	f89a 201c 	ldrb.w	r2, [sl, #28]
    3b4c:	2a01      	cmp	r2, #1
    3b4e:	d003      	beq.n	3b58 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
    3b50:	2baf      	cmp	r3, #175	; 0xaf
    3b52:	d901      	bls.n	3b58 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
      c++; // Handle 'classic' charset behavior
    3b54:	3301      	adds	r3, #1
    3b56:	b2db      	uxtb	r3, r3
    startWrite();
    3b58:	4a49      	ldr	r2, [pc, #292]	; (3c80 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>)
    3b5a:	f8da 0000 	ldr.w	r0, [sl]
    3b5e:	4611      	mov	r1, r2
    3b60:	920f      	str	r2, [sp, #60]	; 0x3c
    3b62:	6942      	ldr	r2, [r0, #20]
    3b64:	428a      	cmp	r2, r1
    3b66:	f040 80f0 	bne.w	3d4a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3be>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3b6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    3b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b72:	f8cd 900c 	str.w	r9, [sp, #12]
    3b76:	46d1      	mov	r9, sl
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3b78:	4611      	mov	r1, r2
    3b7a:	920b      	str	r2, [sp, #44]	; 0x2c
    3b7c:	4a42      	ldr	r2, [pc, #264]	; (3c88 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2fc>)
    3b7e:	f8cd b010 	str.w	fp, [sp, #16]
    3b82:	18d3      	adds	r3, r2, r3
    3b84:	460a      	mov	r2, r1
    3b86:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3b8a:	9308      	str	r3, [sp, #32]
    3b8c:	1d4b      	adds	r3, r1, #5
    3b8e:	990e      	ldr	r1, [sp, #56]	; 0x38
    3b90:	b29b      	uxth	r3, r3
    3b92:	9f02      	ldr	r7, [sp, #8]
    3b94:	468b      	mov	fp, r1
    3b96:	9309      	str	r3, [sp, #36]	; 0x24
    3b98:	b28b      	uxth	r3, r1
    3b9a:	930a      	str	r3, [sp, #40]	; 0x28
    3b9c:	4603      	mov	r3, r0
    3b9e:	e9cd 2206 	strd	r2, r2, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    3ba2:	9a08      	ldr	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3ba4:	2408      	movs	r4, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    3ba6:	2500      	movs	r5, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3ba8:	46ca      	mov	sl, r9
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    3baa:	f812 6b01 	ldrb.w	r6, [r2], #1
    3bae:	9208      	str	r2, [sp, #32]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3bb0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    3bb4:	ee08 2a10 	vmov	s16, r2
    3bb8:	fa0f f28b 	sxth.w	r2, fp
    3bbc:	ee08 2a90 	vmov	s17, r2
    3bc0:	e01c      	b.n	3bfc <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x270>
          if (size_x == 1 && size_y == 1)
    3bc2:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, color);
    3bc6:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    3bc8:	d136      	bne.n	3c38 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
    3bca:	2f01      	cmp	r7, #1
    3bcc:	d134      	bne.n	3c38 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2ac>
            writePixel(x + i, y + j, color);
    3bce:	f8d3 9018 	ldr.w	r9, [r3, #24]
    3bd2:	18aa      	adds	r2, r5, r2
    3bd4:	482b      	ldr	r0, [pc, #172]	; (3c84 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    3bd6:	b212      	sxth	r2, r2
    3bd8:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    3bdc:	4581      	cmp	r9, r0
    3bde:	4650      	mov	r0, sl
  drawPixel(x, y, color);
    3be0:	bf08      	it	eq
    3be2:	f8d3 9010 	ldreq.w	r9, [r3, #16]
            writePixel(x + i, y + j, color);
    3be6:	4643      	mov	r3, r8
    3be8:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    3bea:	f8da 3000 	ldr.w	r3, [sl]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
    3bee:	3c01      	subs	r4, #1
    3bf0:	3501      	adds	r5, #1
    3bf2:	0876      	lsrs	r6, r6, #1
    3bf4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    3bf8:	b26d      	sxtb	r5, r5
    3bfa:	d049      	beq.n	3c90 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x304>
        if (line & 1) {
    3bfc:	07f0      	lsls	r0, r6, #31
    3bfe:	d4e0      	bmi.n	3bc2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x236>
        } else if (bg != color) {
    3c00:	9804      	ldr	r0, [sp, #16]
    3c02:	4580      	cmp	r8, r0
    3c04:	d0f3      	beq.n	3bee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
          if (size_x == 1 && size_y == 1)
    3c06:	f1bb 0f01 	cmp.w	fp, #1
            writePixel(x + i, y + j, bg);
    3c0a:	9a03      	ldr	r2, [sp, #12]
          if (size_x == 1 && size_y == 1)
    3c0c:	d12a      	bne.n	3c64 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
    3c0e:	2f01      	cmp	r7, #1
    3c10:	d128      	bne.n	3c64 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2d8>
            writePixel(x + i, y + j, bg);
    3c12:	18aa      	adds	r2, r5, r2
    3c14:	f8d3 9018 	ldr.w	r9, [r3, #24]
    3c18:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
    3c1c:	fa0f fc82 	sxth.w	ip, r2
    3c20:	4a18      	ldr	r2, [pc, #96]	; (3c84 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f8>)
    3c22:	4591      	cmp	r9, r2
    3c24:	d16f      	bne.n	3d06 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x37a>
  drawPixel(x, y, color);
    3c26:	f8d3 9010 	ldr.w	r9, [r3, #16]
    3c2a:	4662      	mov	r2, ip
    3c2c:	4603      	mov	r3, r0
    3c2e:	4650      	mov	r0, sl
    3c30:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    3c32:	f8da 3000 	ldr.w	r3, [sl]
}
    3c36:	e7da      	b.n	3bee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
    3c38:	f8d3 901c 	ldr.w	r9, [r3, #28]
    3c3c:	fb05 2207 	mla	r2, r5, r7, r2
    3c40:	4812      	ldr	r0, [pc, #72]	; (3c8c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    3c42:	b239      	sxth	r1, r7
    3c44:	b212      	sxth	r2, r2
    3c46:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    3c48:	e9cd 1800 	strd	r1, r8, [sp]
    3c4c:	d101      	bne.n	3c52 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
    3c4e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3c52:	ee18 3a90 	vmov	r3, s17
    3c56:	ee18 1a10 	vmov	r1, s16
    3c5a:	4650      	mov	r0, sl
    3c5c:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    3c5e:	f8da 3000 	ldr.w	r3, [sl]
    3c62:	e7c4      	b.n	3bee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3c64:	f8d3 901c 	ldr.w	r9, [r3, #28]
    3c68:	fb05 2207 	mla	r2, r5, r7, r2
    3c6c:	4807      	ldr	r0, [pc, #28]	; (3c8c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x300>)
    3c6e:	b239      	sxth	r1, r7
    3c70:	b212      	sxth	r2, r2
    3c72:	4581      	cmp	r9, r0
  fillRect(x, y, w, h, color);
    3c74:	9100      	str	r1, [sp, #0]
    3c76:	d14d      	bne.n	3d14 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x388>
    3c78:	9904      	ldr	r1, [sp, #16]
    3c7a:	9101      	str	r1, [sp, #4]
    3c7c:	e7e7      	b.n	3c4e <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c2>
    3c7e:	bf00      	nop
    3c80:	000033f9 	.word	0x000033f9
    3c84:	000033fd 	.word	0x000033fd
    3c88:	2000031c 	.word	0x2000031c
    3c8c:	00003435 	.word	0x00003435
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
    3c90:	9a07      	ldr	r2, [sp, #28]
    3c92:	46d1      	mov	r9, sl
    3c94:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c96:	9906      	ldr	r1, [sp, #24]
    3c98:	4402      	add	r2, r0
    3c9a:	3101      	adds	r1, #1
    3c9c:	b292      	uxth	r2, r2
    3c9e:	b289      	uxth	r1, r1
    3ca0:	9207      	str	r2, [sp, #28]
    3ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3ca4:	9106      	str	r1, [sp, #24]
    3ca6:	428a      	cmp	r2, r1
    3ca8:	f47f af7b 	bne.w	3ba2 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x216>
    if (bg != color) { // If opaque, draw vertical line for last column
    3cac:	4618      	mov	r0, r3
    3cae:	9b05      	ldr	r3, [sp, #20]
    3cb0:	e9dd 9b03 	ldrd	r9, fp, [sp, #12]
    3cb4:	455b      	cmp	r3, fp
    3cb6:	d015      	beq.n	3ce4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
      if (size_x == 1 && size_y == 1)
    3cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3cba:	2b01      	cmp	r3, #1
    3cbc:	d12d      	bne.n	3d1a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
    3cbe:	9b02      	ldr	r3, [sp, #8]
    3cc0:	2b01      	cmp	r3, #1
    3cc2:	d12a      	bne.n	3d1a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x38e>
        writeFastVLine(x + 5, y, 8, bg);
    3cc4:	6a04      	ldr	r4, [r0, #32]
  drawFastVLine(x, y, h, color);
    3cc6:	464a      	mov	r2, r9
    3cc8:	4b23      	ldr	r3, [pc, #140]	; (3d58 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3cc>)
    3cca:	f8cd b000 	str.w	fp, [sp]
    3cce:	429c      	cmp	r4, r3
        writeFastVLine(x + 5, y, 8, bg);
    3cd0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
    3cd4:	f04f 0308 	mov.w	r3, #8
  drawFastVLine(x, y, h, color);
    3cd8:	bf08      	it	eq
    3cda:	6b84      	ldreq	r4, [r0, #56]	; 0x38
        writeFastVLine(x + 5, y, 8, bg);
    3cdc:	4650      	mov	r0, sl
    3cde:	47a0      	blx	r4
    endWrite();
    3ce0:	f8da 0000 	ldr.w	r0, [sl]
    3ce4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3ce8:	4293      	cmp	r3, r2
    3cea:	f43f af0b 	beq.w	3b04 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x178>
    endWrite();
    3cee:	4650      	mov	r0, sl
}
    3cf0:	b011      	add	sp, #68	; 0x44
    3cf2:	ecbd 8b02 	vpop	{d8}
    3cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
    3cfa:	4718      	bx	r3
    startWrite();
    3cfc:	4650      	mov	r0, sl
    3cfe:	4798      	blx	r3
    endWrite();
    3d00:	f8da 2000 	ldr.w	r2, [sl]
    3d04:	e67d      	b.n	3a02 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x76>
            writePixel(x + i, y + j, bg);
    3d06:	9b04      	ldr	r3, [sp, #16]
    3d08:	4662      	mov	r2, ip
    3d0a:	4650      	mov	r0, sl
    3d0c:	47c8      	blx	r9
        writeFastVLine(x + 5, y, 8, bg);
    3d0e:	f8da 3000 	ldr.w	r3, [sl]
    3d12:	e76c      	b.n	3bee <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x262>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
    3d14:	9b04      	ldr	r3, [sp, #16]
    3d16:	9301      	str	r3, [sp, #4]
    3d18:	e79b      	b.n	3c52 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2c6>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    3d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d1c:	69c4      	ldr	r4, [r0, #28]
    3d1e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    3d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3d24:	9a02      	ldr	r2, [sp, #8]
    3d26:	440b      	add	r3, r1
    3d28:	4d0c      	ldr	r5, [pc, #48]	; (3d5c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3d0>)
    3d2a:	00d2      	lsls	r2, r2, #3
    3d2c:	4619      	mov	r1, r3
    3d2e:	42ac      	cmp	r4, r5
    3d30:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    3d34:	b209      	sxth	r1, r1
  fillRect(x, y, w, h, color);
    3d36:	e9cd 2b00 	strd	r2, fp, [sp]
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    3d3a:	464a      	mov	r2, r9
  fillRect(x, y, w, h, color);
    3d3c:	bf08      	it	eq
    3d3e:	6c04      	ldreq	r4, [r0, #64]	; 0x40
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    3d40:	4650      	mov	r0, sl
    3d42:	47a0      	blx	r4
    endWrite();
    3d44:	f8da 0000 	ldr.w	r0, [sl]
    3d48:	e7cc      	b.n	3ce4 <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x358>
    startWrite();
    3d4a:	4650      	mov	r0, sl
    3d4c:	9303      	str	r3, [sp, #12]
    3d4e:	4790      	blx	r2
            writePixel(x + i, y + j, color);
    3d50:	f8da 0000 	ldr.w	r0, [sl]
    3d54:	9b03      	ldr	r3, [sp, #12]
    3d56:	e708      	b.n	3b6a <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1de>
    3d58:	0000340d 	.word	0x0000340d
    3d5c:	00003435 	.word	0x00003435

00003d60 <Adafruit_GFX::write(unsigned char)>:
  if (!gfxFont) { // 'Classic' built-in font
    3d60:	6a03      	ldr	r3, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
    3d62:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d64:	4607      	mov	r7, r0
    3d66:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d03a      	beq.n	3de2 <Adafruit_GFX::write(unsigned char)+0x82>
    if (c == '\n') {
    3d6c:	290a      	cmp	r1, #10
    3d6e:	d02b      	beq.n	3dc8 <Adafruit_GFX::write(unsigned char)+0x68>
    } else if (c != '\r') {
    3d70:	290d      	cmp	r1, #13
    3d72:	d033      	beq.n	3ddc <Adafruit_GFX::write(unsigned char)+0x7c>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    3d74:	7a1a      	ldrb	r2, [r3, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    3d76:	4291      	cmp	r1, r2
    3d78:	d330      	bcc.n	3ddc <Adafruit_GFX::write(unsigned char)+0x7c>
    3d7a:	7a9c      	ldrb	r4, [r3, #10]
    3d7c:	428c      	cmp	r4, r1
    3d7e:	d32d      	bcc.n	3ddc <Adafruit_GFX::write(unsigned char)+0x7c>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    3d80:	1a8a      	subs	r2, r1, r2
  return gfxFont->glyph + c;
    3d82:	685c      	ldr	r4, [r3, #4]
    3d84:	b2d2      	uxtb	r2, r2
    3d86:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3d8a:	78e5      	ldrb	r5, [r4, #3]
        uint8_t w = pgm_read_byte(&glyph->width),
    3d8c:	78a2      	ldrb	r2, [r4, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3d8e:	b1a5      	cbz	r5, 3dba <Adafruit_GFX::write(unsigned char)+0x5a>
    3d90:	b19a      	cbz	r2, 3dba <Adafruit_GFX::write(unsigned char)+0x5a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    3d92:	7ec5      	ldrb	r5, [r0, #27]
    3d94:	2d00      	cmp	r5, #0
    3d96:	d163      	bne.n	3e60 <Adafruit_GFX::write(unsigned char)+0x100>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3d98:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    3d9a:	7e43      	ldrb	r3, [r0, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3d9c:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    3da0:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    3da4:	4638      	mov	r0, r7
    3da6:	e9cd 6302 	strd	r6, r3, [sp, #8]
    3daa:	460b      	mov	r3, r1
    3dac:	4629      	mov	r1, r5
    3dae:	8afd      	ldrh	r5, [r7, #22]
    3db0:	9501      	str	r5, [sp, #4]
    3db2:	8abd      	ldrh	r5, [r7, #20]
    3db4:	9500      	str	r5, [sp, #0]
    3db6:	f7ff fde9 	bl	398c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    3dba:	7921      	ldrb	r1, [r4, #4]
        cursor_x +=
    3dbc:	8a3b      	ldrh	r3, [r7, #16]
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    3dbe:	7e3a      	ldrb	r2, [r7, #24]
        cursor_x +=
    3dc0:	fb01 3302 	mla	r3, r1, r2, r3
    3dc4:	823b      	strh	r3, [r7, #16]
    3dc6:	e009      	b.n	3ddc <Adafruit_GFX::write(unsigned char)+0x7c>
      cursor_x = 0;
    3dc8:	f04f 0c00 	mov.w	ip, #0
      cursor_y +=
    3dcc:	8a42      	ldrh	r2, [r0, #18]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3dce:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;
    3dd0:	f8a0 c010 	strh.w	ip, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3dd4:	7b1b      	ldrb	r3, [r3, #12]
      cursor_y +=
    3dd6:	fb01 2303 	mla	r3, r1, r3, r2
    3dda:	8243      	strh	r3, [r0, #18]
}
    3ddc:	2001      	movs	r0, #1
    3dde:	b005      	add	sp, #20
    3de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (c == '\n') {              // Newline?
    3de2:	290a      	cmp	r1, #10
    3de4:	d01e      	beq.n	3e24 <Adafruit_GFX::write(unsigned char)+0xc4>
    } else if (c != '\r') {       // Ignore carriage returns
    3de6:	290d      	cmp	r1, #13
    3de8:	d0f8      	beq.n	3ddc <Adafruit_GFX::write(unsigned char)+0x7c>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3dea:	7ec2      	ldrb	r2, [r0, #27]
    3dec:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    3df0:	bb0a      	cbnz	r2, 3e36 <Adafruit_GFX::write(unsigned char)+0xd6>
      cursor_y += textsize_y * 8; // advance y one line
    3df2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3df6:	7e06      	ldrb	r6, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
    3df8:	7e45      	ldrb	r5, [r0, #25]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    3dfa:	9503      	str	r5, [sp, #12]
    3dfc:	460b      	mov	r3, r1
    3dfe:	9602      	str	r6, [sp, #8]
    3e00:	4621      	mov	r1, r4
    3e02:	8afc      	ldrh	r4, [r7, #22]
    3e04:	4638      	mov	r0, r7
    3e06:	9401      	str	r4, [sp, #4]
    3e08:	8abc      	ldrh	r4, [r7, #20]
    3e0a:	9400      	str	r4, [sp, #0]
    3e0c:	f7ff fdbe 	bl	398c <Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
      cursor_x += textsize_x * 6; // Advance x one char
    3e10:	7e3b      	ldrb	r3, [r7, #24]
    3e12:	8a3a      	ldrh	r2, [r7, #16]
}
    3e14:	2001      	movs	r0, #1
      cursor_x += textsize_x * 6; // Advance x one char
    3e16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3e1e:	823b      	strh	r3, [r7, #16]
}
    3e20:	b005      	add	sp, #20
    3e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cursor_y += textsize_y * 8; // advance y one line
    3e24:	8a42      	ldrh	r2, [r0, #18]
    3e26:	7e41      	ldrb	r1, [r0, #25]
      cursor_x = 0;               // Reset x to zero,
    3e28:	8203      	strh	r3, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
    3e2a:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    3e2e:	8243      	strh	r3, [r0, #18]
}
    3e30:	2001      	movs	r0, #1
    3e32:	b005      	add	sp, #20
    3e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3e36:	7e06      	ldrb	r6, [r0, #24]
    3e38:	2206      	movs	r2, #6
    3e3a:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
    3e3e:	fb12 4206 	smlabb	r2, r2, r6, r4
    3e42:	42aa      	cmp	r2, r5
    3e44:	dd08      	ble.n	3e58 <Adafruit_GFX::write(unsigned char)+0xf8>
        cursor_y += textsize_y * 8; // advance y one line
    3e46:	8a42      	ldrh	r2, [r0, #18]
    3e48:	461c      	mov	r4, r3
    3e4a:	7e45      	ldrb	r5, [r0, #25]
        cursor_x = 0;                                       // Reset x to zero,
    3e4c:	8203      	strh	r3, [r0, #16]
        cursor_y += textsize_y * 8; // advance y one line
    3e4e:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    3e52:	b212      	sxth	r2, r2
    3e54:	8242      	strh	r2, [r0, #18]
    3e56:	e7d0      	b.n	3dfa <Adafruit_GFX::write(unsigned char)+0x9a>
      cursor_y += textsize_y * 8; // advance y one line
    3e58:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    3e5c:	7e45      	ldrb	r5, [r0, #25]
    3e5e:	e7cc      	b.n	3dfa <Adafruit_GFX::write(unsigned char)+0x9a>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    3e60:	f994 5005 	ldrsb.w	r5, [r4, #5]
    3e64:	7e06      	ldrb	r6, [r0, #24]
    3e66:	442a      	add	r2, r5
    3e68:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    3e6c:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
    3e70:	fb06 5202 	mla	r2, r6, r2, r5
    3e74:	4562      	cmp	r2, ip
    3e76:	dc03      	bgt.n	3e80 <Adafruit_GFX::write(unsigned char)+0x120>
      cursor_y += textsize_y * 8; // advance y one line
    3e78:	7e43      	ldrb	r3, [r0, #25]
    3e7a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    3e7e:	e791      	b.n	3da4 <Adafruit_GFX::write(unsigned char)+0x44>
            cursor_x = 0;
    3e80:	2500      	movs	r5, #0
            cursor_y += (int16_t)textsize_y *
    3e82:	8a42      	ldrh	r2, [r0, #18]
            cursor_x = 0;
    3e84:	8205      	strh	r5, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3e86:	f893 c00c 	ldrb.w	ip, [r3, #12]
            cursor_y += (int16_t)textsize_y *
    3e8a:	7e43      	ldrb	r3, [r0, #25]
    3e8c:	fb0c 2203 	mla	r2, ip, r3, r2
    3e90:	b212      	sxth	r2, r2
    3e92:	8242      	strh	r2, [r0, #18]
    3e94:	e786      	b.n	3da4 <Adafruit_GFX::write(unsigned char)+0x44>
    3e96:	bf00      	nop

00003e98 <Adafruit_GFX::setTextSize(unsigned char)>:
  textsize_x = (s_x > 0) ? s_x : 1;
    3e98:	2901      	cmp	r1, #1
    3e9a:	bf38      	it	cc
    3e9c:	2101      	movcc	r1, #1
    3e9e:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
    3ea0:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    3ea2:	4770      	bx	lr

00003ea4 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    3ea4:	b430      	push	{r4, r5}
    3ea6:	b082      	sub	sp, #8
    3ea8:	460c      	mov	r4, r1
    3eaa:	ab02      	add	r3, sp, #8
    3eac:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    3eb0:	7cc3      	ldrb	r3, [r0, #19]
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d030      	beq.n	3f18 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    3eb6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3eb8:	7cc3      	ldrb	r3, [r0, #19]
    3eba:	07da      	lsls	r2, r3, #31
    3ebc:	d508      	bpl.n	3ed0 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3ebe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3ec2:	6945      	ldr	r5, [r0, #20]
    3ec4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    3ec8:	402a      	ands	r2, r5
    3eca:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    3ecc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    3ed0:	079d      	lsls	r5, r3, #30
    3ed2:	d508      	bpl.n	3ee6 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3ed4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3ed8:	6985      	ldr	r5, [r0, #24]
    3eda:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    3ede:	402a      	ands	r2, r5
    3ee0:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3ee2:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    3ee6:	0759      	lsls	r1, r3, #29
    3ee8:	d508      	bpl.n	3efc <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3eea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3eee:	69c5      	ldr	r5, [r0, #28]
    3ef0:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    3ef4:	402a      	ands	r2, r5
    3ef6:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    3ef8:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    3efc:	071a      	lsls	r2, r3, #28
    3efe:	d508      	bpl.n	3f12 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3f00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3f04:	6a05      	ldr	r5, [r0, #32]
    3f06:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    3f0a:	402a      	ands	r2, r5
    3f0c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3f0e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    3f12:	06db      	lsls	r3, r3, #27
    3f14:	d42f      	bmi.n	3f76 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    3f16:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    3f18:	6883      	ldr	r3, [r0, #8]
    3f1a:	429c      	cmp	r4, r3
    3f1c:	d035      	beq.n	3f8a <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    3f1e:	4b22      	ldr	r3, [pc, #136]	; (3fa8 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    3f20:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    3f22:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3f24:	4a21      	ldr	r2, [pc, #132]	; (3fac <SPIClass::beginTransaction(SPISettings)+0x108>)
    3f26:	f3c3 1101 	ubfx	r1, r3, #4, #2
    3f2a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    3f2e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3f32:	3301      	adds	r3, #1
    3f34:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    3f38:	b1cc      	cbz	r4, 3f6e <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    3f3a:	4294      	cmp	r4, r2
    3f3c:	d827      	bhi.n	3f8e <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    3f3e:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    3f42:	fbb2 f2f3 	udiv	r2, r2, r3
    3f46:	4294      	cmp	r4, r2
    3f48:	d32c      	bcc.n	3fa4 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    3f4a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3f4e:	d320      	bcc.n	3f92 <SPIClass::beginTransaction(SPISettings)+0xee>
    3f50:	4c17      	ldr	r4, [pc, #92]	; (3fb0 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3f52:	60c4      	str	r4, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3f54:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3f56:	2203      	movs	r2, #3
		port().CR = 0;
    3f58:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    3f5a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    3f5c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3f5e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    3f60:	2201      	movs	r2, #1
		port().CCR = _ccr;
    3f62:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    3f64:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    3f66:	611a      	str	r2, [r3, #16]
	}
    3f68:	b002      	add	sp, #8
    3f6a:	bc30      	pop	{r4, r5}
    3f6c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    3f6e:	4299      	cmp	r1, r3
    3f70:	d3ef      	bcc.n	3f52 <SPIClass::beginTransaction(SPISettings)+0xae>
    3f72:	1c53      	adds	r3, r2, #1
    3f74:	e7e9      	b.n	3f4a <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    3f76:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f7a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3f7c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    3f80:	400b      	ands	r3, r1
    3f82:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3f84:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    3f88:	e7c5      	b.n	3f16 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    3f8a:	68c4      	ldr	r4, [r0, #12]
    3f8c:	e7e2      	b.n	3f54 <SPIClass::beginTransaction(SPISettings)+0xb0>
    3f8e:	2400      	movs	r4, #0
    3f90:	e7df      	b.n	3f52 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    3f92:	2b02      	cmp	r3, #2
    3f94:	d9fb      	bls.n	3f8e <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    3f96:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3f98:	085a      	lsrs	r2, r3, #1
    3f9a:	0214      	lsls	r4, r2, #8
    3f9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    3fa0:	431c      	orrs	r4, r3
    3fa2:	e7d6      	b.n	3f52 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    3fa4:	461a      	mov	r2, r3
    3fa6:	e7e4      	b.n	3f72 <SPIClass::beginTransaction(SPISettings)+0xce>
    3fa8:	400fc000 	.word	0x400fc000
    3fac:	200009b0 	.word	0x200009b0
    3fb0:	007f7fff 	.word	0x007f7fff

00003fb4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)>:
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    3fb4:	2900      	cmp	r1, #0
    3fb6:	db05      	blt.n	3fc4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
    3fb8:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
    3fbc:	458c      	cmp	ip, r1
    3fbe:	dd01      	ble.n	3fc4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
    3fc0:	2a00      	cmp	r2, #0
    3fc2:	da00      	bge.n	3fc6 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x12>
    3fc4:	4770      	bx	lr
    3fc6:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
    3fca:	4594      	cmp	ip, r2
    3fcc:	ddfa      	ble.n	3fc4 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x10>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
    3fce:	b410      	push	{r4}
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
    3fd0:	f890 c01a 	ldrb.w	ip, [r0, #26]
    switch (getRotation()) {
    3fd4:	f1bc 0f02 	cmp.w	ip, #2
    3fd8:	d00d      	beq.n	3ff6 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x42>
    3fda:	f1bc 0f03 	cmp.w	ip, #3
    3fde:	d058      	beq.n	4092 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xde>
    3fe0:	f1bc 0f01 	cmp.w	ip, #1
    3fe4:	d04c      	beq.n	4080 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xcc>
    switch (color) {
    3fe6:	2b01      	cmp	r3, #1
    3fe8:	d038      	beq.n	405c <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0xa8>
    3fea:	2b02      	cmp	r3, #2
    3fec:	d024      	beq.n	4038 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x84>
    3fee:	b17b      	cbz	r3, 4010 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x5c>
}
    3ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ff4:	4770      	bx	lr
      x = WIDTH - x - 1;
    3ff6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    3ffa:	f10c 3cff 	add.w	ip, ip, #4294967295
    3ffe:	ebac 0c01 	sub.w	ip, ip, r1
      y = HEIGHT - y - 1;
    4002:	8941      	ldrh	r1, [r0, #10]
    4004:	1a8a      	subs	r2, r1, r2
      x = WIDTH - x - 1;
    4006:	fa0f f18c 	sxth.w	r1, ip
      y = HEIGHT - y - 1;
    400a:	3a01      	subs	r2, #1
    400c:	b212      	sxth	r2, r2
      break;
    400e:	e7ea      	b.n	3fe6 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
    4010:	2a00      	cmp	r2, #0
    4012:	4613      	mov	r3, r2
    4014:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    4018:	bfb8      	it	lt
    401a:	1dd3      	addlt	r3, r2, #7
    401c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    401e:	f002 0207 	and.w	r2, r2, #7
    4022:	2001      	movs	r0, #1
    4024:	10db      	asrs	r3, r3, #3
    4026:	fa00 f202 	lsl.w	r2, r0, r2
    402a:	fb13 130c 	smlabb	r3, r3, ip, r1
    402e:	5ce1      	ldrb	r1, [r4, r3]
    4030:	ea21 0202 	bic.w	r2, r1, r2
    4034:	54e2      	strb	r2, [r4, r3]
      break;
    4036:	e7db      	b.n	3ff0 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
    4038:	2a00      	cmp	r2, #0
    403a:	4613      	mov	r3, r2
    403c:	8904      	ldrh	r4, [r0, #8]
    403e:	bfb8      	it	lt
    4040:	1dd3      	addlt	r3, r2, #7
    4042:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4044:	f002 0207 	and.w	r2, r2, #7
    4048:	10db      	asrs	r3, r3, #3
    404a:	fb13 1304 	smlabb	r3, r3, r4, r1
    404e:	2101      	movs	r1, #1
    4050:	5cc4      	ldrb	r4, [r0, r3]
    4052:	fa01 f202 	lsl.w	r2, r1, r2
    4056:	4062      	eors	r2, r4
    4058:	54c2      	strb	r2, [r0, r3]
}
    405a:	e7c9      	b.n	3ff0 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
    405c:	2a00      	cmp	r2, #0
    405e:	4613      	mov	r3, r2
    4060:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    4064:	f002 0407 	and.w	r4, r2, #7
    4068:	bfb8      	it	lt
    406a:	1dd3      	addlt	r3, r2, #7
    406c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    406e:	2201      	movs	r2, #1
    4070:	10db      	asrs	r3, r3, #3
    4072:	40a2      	lsls	r2, r4
    4074:	fb13 130c 	smlabb	r3, r3, ip, r1
    4078:	5cc1      	ldrb	r1, [r0, r3]
    407a:	430a      	orrs	r2, r1
    407c:	54c2      	strb	r2, [r0, r3]
      break;
    407e:	e7b7      	b.n	3ff0 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x3c>
      x = WIDTH - x - 1;
    4080:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    4084:	ebac 0c02 	sub.w	ip, ip, r2
      break;
    4088:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
    408a:	f10c 31ff 	add.w	r1, ip, #4294967295
    408e:	b209      	sxth	r1, r1
      break;
    4090:	e7a9      	b.n	3fe6 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
      y = HEIGHT - y - 1;
    4092:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
    4096:	f10c 3cff 	add.w	ip, ip, #4294967295
    409a:	ebac 0c01 	sub.w	ip, ip, r1
      break;
    409e:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
    40a0:	fa0f f28c 	sxth.w	r2, ip
      break;
    40a4:	e79f      	b.n	3fe6 <Adafruit_SSD1306::drawPixel(short, short, unsigned short)+0x32>
    40a6:	bf00      	nop

000040a8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>:
    if (x < 0) {                  // Clip left
    40a8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
    40aa:	b530      	push	{r4, r5, lr}
    40ac:	f8bd 400c 	ldrh.w	r4, [sp, #12]
    if (x < 0) {                  // Clip left
    40b0:	da02      	bge.n	40b8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x10>
      w += x;
    40b2:	440b      	add	r3, r1
    40b4:	2100      	movs	r1, #0
    40b6:	b21b      	sxth	r3, r3
    if ((x + w) > WIDTH) { // Clip right
    40b8:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
    40bc:	185d      	adds	r5, r3, r1
      x = 0;
    40be:	468e      	mov	lr, r1
    if ((x + w) > WIDTH) { // Clip right
    40c0:	4565      	cmp	r5, ip
    40c2:	dd02      	ble.n	40ca <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x22>
      w = (WIDTH - x);
    40c4:	ebac 0101 	sub.w	r1, ip, r1
    40c8:	b20b      	sxth	r3, r1
    if (w > 0) { // Proceed only if width is positive
    40ca:	2b00      	cmp	r3, #0
    40cc:	dd0f      	ble.n	40ee <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x46>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    40ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    40d0:	10d0      	asrs	r0, r2, #3
    40d2:	f002 0207 	and.w	r2, r2, #7
    40d6:	fb1c ec00 	smlabb	ip, ip, r0, lr
    40da:	2001      	movs	r0, #1
    40dc:	fa00 f202 	lsl.w	r2, r0, r2
      switch (color) {
    40e0:	4284      	cmp	r4, r0
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    40e2:	4461      	add	r1, ip
    40e4:	b2d2      	uxtb	r2, r2
      switch (color) {
    40e6:	d019      	beq.n	411c <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x74>
    40e8:	2c02      	cmp	r4, #2
    40ea:	d00d      	beq.n	4108 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x60>
    40ec:	b104      	cbz	r4, 40f0 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x48>
}
    40ee:	bd30      	pop	{r4, r5, pc}
        mask = ~mask;
    40f0:	43d2      	mvns	r2, r2
    40f2:	fa11 f383 	uxtah	r3, r1, r3
    40f6:	b2d2      	uxtb	r2, r2
          *pBuf++ &= mask;
    40f8:	f811 0b01 	ldrb.w	r0, [r1], #1
    40fc:	4010      	ands	r0, r2
        while (w--) {
    40fe:	4299      	cmp	r1, r3
          *pBuf++ &= mask;
    4100:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    4104:	d1f8      	bne.n	40f8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x50>
}
    4106:	bd30      	pop	{r4, r5, pc}
        while (w--) {
    4108:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ ^= mask;
    410c:	f811 0b01 	ldrb.w	r0, [r1], #1
    4110:	4050      	eors	r0, r2
        while (w--) {
    4112:	428b      	cmp	r3, r1
          *pBuf++ ^= mask;
    4114:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    4118:	d1f8      	bne.n	410c <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x64>
}
    411a:	bd30      	pop	{r4, r5, pc}
        while (w--) {
    411c:	fa11 f383 	uxtah	r3, r1, r3
          *pBuf++ |= mask;
    4120:	f811 0b01 	ldrb.w	r0, [r1], #1
    4124:	4310      	orrs	r0, r2
        while (w--) {
    4126:	4299      	cmp	r1, r3
          *pBuf++ |= mask;
    4128:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
    412c:	d1f8      	bne.n	4120 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]+0x78>
}
    412e:	bd30      	pop	{r4, r5, pc}

00004130 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>:
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    4130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    4134:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
    4138:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    413c:	458e      	cmp	lr, r1
    413e:	dd2d      	ble.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
    if (__y < 0) {               // Clip top
    4140:	2a00      	cmp	r2, #0
    4142:	db2d      	blt.n	41a0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x70>
      __y = 0;
    4144:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
    4146:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
    414a:	449c      	add	ip, r3
    414c:	45a4      	cmp	ip, r4
    414e:	dd01      	ble.n	4154 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
      __h = (HEIGHT - __y);
    4150:	1aa4      	subs	r4, r4, r2
    4152:	b223      	sxth	r3, r4
    if (__h > 0) { // Proceed only if height is now positive
    4154:	2b00      	cmp	r3, #0
    4156:	dd21      	ble.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    4158:	f3c2 04c4 	ubfx	r4, r2, #3, #5
    415c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
      if (mod) {
    415e:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
    4162:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    4164:	fb1e 1404 	smlabb	r4, lr, r4, r1
    4168:	eb06 0104 	add.w	r1, r6, r4
      if (mod) {
    416c:	d036      	beq.n	41dc <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xac>
        mod = 8 - mod;
    416e:	f1c2 0c08 	rsb	ip, r2, #8
        uint8_t mask = pgm_read_byte(&premask[mod]);
    4172:	f8df 8118 	ldr.w	r8, [pc, #280]	; 428c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>
        mod = 8 - mod;
    4176:	fa5f fc8c 	uxtb.w	ip, ip
        if (h < mod)
    417a:	4563      	cmp	r3, ip
        uint8_t mask = pgm_read_byte(&premask[mod]);
    417c:	f818 700c 	ldrb.w	r7, [r8, ip]
        if (h < mod)
    4180:	d218      	bcs.n	41b4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x84>
          mask &= (0XFF >> (mod - h));
    4182:	ebac 0803 	sub.w	r8, ip, r3
    4186:	f04f 0eff 	mov.w	lr, #255	; 0xff
        switch (color) {
    418a:	2d01      	cmp	r5, #1
          mask &= (0XFF >> (mod - h));
    418c:	fa4e fe08 	asr.w	lr, lr, r8
    4190:	ea07 070e 	and.w	r7, r7, lr
        switch (color) {
    4194:	d071      	beq.n	427a <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
    4196:	2d02      	cmp	r5, #2
    4198:	d049      	beq.n	422e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
    419a:	b18d      	cbz	r5, 41c0 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x90>
}
    419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __h += __y;
    41a0:	4413      	add	r3, r2
    41a2:	2200      	movs	r2, #0
    if ((__y + __h) > HEIGHT) { // Clip bottom
    41a4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __h += __y;
    41a8:	b21b      	sxth	r3, r3
      __y = 0;
    41aa:	4694      	mov	ip, r2
    if ((__y + __h) > HEIGHT) { // Clip bottom
    41ac:	449c      	add	ip, r3
    41ae:	45a4      	cmp	ip, r4
    41b0:	ddd0      	ble.n	4154 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x24>
    41b2:	e7cd      	b.n	4150 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x20>
        switch (color) {
    41b4:	2d01      	cmp	r5, #1
    41b6:	d060      	beq.n	427a <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x14a>
    41b8:	2d02      	cmp	r5, #2
    41ba:	d038      	beq.n	422e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xfe>
    41bc:	2d00      	cmp	r5, #0
    41be:	d13b      	bne.n	4238 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x108>
          *pBuf &= ~mask;
    41c0:	f816 e004 	ldrb.w	lr, [r6, r4]
    41c4:	ea2e 0e07 	bic.w	lr, lr, r7
      if (h >= mod) { // More to go?
    41c8:	4563      	cmp	r3, ip
          *pBuf ^= mask;
    41ca:	f806 e004 	strb.w	lr, [r6, r4]
        pBuf += WIDTH;
    41ce:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
      if (h >= mod) { // More to go?
    41d2:	d3e3      	bcc.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
        h -= mod;
    41d4:	3a08      	subs	r2, #8
        pBuf += WIDTH;
    41d6:	4421      	add	r1, r4
        h -= mod;
    41d8:	4413      	add	r3, r2
    41da:	b2db      	uxtb	r3, r3
        if (h >= 8) {
    41dc:	2b07      	cmp	r3, #7
    41de:	d916      	bls.n	420e <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xde>
          if (color == SSD1306_INVERSE) {
    41e0:	2d02      	cmp	r5, #2
    41e2:	d035      	beq.n	4250 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x120>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    41e4:	f1b5 0c00 	subs.w	ip, r5, #0
    41e8:	461a      	mov	r2, r3
    41ea:	bf18      	it	ne
    41ec:	f04f 0c01 	movne.w	ip, #1
    41f0:	f1cc 0c00 	rsb	ip, ip, #0
    41f4:	fa5f fc8c 	uxtb.w	ip, ip
              h -= 8;        // Subtract 8 rows from height
    41f8:	3a08      	subs	r2, #8
              *pBuf = val;   // Set byte
    41fa:	f881 c000 	strb.w	ip, [r1]
              pBuf += WIDTH; // Advance pointer 8 rows
    41fe:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
    4202:	b2d2      	uxtb	r2, r2
              pBuf += WIDTH; // Advance pointer 8 rows
    4204:	4421      	add	r1, r4
            } while (h >= 8);
    4206:	2a07      	cmp	r2, #7
    4208:	d8f6      	bhi.n	41f8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xc8>
    420a:	f003 0307 	and.w	r3, r3, #7
        if (h) { // Do the final partial byte, if necessary
    420e:	2b00      	cmp	r3, #0
    4210:	d0c4      	beq.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    4212:	4a1e      	ldr	r2, [pc, #120]	; (428c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
          switch (color) {
    4214:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    4216:	4413      	add	r3, r2
    4218:	7a1b      	ldrb	r3, [r3, #8]
          switch (color) {
    421a:	d033      	beq.n	4284 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x154>
    421c:	2d02      	cmp	r5, #2
    421e:	d028      	beq.n	4272 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x142>
    4220:	2d00      	cmp	r5, #0
    4222:	d1bb      	bne.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
            *pBuf &= ~mask;
    4224:	780a      	ldrb	r2, [r1, #0]
    4226:	ea22 0303 	bic.w	r3, r2, r3
    422a:	700b      	strb	r3, [r1, #0]
            break;
    422c:	e7b6      	b.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf ^= mask;
    422e:	f816 e004 	ldrb.w	lr, [r6, r4]
    4232:	ea87 0e0e 	eor.w	lr, r7, lr
          break;
    4236:	e7c7      	b.n	41c8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
        h -= mod;
    4238:	3a08      	subs	r2, #8
        pBuf += WIDTH;
    423a:	4471      	add	r1, lr
        h -= mod;
    423c:	4413      	add	r3, r2
    423e:	b2db      	uxtb	r3, r3
        if (h >= 8) {
    4240:	2b07      	cmp	r3, #7
    4242:	d8cf      	bhi.n	41e4 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xb4>
        if (h) { // Do the final partial byte, if necessary
    4244:	2b00      	cmp	r3, #0
    4246:	d0a9      	beq.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    4248:	4498      	add	r8, r3
    424a:	f898 3008 	ldrb.w	r3, [r8, #8]
          switch (color) {
    424e:	e7e5      	b.n	421c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0xec>
    4250:	461a      	mov	r2, r3
              *pBuf ^= 0xFF; // Invert byte
    4252:	780c      	ldrb	r4, [r1, #0]
              h -= 8;        // Subtract 8 rows from height
    4254:	3a08      	subs	r2, #8
              *pBuf ^= 0xFF; // Invert byte
    4256:	43e4      	mvns	r4, r4
              h -= 8;        // Subtract 8 rows from height
    4258:	b2d2      	uxtb	r2, r2
              *pBuf ^= 0xFF; // Invert byte
    425a:	700c      	strb	r4, [r1, #0]
            } while (h >= 8);
    425c:	2a07      	cmp	r2, #7
              pBuf += WIDTH; // Advance pointer 8 rows
    425e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    4262:	4421      	add	r1, r4
            } while (h >= 8);
    4264:	d8f5      	bhi.n	4252 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x122>
        if (h) { // Do the final partial byte, if necessary
    4266:	f013 0307 	ands.w	r3, r3, #7
    426a:	d097      	beq.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    426c:	4a07      	ldr	r2, [pc, #28]	; (428c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x15c>)
    426e:	4413      	add	r3, r2
    4270:	7a1b      	ldrb	r3, [r3, #8]
            *pBuf ^= mask;
    4272:	780a      	ldrb	r2, [r1, #0]
    4274:	4053      	eors	r3, r2
    4276:	700b      	strb	r3, [r1, #0]
}
    4278:	e790      	b.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
          *pBuf |= mask;
    427a:	f816 e004 	ldrb.w	lr, [r6, r4]
    427e:	ea47 0e0e 	orr.w	lr, r7, lr
          break;
    4282:	e7a1      	b.n	41c8 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x98>
            *pBuf |= mask;
    4284:	780a      	ldrb	r2, [r1, #0]
    4286:	4313      	orrs	r3, r2
    4288:	700b      	strb	r3, [r1, #0]
            break;
    428a:	e787      	b.n	419c <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]+0x6c>
    428c:	60001dd4 	.word	0x60001dd4

00004290 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    4290:	4694      	mov	ip, r2
  switch (rotation) {
    4292:	7e82      	ldrb	r2, [r0, #26]
    4294:	2a02      	cmp	r2, #2
                                     uint16_t color) {
    4296:	b410      	push	{r4}
    4298:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    429c:	d028      	beq.n	42f0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x60>
    429e:	2a03      	cmp	r2, #3
    42a0:	d021      	beq.n	42e6 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x56>
    42a2:	2a01      	cmp	r2, #1
    42a4:	d00f      	beq.n	42c6 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x36>
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    42a6:	f1bc 0f00 	cmp.w	ip, #0
    42aa:	db09      	blt.n	42c0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    42ac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    42b0:	4562      	cmp	r2, ip
    42b2:	dd05      	ble.n	42c0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    42b4:	9401      	str	r4, [sp, #4]
    42b6:	4662      	mov	r2, ip
}
    42b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    42bc:	f7ff bef4 	b.w	40a8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    42c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    42c4:	4770      	bx	lr
    x = WIDTH - x - 1;
    42c6:	8902      	ldrh	r2, [r0, #8]
    42c8:	eba2 020c 	sub.w	r2, r2, ip
    42cc:	3a01      	subs	r2, #1
    42ce:	fa0f fc82 	sxth.w	ip, r2
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    42d2:	f1bc 0f00 	cmp.w	ip, #0
    42d6:	dbf3      	blt.n	42c0 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x30>
    42d8:	460a      	mov	r2, r1
    42da:	9401      	str	r4, [sp, #4]
    42dc:	4661      	mov	r1, ip
}
    42de:	f85d 4b04 	ldr.w	r4, [sp], #4
    42e2:	f7ff bf25 	b.w	4130 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    y -= (w - 1);
    42e6:	4419      	add	r1, r3
    42e8:	8942      	ldrh	r2, [r0, #10]
    42ea:	1a52      	subs	r2, r2, r1
    42ec:	b211      	sxth	r1, r2
  if (bSwap)
    42ee:	e7f0      	b.n	42d2 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x42>
    y = HEIGHT - y - 1;
    42f0:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
    42f2:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
    42f4:	eba2 020c 	sub.w	r2, r2, ip
    42f8:	3a01      	subs	r2, #1
    42fa:	fa0f fc82 	sxth.w	ip, r2
    x -= (w - 1);
    42fe:	8902      	ldrh	r2, [r0, #8]
    4300:	1a52      	subs	r2, r2, r1
    4302:	b211      	sxth	r1, r2
  if (bSwap)
    4304:	e7cf      	b.n	42a6 <Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)+0x16>
    4306:	bf00      	nop

00004308 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)>:
                                     uint16_t color) {
    4308:	4694      	mov	ip, r2
  switch (rotation) {
    430a:	7e82      	ldrb	r2, [r0, #26]
    430c:	2a02      	cmp	r2, #2
                                     uint16_t color) {
    430e:	b410      	push	{r4}
    4310:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  switch (rotation) {
    4314:	d027      	beq.n	4366 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x5e>
    4316:	2a03      	cmp	r2, #3
    4318:	d014      	beq.n	4344 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x3c>
    431a:	2a01      	cmp	r2, #1
    431c:	d007      	beq.n	432e <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x26>
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    431e:	2900      	cmp	r1, #0
    4320:	db0d      	blt.n	433e <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    4322:	9401      	str	r4, [sp, #4]
    4324:	4662      	mov	r2, ip
}
    4326:	f85d 4b04 	ldr.w	r4, [sp], #4
    432a:	f7ff bf01 	b.w	4130 <Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x -= (h - 1);
    432e:	449c      	add	ip, r3
    4330:	8902      	ldrh	r2, [r0, #8]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    4332:	2900      	cmp	r1, #0
    x -= (h - 1);
    4334:	eba2 020c 	sub.w	r2, r2, ip
    4338:	fa0f fc82 	sxth.w	ip, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    433c:	da08      	bge.n	4350 <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x48>
}
    433e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4342:	4770      	bx	lr
    y = HEIGHT - y - 1;
    4344:	8942      	ldrh	r2, [r0, #10]
    4346:	1a52      	subs	r2, r2, r1
    4348:	3a01      	subs	r2, #1
    434a:	b211      	sxth	r1, r2
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    434c:	2900      	cmp	r1, #0
    434e:	dbf6      	blt.n	433e <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    4350:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    4354:	428a      	cmp	r2, r1
    4356:	ddf2      	ble.n	433e <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x36>
    4358:	460a      	mov	r2, r1
    435a:	9401      	str	r4, [sp, #4]
    435c:	4661      	mov	r1, ip
}
    435e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4362:	f7ff bea1 	b.w	40a8 <Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]>
    x = WIDTH - x - 1;
    4366:	8902      	ldrh	r2, [r0, #8]
    y -= (h - 1);
    4368:	449c      	add	ip, r3
    x = WIDTH - x - 1;
    436a:	1a52      	subs	r2, r2, r1
    436c:	3a01      	subs	r2, #1
    436e:	b211      	sxth	r1, r2
    y -= (h - 1);
    4370:	8942      	ldrh	r2, [r0, #10]
    4372:	eba2 020c 	sub.w	r2, r2, ip
    4376:	fa0f fc82 	sxth.w	ip, r2
  if (bSwap)
    437a:	e7d0      	b.n	431e <Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)+0x16>

0000437c <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
    437c:	b570      	push	{r4, r5, r6, lr}
    437e:	4604      	mov	r4, r0
    4380:	461d      	mov	r5, r3
    4382:	f99d 6010 	ldrsb.w	r6, [sp, #16]
      wireClk(clkDuring), restoreClk(clkAfter)
    4386:	f7ff fa6f 	bl	3868 <Adafruit_GFX::Adafruit_GFX(short, short)>
    438a:	4b0f      	ldr	r3, [pc, #60]	; (43c8 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x4c>)
    438c:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    438e:	2300      	movs	r3, #0
    4390:	6263      	str	r3, [r4, #36]	; 0x24
    4392:	b1b5      	cbz	r5, 43c2 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x46>
      wireClk(clkDuring), restoreClk(clkAfter)
    4394:	9a05      	ldr	r2, [sp, #20]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    4396:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    4398:	480c      	ldr	r0, [pc, #48]	; (43cc <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x50>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    439a:	2107      	movs	r1, #7
      wireClk(clkDuring), restoreClk(clkAfter)
    439c:	65a2      	str	r2, [r4, #88]	; 0x58
    439e:	9a06      	ldr	r2, [sp, #24]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    43a0:	62e3      	str	r3, [r4, #44]	; 0x2c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    43a2:	23ff      	movs	r3, #255	; 0xff
      wireClk(clkDuring), restoreClk(clkAfter)
    43a4:	65e2      	str	r2, [r4, #92]	; 0x5c
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    43a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    43aa:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    43ae:	62a5      	str	r5, [r4, #40]	; 0x28
      mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin)
    43b0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    43b4:	86a2      	strh	r2, [r4, #52]	; 0x34
    43b6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    43ba:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
}
    43be:	4620      	mov	r0, r4
    43c0:	bd70      	pop	{r4, r5, r6, pc}
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
    43c2:	4d03      	ldr	r5, [pc, #12]	; (43d0 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x54>)
    43c4:	e7e6      	b.n	4394 <Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)+0x18>
    43c6:	bf00      	nop
    43c8:	200008c0 	.word	0x200008c0
    43cc:	003d0900 	.word	0x003d0900
    43d0:	20000ed8 	.word	0x20000ed8

000043d4 <Adafruit_SSD1306::~Adafruit_SSD1306()>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
    43d4:	b510      	push	{r4, lr}
    43d6:	4604      	mov	r4, r0
  if (buffer) {
    43d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    43da:	b108      	cbz	r0, 43e0 <Adafruit_SSD1306::~Adafruit_SSD1306()+0xc>
    free(buffer);
    43dc:	f003 f8f8 	bl	75d0 <free>
}
    43e0:	4620      	mov	r0, r4
    43e2:	bd10      	pop	{r4, pc}

000043e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    43e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (wire) { // I2C
    43e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
    43e8:	4604      	mov	r4, r0
    43ea:	460d      	mov	r5, r1
  if (wire) { // I2C
    43ec:	b1cb      	cbz	r3, 4422 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x3e>
		txBuffer[0] = (address << 1);
    43ee:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    43f2:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    43f4:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    43f6:	40b2      	lsls	r2, r6
		transmitting = 1;
    43f8:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    43fc:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    4400:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    4404:	6a80      	ldr	r0, [r0, #40]	; 0x28
    4406:	6803      	ldr	r3, [r0, #0]
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	4798      	blx	r3
    WIRE_WRITE(c);
    440c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    440e:	4629      	mov	r1, r5
    4410:	6803      	ldr	r3, [r0, #0]
    4412:	681b      	ldr	r3, [r3, #0]
    4414:	4798      	blx	r3
		return endTransmission(1);
    4416:	4631      	mov	r1, r6
    4418:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    441a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    441e:	f7fe bec5 	b.w	31ac <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    4422:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4424:	6d00      	ldr	r0, [r0, #80]	; 0x50
    4426:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    4428:	6a61      	ldr	r1, [r4, #36]	; 0x24
    SSD1306_MODE_COMMAND
    442a:	ea23 0300 	bic.w	r3, r3, r0
    442e:	6013      	str	r3, [r2, #0]
  if (spi) {
    4430:	b139      	cbz	r1, 4442 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x5e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4432:	680a      	ldr	r2, [r1, #0]
		port().TDR = data;
    4434:	6655      	str	r5, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    4436:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    4438:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    443c:	d0fb      	beq.n	4436 <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x52>
    443e:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    4440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *clkPort |= clkPinMask;  // Clock high
    4442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4444:	2008      	movs	r0, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4446:	2180      	movs	r1, #128	; 0x80
    4448:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    444a:	6832      	ldr	r2, [r6, #0]
      if (d & bit)
    444c:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
    444e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4450:	ea4f 0151 	mov.w	r1, r1, lsr #1
        *mosiPort |= mosiPinMask;
    4454:	bf14      	ite	ne
    4456:	433a      	orrne	r2, r7
        *mosiPort &= ~mosiPinMask;
    4458:	43ba      	biceq	r2, r7
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    445a:	3801      	subs	r0, #1
        *mosiPort &= ~mosiPinMask;
    445c:	6032      	str	r2, [r6, #0]
      *clkPort |= clkPinMask;  // Clock high
    445e:	681a      	ldr	r2, [r3, #0]
    4460:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    4462:	ea42 0207 	orr.w	r2, r2, r7
    4466:	601a      	str	r2, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    4468:	681a      	ldr	r2, [r3, #0]
    446a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    446c:	ea22 0207 	bic.w	r2, r2, r7
    4470:	601a      	str	r2, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4472:	d1ea      	bne.n	444a <Adafruit_SSD1306::ssd1306_command1(unsigned char)+0x66>
}
    4474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4476:	bf00      	nop

00004478 <Adafruit_SSD1306::invertDisplay(bool)>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
    4478:	b538      	push	{r3, r4, r5, lr}
    447a:	4604      	mov	r4, r0
  TRANSACTION_START
    447c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
    447e:	460d      	mov	r5, r1
  TRANSACTION_START
    4480:	b178      	cbz	r0, 44a2 <Adafruit_SSD1306::invertDisplay(bool)+0x2a>
    4482:	6da1      	ldr	r1, [r4, #88]	; 0x58
    4484:	f7fe ff7a 	bl	337c <TwoWire::setClock(unsigned long)>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
    4488:	f1a5 015a 	sub.w	r1, r5, #90	; 0x5a
    448c:	4620      	mov	r0, r4
    448e:	b2c9      	uxtb	r1, r1
    4490:	f7ff ffa8 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  TRANSACTION_END
    4494:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4496:	b198      	cbz	r0, 44c0 <Adafruit_SSD1306::invertDisplay(bool)+0x48>
    4498:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    449a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
    449e:	f7fe bf6d 	b.w	337c <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    44a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    44a4:	b128      	cbz	r0, 44b2 <Adafruit_SSD1306::invertDisplay(bool)+0x3a>
    44a6:	f104 0364 	add.w	r3, r4, #100	; 0x64
    44aa:	e893 0006 	ldmia.w	r3, {r1, r2}
    44ae:	f7ff fcf9 	bl	3ea4 <SPIClass::beginTransaction(SPISettings)>
    44b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    44b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    44b6:	6813      	ldr	r3, [r2, #0]
    44b8:	ea23 0301 	bic.w	r3, r3, r1
    44bc:	6013      	str	r3, [r2, #0]
    44be:	e7e3      	b.n	4488 <Adafruit_SSD1306::invertDisplay(bool)+0x10>
  TRANSACTION_END
    44c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    44c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    44c4:	680b      	ldr	r3, [r1, #0]
    44c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    44c8:	4303      	orrs	r3, r0
    44ca:	600b      	str	r3, [r1, #0]
    44cc:	b322      	cbz	r2, 4518 <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
		if (interruptMasksUsed) {
    44ce:	7cd3      	ldrb	r3, [r2, #19]
    44d0:	b313      	cbz	r3, 4518 <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    44d2:	07dd      	lsls	r5, r3, #31
    44d4:	d504      	bpl.n	44e0 <Adafruit_SSD1306::invertDisplay(bool)+0x68>
    44d6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    44d8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    44dc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    44e0:	079c      	lsls	r4, r3, #30
    44e2:	d504      	bpl.n	44ee <Adafruit_SSD1306::invertDisplay(bool)+0x76>
    44e4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    44e6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    44ea:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    44ee:	0758      	lsls	r0, r3, #29
    44f0:	d504      	bpl.n	44fc <Adafruit_SSD1306::invertDisplay(bool)+0x84>
    44f2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    44f4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    44f8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    44fc:	0719      	lsls	r1, r3, #28
    44fe:	d504      	bpl.n	450a <Adafruit_SSD1306::invertDisplay(bool)+0x92>
    4500:	6b50      	ldr	r0, [r2, #52]	; 0x34
    4502:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4506:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    450a:	06db      	lsls	r3, r3, #27
    450c:	d504      	bpl.n	4518 <Adafruit_SSD1306::invertDisplay(bool)+0xa0>
    450e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    4510:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4514:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4518:	bd38      	pop	{r3, r4, r5, pc}
    451a:	bf00      	nop

0000451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>:
  if (wire) { // I2C
    451c:	6a83      	ldr	r3, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
    451e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4522:	4604      	mov	r4, r0
    4524:	460d      	mov	r5, r1
    4526:	4690      	mov	r8, r2
  if (wire) { // I2C
    4528:	2b00      	cmp	r3, #0
    452a:	d03b      	beq.n	45a4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x88>
		txBuffer[0] = (address << 1);
    452c:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
		transmitting = 1;
    4530:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    4532:	2100      	movs	r1, #0
		txBuffer[0] = (address << 1);
    4534:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    4536:	f883 6130 	strb.w	r6, [r3, #304]	; 0x130
		txBufferLength = 1;
    453a:	f883 612f 	strb.w	r6, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    453e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    4542:	6a80      	ldr	r0, [r0, #40]	; 0x28
    4544:	6803      	ldr	r3, [r0, #0]
    4546:	681b      	ldr	r3, [r3, #0]
    4548:	4798      	blx	r3
    while (n--) {
    454a:	f1b8 0f00 	cmp.w	r8, #0
    454e:	d023      	beq.n	4598 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
    4550:	eb05 0708 	add.w	r7, r5, r8
		return endTransmission(1);
    4554:	46b0      	mov	r8, r6
      WIRE_WRITE(pgm_read_byte(c++));
    4556:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    4558:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
    455a:	f815 1b01 	ldrb.w	r1, [r5], #1
    455e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    4560:	b2b6      	uxth	r6, r6
      WIRE_WRITE(pgm_read_byte(c++));
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	4798      	blx	r3
    while (n--) {
    4566:	42af      	cmp	r7, r5
    4568:	d016      	beq.n	4598 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x7c>
      if (bytesOut >= WIRE_MAX) {
    456a:	2e88      	cmp	r6, #136	; 0x88
    456c:	d1f3      	bne.n	4556 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
    456e:	2101      	movs	r1, #1
    4570:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4572:	f7fe fe1b 	bl	31ac <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    4576:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    457a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    457c:	2100      	movs	r1, #0
    457e:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    4580:	2601      	movs	r6, #1
		transmitting = 1;
    4582:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    4586:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    458a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    458e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4590:	6803      	ldr	r3, [r0, #0]
    4592:	681b      	ldr	r3, [r3, #0]
    4594:	4798      	blx	r3
        bytesOut = 1;
    4596:	e7de      	b.n	4556 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x3a>
		return endTransmission(1);
    4598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    459a:	2101      	movs	r1, #1
}
    459c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45a0:	f7fe be04 	b.w	31ac <TwoWire::endTransmission(unsigned char)>
    SSD1306_MODE_COMMAND
    45a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    45a6:	6d01      	ldr	r1, [r0, #80]	; 0x50
    45a8:	6813      	ldr	r3, [r2, #0]
    45aa:	ea23 0301 	bic.w	r3, r3, r1
    45ae:	6013      	str	r3, [r2, #0]
    while (n--)
    45b0:	f1b8 0f00 	cmp.w	r8, #0
    45b4:	d00d      	beq.n	45d2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb6>
  if (spi) {
    45b6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    45b8:	44a8      	add	r8, r5
      SPIwrite(pgm_read_byte(c++));
    45ba:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (spi) {
    45be:	b157      	cbz	r7, 45d6 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    45c0:	6839      	ldr	r1, [r7, #0]
		port().TDR = data;
    45c2:	664e      	str	r6, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    45c4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    45c6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    45ca:	d0fb      	beq.n	45c4 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xa8>
    45cc:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    while (n--)
    45ce:	4545      	cmp	r5, r8
    45d0:	d1f3      	bne.n	45ba <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0x9e>
}
    45d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *clkPort |= clkPinMask;  // Clock high
    45d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    45d8:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    45dc:	f04f 0c80 	mov.w	ip, #128	; 0x80
    45e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    45e2:	6808      	ldr	r0, [r1, #0]
      if (d & bit)
    45e4:	ea16 0f0c 	tst.w	r6, ip
        *mosiPort |= mosiPinMask;
    45e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    45ea:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        *mosiPort |= mosiPinMask;
    45ee:	bf14      	ite	ne
    45f0:	4310      	orrne	r0, r2
        *mosiPort &= ~mosiPinMask;
    45f2:	4390      	biceq	r0, r2
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    45f4:	f1be 0e01 	subs.w	lr, lr, #1
        *mosiPort &= ~mosiPinMask;
    45f8:	6008      	str	r0, [r1, #0]
      *clkPort |= clkPinMask;  // Clock high
    45fa:	6818      	ldr	r0, [r3, #0]
    45fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    45fe:	ea40 0002 	orr.w	r0, r0, r2
    4602:	6018      	str	r0, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    4604:	6818      	ldr	r0, [r3, #0]
    4606:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4608:	ea20 0002 	bic.w	r0, r0, r2
    460c:	6018      	str	r0, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    460e:	d1e8      	bne.n	45e2 <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xc6>
    4610:	e7dd      	b.n	45ce <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)+0xb2>
    4612:	bf00      	nop

00004614 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)>:
                             bool periphBegin) {
    4614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4618:	4604      	mov	r4, r0
    461a:	b086      	sub	sp, #24
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    461c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
                             bool periphBegin) {
    461e:	461e      	mov	r6, r3
    4620:	460f      	mov	r7, r1
    4622:	4615      	mov	r5, r2
    4624:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    4628:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    462c:	2800      	cmp	r0, #0
    462e:	f000 815d 	beq.w	48ec <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2d8>
    4632:	1dda      	adds	r2, r3, #7
    4634:	bf48      	it	mi
    4636:	f103 020e 	addmi.w	r2, r3, #14
    463a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    463e:	10d2      	asrs	r2, r2, #3
    4640:	fb03 f202 	mul.w	r2, r3, r2
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    4644:	2100      	movs	r1, #0
    4646:	f003 fa8d 	bl	7b64 <memset>
  if (HEIGHT > 32) {
    464a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    464e:	2820      	cmp	r0, #32
    4650:	f300 80bd 	bgt.w	47ce <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1ba>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
    4654:	f1b0 0220 	subs.w	r2, r0, #32
    4658:	f04f 0c01 	mov.w	ip, #1
    465c:	4bb9      	ldr	r3, [pc, #740]	; (4944 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x330>)
    465e:	bf48      	it	mi
    4660:	f1a0 021f 	submi.w	r2, r0, #31
    4664:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    4668:	f1b0 0173 	subs.w	r1, r0, #115	; 0x73
    466c:	ea4f 0262 	mov.w	r2, r2, asr #1
    4670:	bf48      	it	mi
    4672:	f1a0 0172 	submi.w	r1, r0, #114	; 0x72
    4676:	2020      	movs	r0, #32
    4678:	e9cd 0c01 	strd	r0, ip, [sp, #4]
    467c:	2073      	movs	r0, #115	; 0x73
    467e:	1049      	asrs	r1, r1, #1
    4680:	9000      	str	r0, [sp, #0]
    4682:	4620      	mov	r0, r4
    4684:	f7ff f908 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    4688:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    468a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    468e:	2800      	cmp	r0, #0
    4690:	f000 80bc 	beq.w	480c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1f8>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    4694:	2d00      	cmp	r5, #0
    4696:	f040 811d 	bne.w	48d4 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2c0>
    469a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    469e:	2b20      	cmp	r3, #32
    46a0:	bf0c      	ite	eq
    46a2:	253c      	moveq	r5, #60	; 0x3c
    46a4:	253d      	movne	r5, #61	; 0x3d
    46a6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    46aa:	f1b8 0f00 	cmp.w	r8, #0
    46ae:	f040 8118 	bne.w	48e2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2ce>
  if (reset && (rstPin >= 0)) {
    46b2:	2e00      	cmp	r6, #0
    46b4:	f000 80d8 	beq.w	4868 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    46b8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
    46bc:	2800      	cmp	r0, #0
    46be:	db18      	blt.n	46f2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xde>
    pinMode(rstPin, OUTPUT);
    46c0:	2101      	movs	r1, #1
    46c2:	b2c0      	uxtb	r0, r0
    46c4:	f001 fb3a 	bl	5d3c <pinMode>
    digitalWrite(rstPin, HIGH);
    46c8:	2101      	movs	r1, #1
    46ca:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    46ce:	f001 faf9 	bl	5cc4 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
    46d2:	2001      	movs	r0, #1
    46d4:	f001 faa2 	bl	5c1c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
    46d8:	2100      	movs	r1, #0
    46da:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    46de:	f001 faf1 	bl	5cc4 <digitalWrite>
    delay(10);                  // Wait 10 ms
    46e2:	200a      	movs	r0, #10
    46e4:	f001 fa9a 	bl	5c1c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
    46e8:	2101      	movs	r1, #1
    46ea:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    46ee:	f001 fae9 	bl	5cc4 <digitalWrite>
  TRANSACTION_START
    46f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    46f4:	2800      	cmp	r0, #0
    46f6:	f040 80b7 	bne.w	4868 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x254>
    46fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    46fc:	b128      	cbz	r0, 470a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xf6>
    46fe:	f104 0364 	add.w	r3, r4, #100	; 0x64
    4702:	e893 0006 	ldmia.w	r3, {r1, r2}
    4706:	f7ff fbcd 	bl	3ea4 <SPIClass::beginTransaction(SPISettings)>
    470a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    470c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    470e:	6813      	ldr	r3, [r2, #0]
    4710:	ea23 0301 	bic.w	r3, r3, r1
    4714:	6013      	str	r3, [r2, #0]
  ssd1306_commandList(init1, sizeof(init1));
    4716:	2204      	movs	r2, #4
    4718:	498b      	ldr	r1, [pc, #556]	; (4948 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x334>)
    471a:	4620      	mov	r0, r4
    471c:	f7ff fefe 	bl	451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(HEIGHT - 1);
    4720:	8961      	ldrh	r1, [r4, #10]
    4722:	4620      	mov	r0, r4
    4724:	3901      	subs	r1, #1
    4726:	b2c9      	uxtb	r1, r1
    4728:	f7ff fe5c 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init2, sizeof(init2));
    472c:	4987      	ldr	r1, [pc, #540]	; (494c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x338>)
    472e:	2204      	movs	r2, #4
    4730:	4620      	mov	r0, r4
    4732:	f7ff fef3 	bl	451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
    4736:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    473a:	4620      	mov	r0, r4
    473c:	2b01      	cmp	r3, #1
    473e:	bf0c      	ite	eq
    4740:	2110      	moveq	r1, #16
    4742:	2114      	movne	r1, #20
    4744:	f7ff fe4e 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init3, sizeof(init3));
    4748:	2204      	movs	r2, #4
    474a:	4981      	ldr	r1, [pc, #516]	; (4950 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x33c>)
    474c:	4620      	mov	r0, r4
    474e:	f7ff fee5 	bl	451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    4752:	68a3      	ldr	r3, [r4, #8]
    4754:	4a7f      	ldr	r2, [pc, #508]	; (4954 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x340>)
  contrast = 0x8F;
    4756:	218f      	movs	r1, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    4758:	4293      	cmp	r3, r2
  contrast = 0x8F;
    475a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
    475e:	d008      	beq.n	4772 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x15e>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
    4760:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    4764:	4293      	cmp	r3, r2
    4766:	f000 80d4 	beq.w	4912 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2fe>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
    476a:	4a7b      	ldr	r2, [pc, #492]	; (4958 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x344>)
    476c:	4293      	cmp	r3, r2
    476e:	f000 80da 	beq.w	4926 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x312>
    comPins = 0x02;
    4772:	2502      	movs	r5, #2
  ssd1306_command1(SSD1306_SETCOMPINS);
    4774:	21da      	movs	r1, #218	; 0xda
    4776:	4620      	mov	r0, r4
    4778:	f7ff fe34 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(comPins);
    477c:	4629      	mov	r1, r5
    477e:	4620      	mov	r0, r4
    4780:	f7ff fe30 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETCONTRAST);
    4784:	2181      	movs	r1, #129	; 0x81
    4786:	4620      	mov	r0, r4
    4788:	f7ff fe2c 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(contrast);
    478c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    4790:	4620      	mov	r0, r4
    4792:	f7ff fe27 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
    4796:	21d9      	movs	r1, #217	; 0xd9
    4798:	4620      	mov	r0, r4
    479a:	f7ff fe23 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
    479e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    47a2:	4620      	mov	r0, r4
    47a4:	2b01      	cmp	r3, #1
    47a6:	bf0c      	ite	eq
    47a8:	2122      	moveq	r1, #34	; 0x22
    47aa:	21f1      	movne	r1, #241	; 0xf1
    47ac:	f7ff fe1a 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  ssd1306_commandList(init5, sizeof(init5));
    47b0:	4620      	mov	r0, r4
    47b2:	2206      	movs	r2, #6
    47b4:	4969      	ldr	r1, [pc, #420]	; (495c <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x348>)
    47b6:	f7ff feb1 	bl	451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  TRANSACTION_END
    47ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    47bc:	2800      	cmp	r0, #0
    47be:	d057      	beq.n	4870 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x25c>
    47c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    47c2:	f7fe fddb 	bl	337c <TwoWire::setClock(unsigned long)>
  return true; // Success
    47c6:	2001      	movs	r0, #1
}
    47c8:	b006      	add	sp, #24
    47ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
    47ce:	3840      	subs	r0, #64	; 0x40
    47d0:	f04f 0e01 	mov.w	lr, #1
    47d4:	4b62      	ldr	r3, [pc, #392]	; (4960 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x34c>)
    47d6:	b200      	sxth	r0, r0
    47d8:	2800      	cmp	r0, #0
    47da:	bfb8      	it	lt
    47dc:	3001      	addlt	r0, #1
    47de:	1042      	asrs	r2, r0, #1
    47e0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
    47e4:	f1b0 0152 	subs.w	r1, r0, #82	; 0x52
    47e8:	bf48      	it	mi
    47ea:	f1a0 0151 	submi.w	r1, r0, #81	; 0x51
    47ee:	2040      	movs	r0, #64	; 0x40
    47f0:	e9cd 0e01 	strd	r0, lr, [sp, #4]
    47f4:	2052      	movs	r0, #82	; 0x52
    47f6:	1049      	asrs	r1, r1, #1
    47f8:	9000      	str	r0, [sp, #0]
    47fa:	4620      	mov	r0, r4
    47fc:	f7ff f84c 	bl	3898 <Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)>
  if (wire) { // Using I2C
    4800:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
    4802:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
    4806:	2800      	cmp	r0, #0
    4808:	f47f af44 	bne.w	4694 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x80>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
    480c:	2101      	movs	r1, #1
    480e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    4812:	f001 fa93 	bl	5d3c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
    4816:	2101      	movs	r1, #1
    4818:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
    481c:	f001 fa8e 	bl	5d3c <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    4820:	4d50      	ldr	r5, [pc, #320]	; (4964 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x350>)
    4822:	f994 2035 	ldrsb.w	r2, [r4, #53]	; 0x35
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    4826:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    482a:	0111      	lsls	r1, r2, #4
    if (spi) { // Hardware SPI
    482c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    482e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
    4832:	5869      	ldr	r1, [r5, r1]
    dcPinMask = digitalPinToBitMask(dcPin);
    4834:	68d2      	ldr	r2, [r2, #12]
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    4836:	6421      	str	r1, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
    4838:	6522      	str	r2, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    483a:	011a      	lsls	r2, r3, #4
    483c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    4840:	58aa      	ldr	r2, [r5, r2]
    csPinMask = digitalPinToBitMask(csPin);
    4842:	68db      	ldr	r3, [r3, #12]
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    4844:	6462      	str	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
    4846:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
    4848:	6811      	ldr	r1, [r2, #0]
    484a:	430b      	orrs	r3, r1
    484c:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
    484e:	2800      	cmp	r0, #0
    4850:	f000 808a 	beq.w	4968 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x354>
      if (periphBegin)
    4854:	f1b8 0f00 	cmp.w	r8, #0
    4858:	d16f      	bne.n	493a <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x326>
  if (reset && (rstPin >= 0)) {
    485a:	2e00      	cmp	r6, #0
    485c:	f47f af2c 	bne.w	46b8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  TRANSACTION_START
    4860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4862:	2800      	cmp	r0, #0
    4864:	f43f af49 	beq.w	46fa <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xe6>
    4868:	6da1      	ldr	r1, [r4, #88]	; 0x58
    486a:	f7fe fd87 	bl	337c <TwoWire::setClock(unsigned long)>
    486e:	e752      	b.n	4716 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x102>
  TRANSACTION_END
    4870:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4872:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4874:	680b      	ldr	r3, [r1, #0]
    4876:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4878:	4303      	orrs	r3, r0
    487a:	600b      	str	r3, [r1, #0]
    487c:	b332      	cbz	r2, 48cc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
		if (interruptMasksUsed) {
    487e:	7cd3      	ldrb	r3, [r2, #19]
    4880:	b323      	cbz	r3, 48cc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4882:	07dd      	lsls	r5, r3, #31
    4884:	d504      	bpl.n	4890 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x27c>
    4886:	6a90      	ldr	r0, [r2, #40]	; 0x28
    4888:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    488c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4890:	079c      	lsls	r4, r3, #30
    4892:	d504      	bpl.n	489e <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x28a>
    4894:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4896:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    489a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    489e:	0758      	lsls	r0, r3, #29
    48a0:	d504      	bpl.n	48ac <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x298>
    48a2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    48a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    48a8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    48ac:	0719      	lsls	r1, r3, #28
    48ae:	d504      	bpl.n	48ba <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2a6>
    48b0:	6b50      	ldr	r0, [r2, #52]	; 0x34
    48b2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    48b6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    48ba:	06db      	lsls	r3, r3, #27
    48bc:	d506      	bpl.n	48cc <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x2b8>
    48be:	6b92      	ldr	r2, [r2, #56]	; 0x38
    48c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  return true; // Success
    48c4:	2001      	movs	r0, #1
    48c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    48ca:	e77d      	b.n	47c8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    48cc:	2001      	movs	r0, #1
}
    48ce:	b006      	add	sp, #24
    48d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
    48d4:	b26d      	sxtb	r5, r5
    48d6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
    48da:	f1b8 0f00 	cmp.w	r8, #0
    48de:	f43f aee8 	beq.w	46b2 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x9e>
      wire->begin();
    48e2:	f003 fb71 	bl	7fc8 <___ZN7TwoWire5beginEv_veneer>
  if (reset && (rstPin >= 0)) {
    48e6:	2e00      	cmp	r6, #0
    48e8:	d0ba      	beq.n	4860 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    48ea:	e6e5      	b.n	46b8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
    48ec:	1dda      	adds	r2, r3, #7
    48ee:	bf48      	it	mi
    48f0:	f103 020e 	addmi.w	r2, r3, #14
    48f4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    48f8:	10d2      	asrs	r2, r2, #3
    48fa:	fb03 f202 	mul.w	r2, r3, r2
    48fe:	4610      	mov	r0, r2
    4900:	9205      	str	r2, [sp, #20]
    4902:	f002 fe5d 	bl	75c0 <malloc>
    4906:	9a05      	ldr	r2, [sp, #20]
    4908:	62e0      	str	r0, [r4, #44]	; 0x2c
    490a:	2800      	cmp	r0, #0
    490c:	f47f ae9a 	bne.w	4644 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x30>
    4910:	e75a      	b.n	47c8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x1b4>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    4912:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
    4916:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
    4918:	2b01      	cmp	r3, #1
    491a:	bf0c      	ite	eq
    491c:	239f      	moveq	r3, #159	; 0x9f
    491e:	23cf      	movne	r3, #207	; 0xcf
    4920:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    4924:	e726      	b.n	4774 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    4926:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x2; // ada x12
    492a:	2502      	movs	r5, #2
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
    492c:	2b01      	cmp	r3, #1
    492e:	bf0c      	ite	eq
    4930:	2310      	moveq	r3, #16
    4932:	23af      	movne	r3, #175	; 0xaf
    4934:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    4938:	e71c      	b.n	4774 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x160>
        spi->begin();
    493a:	f7fe fa1f 	bl	2d7c <SPIClass::begin()>
  if (reset && (rstPin >= 0)) {
    493e:	2e00      	cmp	r6, #0
    4940:	d08e      	beq.n	4860 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    4942:	e6b9      	b.n	46b8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>
    4944:	600020a4 	.word	0x600020a4
    4948:	60002284 	.word	0x60002284
    494c:	60002288 	.word	0x60002288
    4950:	6000228c 	.word	0x6000228c
    4954:	00200080 	.word	0x00200080
    4958:	00100060 	.word	0x00100060
    495c:	60002290 	.word	0x60002290
    4960:	60001de4 	.word	0x60001de4
    4964:	200009c0 	.word	0x200009c0
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
    4968:	2101      	movs	r1, #1
    496a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    496e:	f001 f9e5 	bl	5d3c <pinMode>
      pinMode(clkPin, OUTPUT);
    4972:	2101      	movs	r1, #1
    4974:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    4978:	f001 f9e0 	bl	5d3c <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    497c:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
    4980:	0119      	lsls	r1, r3, #4
    4982:	eb05 1203 	add.w	r2, r5, r3, lsl #4
    4986:	586b      	ldr	r3, [r5, r1]
      mosiPinMask = digitalPinToBitMask(mosiPin);
    4988:	68d2      	ldr	r2, [r2, #12]
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
    498a:	63a3      	str	r3, [r4, #56]	; 0x38
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    498c:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      mosiPinMask = digitalPinToBitMask(mosiPin);
    4990:	64a2      	str	r2, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    4992:	011a      	lsls	r2, r3, #4
    4994:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    4998:	58aa      	ldr	r2, [r5, r2]
      clkPinMask = digitalPinToBitMask(clkPin);
    499a:	68d9      	ldr	r1, [r3, #12]
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
    499c:	63e2      	str	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
    499e:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
    49a0:	6813      	ldr	r3, [r2, #0]
    49a2:	ea23 0301 	bic.w	r3, r3, r1
    49a6:	6013      	str	r3, [r2, #0]
  if (reset && (rstPin >= 0)) {
    49a8:	2e00      	cmp	r6, #0
    49aa:	f43f af59 	beq.w	4860 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0x24c>
    49ae:	e683      	b.n	46b8 <Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)+0xa4>

000049b0 <Adafruit_SSD1306::clearDisplay()>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
    49b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    49b4:	2100      	movs	r1, #0
    49b6:	1dda      	adds	r2, r3, #7
    49b8:	bf48      	it	mi
    49ba:	f103 020e 	addmi.w	r2, r3, #14
    49be:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    49c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    49c4:	10d2      	asrs	r2, r2, #3
    49c6:	fb03 f202 	mul.w	r2, r3, r2
    49ca:	f003 b8cb 	b.w	7b64 <memset>
    49ce:	bf00      	nop

000049d0 <Adafruit_SSD1306::display()>:
void Adafruit_SSD1306::display(void) {
    49d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49d4:	4604      	mov	r4, r0
  TRANSACTION_START
    49d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    49d8:	2800      	cmp	r0, #0
    49da:	d05b      	beq.n	4a94 <Adafruit_SSD1306::display()+0xc4>
    49dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    49de:	f7fe fccd 	bl	337c <TwoWire::setClock(unsigned long)>
  ssd1306_commandList(dlist1, sizeof(dlist1));
    49e2:	2205      	movs	r2, #5
    49e4:	4969      	ldr	r1, [pc, #420]	; (4b8c <Adafruit_SSD1306::display()+0x1bc>)
    49e6:	4620      	mov	r0, r4
    49e8:	f7ff fd98 	bl	451c <Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)>
  ssd1306_command1(WIDTH - 1); // Column end address
    49ec:	8921      	ldrh	r1, [r4, #8]
    49ee:	4620      	mov	r0, r4
    49f0:	3901      	subs	r1, #1
    49f2:	b2c9      	uxtb	r1, r1
    49f4:	f7ff fcf6 	bl	43e4 <Adafruit_SSD1306::ssd1306_command1(unsigned char)>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    49f8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    49fc:	8927      	ldrh	r7, [r4, #8]
    49fe:	1dd3      	adds	r3, r2, #7
    4a00:	bf48      	it	mi
    4a02:	f102 030e 	addmi.w	r3, r2, #14
    4a06:	10db      	asrs	r3, r3, #3
  uint8_t *ptr = buffer;
    4a08:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    4a0c:	fb17 f703 	smulbb	r7, r7, r3
    4a10:	b2bf      	uxth	r7, r7
  if (wire) { // I2C
    4a12:	2a00      	cmp	r2, #0
    4a14:	d04d      	beq.n	4ab2 <Adafruit_SSD1306::display()+0xe2>
		txBuffer[0] = (address << 1);
    4a16:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
		transmitting = 1;
    4a1a:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x40);
    4a1c:	2140      	movs	r1, #64	; 0x40
		txBuffer[0] = (address << 1);
    4a1e:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    4a20:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		txBufferLength = 1;
    4a24:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    4a28:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
    4a2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a2e:	6803      	ldr	r3, [r0, #0]
    4a30:	681b      	ldr	r3, [r3, #0]
    4a32:	4798      	blx	r3
    while (count--) {
    4a34:	b317      	cbz	r7, 4a7c <Adafruit_SSD1306::display()+0xac>
    4a36:	442f      	add	r7, r5
		return endTransmission(1);
    4a38:	46b0      	mov	r8, r6
      WIRE_WRITE(*ptr++);
    4a3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      bytesOut++;
    4a3c:	3601      	adds	r6, #1
      WIRE_WRITE(*ptr++);
    4a3e:	f815 1b01 	ldrb.w	r1, [r5], #1
    4a42:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
    4a44:	b2b6      	uxth	r6, r6
      WIRE_WRITE(*ptr++);
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	4798      	blx	r3
    while (count--) {
    4a4a:	42bd      	cmp	r5, r7
    4a4c:	d016      	beq.n	4a7c <Adafruit_SSD1306::display()+0xac>
      if (bytesOut >= WIRE_MAX) {
    4a4e:	2e88      	cmp	r6, #136	; 0x88
    4a50:	d1f3      	bne.n	4a3a <Adafruit_SSD1306::display()+0x6a>
    4a52:	2101      	movs	r1, #1
    4a54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a56:	f7fe fba9 	bl	31ac <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    4a5a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
        wire->beginTransmission(i2caddr);
    4a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        WIRE_WRITE((uint8_t)0x40);
    4a60:	2140      	movs	r1, #64	; 0x40
    4a62:	0052      	lsls	r2, r2, #1
        bytesOut = 1;
    4a64:	2601      	movs	r6, #1
		transmitting = 1;
    4a66:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
		txBufferLength = 1;
    4a6a:	f883 812f 	strb.w	r8, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    4a6e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        WIRE_WRITE((uint8_t)0x40);
    4a72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a74:	6803      	ldr	r3, [r0, #0]
    4a76:	681b      	ldr	r3, [r3, #0]
    4a78:	4798      	blx	r3
        bytesOut = 1;
    4a7a:	e7de      	b.n	4a3a <Adafruit_SSD1306::display()+0x6a>
		return endTransmission(1);
    4a7c:	2101      	movs	r1, #1
    4a7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a80:	f7fe fb94 	bl	31ac <TwoWire::endTransmission(unsigned char)>
  TRANSACTION_END
    4a84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4a86:	2800      	cmp	r0, #0
    4a88:	d07d      	beq.n	4b86 <Adafruit_SSD1306::display()+0x1b6>
    4a8a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
    4a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  TRANSACTION_END
    4a90:	f7fe bc74 	b.w	337c <TwoWire::setClock(unsigned long)>
  TRANSACTION_START
    4a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4a96:	b128      	cbz	r0, 4aa4 <Adafruit_SSD1306::display()+0xd4>
    4a98:	f104 0364 	add.w	r3, r4, #100	; 0x64
    4a9c:	e893 0006 	ldmia.w	r3, {r1, r2}
    4aa0:	f7ff fa00 	bl	3ea4 <SPIClass::beginTransaction(SPISettings)>
    4aa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4aa6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    4aa8:	6813      	ldr	r3, [r2, #0]
    4aaa:	ea23 0301 	bic.w	r3, r3, r1
    4aae:	6013      	str	r3, [r2, #0]
    4ab0:	e797      	b.n	49e2 <Adafruit_SSD1306::display()+0x12>
    SSD1306_MODE_DATA
    4ab2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4ab4:	6d21      	ldr	r1, [r4, #80]	; 0x50
    4ab6:	6813      	ldr	r3, [r2, #0]
  if (spi) {
    4ab8:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
    SSD1306_MODE_DATA
    4abc:	430b      	orrs	r3, r1
    4abe:	6013      	str	r3, [r2, #0]
    while (count--)
    4ac0:	b187      	cbz	r7, 4ae4 <Adafruit_SSD1306::display()+0x114>
    4ac2:	eb05 0c07 	add.w	ip, r5, r7
      SPIwrite(*ptr++);
    4ac6:	f815 7b01 	ldrb.w	r7, [r5], #1
  if (spi) {
    4aca:	f1be 0f00 	cmp.w	lr, #0
    4ace:	d03e      	beq.n	4b4e <Adafruit_SSD1306::display()+0x17e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4ad0:	f8de 2000 	ldr.w	r2, [lr]
		port().TDR = data;
    4ad4:	6657      	str	r7, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    4ad6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    4ad8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    4adc:	d0fb      	beq.n	4ad6 <Adafruit_SSD1306::display()+0x106>
    4ade:	6f53      	ldr	r3, [r2, #116]	; 0x74
    while (count--)
    4ae0:	45ac      	cmp	ip, r5
    4ae2:	d1f0      	bne.n	4ac6 <Adafruit_SSD1306::display()+0xf6>
  TRANSACTION_END
    4ae4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4ae6:	6d61      	ldr	r1, [r4, #84]	; 0x54
    4ae8:	6813      	ldr	r3, [r2, #0]
    4aea:	430b      	orrs	r3, r1
    4aec:	6013      	str	r3, [r2, #0]
    4aee:	f1be 0f00 	cmp.w	lr, #0
    4af2:	d02a      	beq.n	4b4a <Adafruit_SSD1306::display()+0x17a>
		if (interruptMasksUsed) {
    4af4:	f89e 3013 	ldrb.w	r3, [lr, #19]
    4af8:	b33b      	cbz	r3, 4b4a <Adafruit_SSD1306::display()+0x17a>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4afa:	07dc      	lsls	r4, r3, #31
    4afc:	d505      	bpl.n	4b0a <Adafruit_SSD1306::display()+0x13a>
    4afe:	f8de 1028 	ldr.w	r1, [lr, #40]	; 0x28
    4b02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4b06:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4b0a:	0798      	lsls	r0, r3, #30
    4b0c:	d505      	bpl.n	4b1a <Adafruit_SSD1306::display()+0x14a>
    4b0e:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
    4b12:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4b16:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    4b1a:	0759      	lsls	r1, r3, #29
    4b1c:	d505      	bpl.n	4b2a <Adafruit_SSD1306::display()+0x15a>
    4b1e:	f8de 1030 	ldr.w	r1, [lr, #48]	; 0x30
    4b22:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4b26:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    4b2a:	071a      	lsls	r2, r3, #28
    4b2c:	d505      	bpl.n	4b3a <Adafruit_SSD1306::display()+0x16a>
    4b2e:	f8de 1034 	ldr.w	r1, [lr, #52]	; 0x34
    4b32:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4b36:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4b3a:	06db      	lsls	r3, r3, #27
    4b3c:	d505      	bpl.n	4b4a <Adafruit_SSD1306::display()+0x17a>
    4b3e:	f8de 2038 	ldr.w	r2, [lr, #56]	; 0x38
    4b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4b46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *clkPort |= clkPinMask;  // Clock high
    4b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4b50:	f04f 0808 	mov.w	r8, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4b54:	2180      	movs	r1, #128	; 0x80
    4b56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
        *mosiPort |= mosiPinMask;
    4b58:	6832      	ldr	r2, [r6, #0]
      if (d & bit)
    4b5a:	420f      	tst	r7, r1
        *mosiPort |= mosiPinMask;
    4b5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4b5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
        *mosiPort |= mosiPinMask;
    4b62:	bf14      	ite	ne
    4b64:	4302      	orrne	r2, r0
        *mosiPort &= ~mosiPinMask;
    4b66:	4382      	biceq	r2, r0
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4b68:	f1b8 0801 	subs.w	r8, r8, #1
        *mosiPort &= ~mosiPinMask;
    4b6c:	6032      	str	r2, [r6, #0]
      *clkPort |= clkPinMask;  // Clock high
    4b6e:	681a      	ldr	r2, [r3, #0]
    4b70:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4b72:	ea42 0200 	orr.w	r2, r2, r0
    4b76:	601a      	str	r2, [r3, #0]
      *clkPort &= ~clkPinMask; // Clock low
    4b78:	681a      	ldr	r2, [r3, #0]
    4b7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4b7c:	ea22 0200 	bic.w	r2, r2, r0
    4b80:	601a      	str	r2, [r3, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    4b82:	d1e9      	bne.n	4b58 <Adafruit_SSD1306::display()+0x188>
    4b84:	e7ac      	b.n	4ae0 <Adafruit_SSD1306::display()+0x110>
  TRANSACTION_END
    4b86:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
    4b8a:	e7ab      	b.n	4ae4 <Adafruit_SSD1306::display()+0x114>
    4b8c:	60002298 	.word	0x60002298

00004b90 <Bounce::Bounce(unsigned char, unsigned long)>:
Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    4b90:	b538      	push	{r3, r4, r5, lr}
    4b92:	4b08      	ldr	r3, [pc, #32]	; (4bb4 <Bounce::Bounce(unsigned char, unsigned long)+0x24>)
    4b94:	4604      	mov	r4, r0
    4b96:	460d      	mov	r5, r1
  this->rebounce_millis = 0;
    4b98:	2100      	movs	r1, #0
    4b9a:	681b      	ldr	r3, [r3, #0]
  this->interval_millis = interval_millis;
    4b9c:	6042      	str	r2, [r0, #4]
	state = digitalRead(pin);
    4b9e:	4628      	mov	r0, r5
	previous_millis = millis();
    4ba0:	6023      	str	r3, [r4, #0]
  this->rebounce_millis = 0;
    4ba2:	60a1      	str	r1, [r4, #8]
	state = digitalRead(pin);
    4ba4:	f001 f8b8 	bl	5d18 <digitalRead>
    4ba8:	4603      	mov	r3, r0
    this->pin = pin;
    4baa:	7365      	strb	r5, [r4, #13]
}
    4bac:	4620      	mov	r0, r4
	state = digitalRead(pin);
    4bae:	7323      	strb	r3, [r4, #12]
}
    4bb0:	bd38      	pop	{r3, r4, r5, pc}
    4bb2:	bf00      	nop
    4bb4:	2000277c 	.word	0x2000277c

00004bb8 <Bounce::update()>:
{
    4bb8:	b538      	push	{r3, r4, r5, lr}
    4bba:	4604      	mov	r4, r0
	uint8_t newState = digitalRead(pin);
    4bbc:	7b40      	ldrb	r0, [r0, #13]
    4bbe:	f001 f8ab 	bl	5d18 <digitalRead>
	if (state != newState ) {
    4bc2:	7b23      	ldrb	r3, [r4, #12]
    4bc4:	4283      	cmp	r3, r0
    4bc6:	d006      	beq.n	4bd6 <Bounce::update()+0x1e>
    4bc8:	4a11      	ldr	r2, [pc, #68]	; (4c10 <Bounce::update()+0x58>)
  		if (millis() - previous_millis >= interval_millis) {
    4bca:	6825      	ldr	r5, [r4, #0]
    4bcc:	6813      	ldr	r3, [r2, #0]
    4bce:	6861      	ldr	r1, [r4, #4]
    4bd0:	1b5b      	subs	r3, r3, r5
    4bd2:	428b      	cmp	r3, r1
    4bd4:	d20f      	bcs.n	4bf6 <Bounce::update()+0x3e>
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    4bd6:	68a3      	ldr	r3, [r4, #8]
    4bd8:	b1bb      	cbz	r3, 4c0a <Bounce::update()+0x52>
    4bda:	490d      	ldr	r1, [pc, #52]	; (4c10 <Bounce::update()+0x58>)
    4bdc:	6820      	ldr	r0, [r4, #0]
    4bde:	680a      	ldr	r2, [r1, #0]
    4be0:	1a12      	subs	r2, r2, r0
    4be2:	4293      	cmp	r3, r2
    4be4:	d810      	bhi.n	4c08 <Bounce::update()+0x50>
		 return stateChanged = 1;
    4be6:	2301      	movs	r3, #1
    4be8:	6809      	ldr	r1, [r1, #0]
	 this->rebounce_millis = interval;
    4bea:	2200      	movs	r2, #0
		 return stateChanged = 1;
    4bec:	4618      	mov	r0, r3
        previous_millis = millis();
    4bee:	6021      	str	r1, [r4, #0]
	 this->rebounce_millis = interval;
    4bf0:	60a2      	str	r2, [r4, #8]
        return stateChanged = 1;
    4bf2:	73a3      	strb	r3, [r4, #14]
}
    4bf4:	bd38      	pop	{r3, r4, r5, pc}
    4bf6:	6811      	ldr	r1, [r2, #0]
        return stateChanged = 1;
    4bf8:	2301      	movs	r3, #1
	 this->rebounce_millis = interval;
    4bfa:	2200      	movs	r2, #0
  			state = newState;
    4bfc:	7320      	strb	r0, [r4, #12]
  			previous_millis = millis();
    4bfe:	6021      	str	r1, [r4, #0]
        return stateChanged = 1;
    4c00:	4618      	mov	r0, r3
	 this->rebounce_millis = interval;
    4c02:	60a2      	str	r2, [r4, #8]
        return stateChanged = 1;
    4c04:	73a3      	strb	r3, [r4, #14]
}
    4c06:	bd38      	pop	{r3, r4, r5, pc}
    4c08:	2300      	movs	r3, #0
	return stateChanged = 0;
    4c0a:	4618      	mov	r0, r3
        return stateChanged = 1;
    4c0c:	73a3      	strb	r3, [r4, #14]
}
    4c0e:	bd38      	pop	{r3, r4, r5, pc}
    4c10:	2000277c 	.word	0x2000277c

00004c14 <Bounce::fallingEdge()>:

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
    4c14:	7b83      	ldrb	r3, [r0, #14]
    4c16:	b123      	cbz	r3, 4c22 <Bounce::fallingEdge()+0xe>
    4c18:	7b00      	ldrb	r0, [r0, #12]
    4c1a:	fab0 f080 	clz	r0, r0
    4c1e:	0940      	lsrs	r0, r0, #5
    4c20:	4770      	bx	lr
    4c22:	4618      	mov	r0, r3
    4c24:	4770      	bx	lr
    4c26:	bf00      	nop

00004c28 <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)>:
  _pressedState = activeLow ? LOW : HIGH;
    4c28:	f083 0301 	eor.w	r3, r3, #1
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c2c:	f04f 0c32 	mov.w	ip, #50	; 0x32
  if (attachTo != BTN_VIRTUAL_PIN) {
    4c30:	29fe      	cmp	r1, #254	; 0xfe
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c32:	b510      	push	{r4, lr}
  _pressedState = activeLow ? LOW : HIGH;
    4c34:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c38:	f04f 0300 	mov.w	r3, #0
    4c3c:	4604      	mov	r4, r0
  pin = attachTo;
    4c3e:	7101      	strb	r1, [r0, #4]
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c40:	71c3      	strb	r3, [r0, #7]
    4c42:	7283      	strb	r3, [r0, #10]
    4c44:	82c3      	strh	r3, [r0, #22]
    4c46:	8303      	strh	r3, [r0, #24]
    4c48:	6283      	str	r3, [r0, #40]	; 0x28
    4c4a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  longclick_retriggerable = false;
    4c4e:	7503      	strb	r3, [r0, #20]
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c50:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    4c54:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
    4c58:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    4c5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
    4c60:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
    4c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4c68:	9802      	ldr	r0, [sp, #8]
    4c6a:	8123      	strh	r3, [r4, #8]
    4c6c:	f04f 03c8 	mov.w	r3, #200	; 0xc8
  hw = hardware;
    4c70:	65e0      	str	r0, [r4, #92]	; 0x5c
Button2::Button2(byte attachTo, byte buttonMode /* = INPUT_PULLUP */, boolean activeLow /* = true */, Hardware *hardware /* = ArduinoHardware() */) {
    4c72:	e9c4 c307 	strd	ip, r3, [r4, #28]
    4c76:	f44f 7396 	mov.w	r3, #300	; 0x12c
    4c7a:	6263      	str	r3, [r4, #36]	; 0x24
  if (attachTo != BTN_VIRTUAL_PIN) {
    4c7c:	d00e      	beq.n	4c9c <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)+0x74>
    hw->pinMode(attachTo, buttonMode);
    4c7e:	6803      	ldr	r3, [r0, #0]
    4c80:	685b      	ldr	r3, [r3, #4]
    4c82:	4798      	blx	r3
  if (get_state_cb != NULL) {
    4c84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4c86:	b183      	cbz	r3, 4caa <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)+0x82>
    return get_state_cb();
    4c88:	4798      	blx	r3
  id = _nextID;
    4c8a:	4b0a      	ldr	r3, [pc, #40]	; (4cb4 <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)+0x8c>)
  state = _getState();
    4c8c:	7160      	strb	r0, [r4, #5]
  id = _nextID;
    4c8e:	681a      	ldr	r2, [r3, #0]
  prev_state = state;
    4c90:	71a0      	strb	r0, [r4, #6]
}
    4c92:	4620      	mov	r0, r4
  _nextID++;
    4c94:	1c51      	adds	r1, r2, #1
  id = _nextID;
    4c96:	6022      	str	r2, [r4, #0]
  _nextID++;
    4c98:	6019      	str	r1, [r3, #0]
}
    4c9a:	bd10      	pop	{r4, pc}
    4c9c:	468c      	mov	ip, r1
    return hw->digitalRead(pin);
    4c9e:	6803      	ldr	r3, [r0, #0]
    4ca0:	4661      	mov	r1, ip
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	4798      	blx	r3
    4ca6:	b2c0      	uxtb	r0, r0
    4ca8:	e7ef      	b.n	4c8a <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)+0x62>
    4caa:	f894 c004 	ldrb.w	ip, [r4, #4]
    4cae:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    4cb0:	e7f5      	b.n	4c9e <Button2::Button2(unsigned char, unsigned char, bool, Hardware*)+0x76>
    4cb2:	bf00      	nop
    4cb4:	200021fc 	.word	0x200021fc

00004cb8 <Button2::setLongClickTime(unsigned int)>:
  longclick_time_ms = ms;
    4cb8:	6201      	str	r1, [r0, #32]
}
    4cba:	4770      	bx	lr

00004cbc <Button2::setClickHandler(void (*)(Button2&))>:
  click_cb = f;
    4cbc:	6441      	str	r1, [r0, #68]	; 0x44
}
    4cbe:	4770      	bx	lr

00004cc0 <Button2::setDoubleClickHandler(void (*)(Button2&))>:
  double_cb = f;
    4cc0:	6501      	str	r1, [r0, #80]	; 0x50
}
    4cc2:	4770      	bx	lr

00004cc4 <Button2::_checkForLongClick(long)>:
  if (longclick_detected_cb == NULL) return;
    4cc4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    4cc6:	b1da      	cbz	r2, 4d00 <Button2::_checkForLongClick(long)+0x3c>
  if (longclick_reported) return;
    4cc8:	7e43      	ldrb	r3, [r0, #25]
void Button2::_checkForLongClick(long now) {
    4cca:	b510      	push	{r4, lr}
    4ccc:	4604      	mov	r4, r0
  if (longclick_reported) return;
    4cce:	b9b3      	cbnz	r3, 4cfe <Button2::_checkForLongClick(long)+0x3a>
  if (now - down_ms < (longclick_time_ms * (longclick_counter + 1))) return;
    4cd0:	6923      	ldr	r3, [r4, #16]
    4cd2:	8ac0      	ldrh	r0, [r0, #22]
    4cd4:	1ac9      	subs	r1, r1, r3
    4cd6:	6a23      	ldr	r3, [r4, #32]
    4cd8:	f100 0c01 	add.w	ip, r0, #1
    4cdc:	fb00 3303 	mla	r3, r0, r3, r3
    4ce0:	4299      	cmp	r1, r3
    4ce2:	d30c      	bcc.n	4cfe <Button2::_checkForLongClick(long)+0x3a>
  if (!longclick_retriggerable) {
    4ce4:	7d23      	ldrb	r3, [r4, #20]
    4ce6:	b90b      	cbnz	r3, 4cec <Button2::_checkForLongClick(long)+0x28>
    longclick_reported = true;
    4ce8:	2301      	movs	r3, #1
    4cea:	7663      	strb	r3, [r4, #25]
  last_click_count = 1;
    4cec:	f240 3301 	movw	r3, #769	; 0x301
  longclick_detected_cb(*this);
    4cf0:	4620      	mov	r0, r4
  longclick_counter++;
    4cf2:	f8a4 c016 	strh.w	ip, [r4, #22]
  last_click_count = 1;
    4cf6:	8123      	strh	r3, [r4, #8]
  longclick_detected_cb(*this);
    4cf8:	4790      	blx	r2
  longclick_detected = true;
    4cfa:	2301      	movs	r3, #1
    4cfc:	7623      	strb	r3, [r4, #24]
}
    4cfe:	bd10      	pop	{r4, pc}
    4d00:	4770      	bx	lr
    4d02:	bf00      	nop

00004d04 <Button2::_handlePress(long)>:
void Button2::_handlePress(long now) {
    4d04:	b510      	push	{r4, lr}
  if (prev_state != _pressedState) {
    4d06:	7982      	ldrb	r2, [r0, #6]
void Button2::_handlePress(long now) {
    4d08:	b082      	sub	sp, #8
  if (prev_state != _pressedState) {
    4d0a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void Button2::_handlePress(long now) {
    4d0e:	4604      	mov	r4, r0
  if (prev_state != _pressedState) {
    4d10:	429a      	cmp	r2, r3
    4d12:	d006      	beq.n	4d22 <Button2::_handlePress(long)+0x1e>
  pressed_triggered = false;
    4d14:	2300      	movs	r3, #0
  click_ms = down_ms;
    4d16:	e9c0 1103 	strd	r1, r1, [r0, #12]
  pressed_triggered = false;
    4d1a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
    4d1e:	b002      	add	sp, #8
    4d20:	bd10      	pop	{r4, pc}
  if (!pressed_triggered) {
    4d22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    4d26:	b923      	cbnz	r3, 4d32 <Button2::_handlePress(long)+0x2e>
    if (now - down_ms >= debounce_time_ms) {
    4d28:	6903      	ldr	r3, [r0, #16]
    4d2a:	69c2      	ldr	r2, [r0, #28]
    4d2c:	1acb      	subs	r3, r1, r3
    4d2e:	4293      	cmp	r3, r2
    4d30:	d208      	bcs.n	4d44 <Button2::_handlePress(long)+0x40>
  if (click_count == 1) {
    4d32:	79e3      	ldrb	r3, [r4, #7]
    4d34:	2b01      	cmp	r3, #1
    4d36:	d1f2      	bne.n	4d1e <Button2::_handlePress(long)+0x1a>
    _checkForLongClick(now);
    4d38:	4620      	mov	r0, r4
}
    4d3a:	b002      	add	sp, #8
    4d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _checkForLongClick(now);
    4d40:	f7ff bfc0 	b.w	4cc4 <Button2::_checkForLongClick(long)>
  click_count++;
    4d44:	79c3      	ldrb	r3, [r0, #7]
      pressed_triggered = true;
    4d46:	2201      	movs	r2, #1
  click_count++;
    4d48:	4413      	add	r3, r2
      pressed_triggered = true;
    4d4a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
  click_count++;
    4d4e:	71c3      	strb	r3, [r0, #7]
  if (change_cb != NULL) change_cb(*this);
    4d50:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4d52:	b113      	cbz	r3, 4d5a <Button2::_handlePress(long)+0x56>
    4d54:	9101      	str	r1, [sp, #4]
    4d56:	4798      	blx	r3
    4d58:	9901      	ldr	r1, [sp, #4]
  if (pressed_cb != NULL) pressed_cb(*this);
    4d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d0e8      	beq.n	4d32 <Button2::_handlePress(long)+0x2e>
    4d60:	4620      	mov	r0, r4
    4d62:	9101      	str	r1, [sp, #4]
    4d64:	4798      	blx	r3
    4d66:	9901      	ldr	r1, [sp, #4]
    4d68:	e7e3      	b.n	4d32 <Button2::_handlePress(long)+0x2e>
    4d6a:	bf00      	nop

00004d6c <Button2::_reportClicks()>:
  if (click_count == 0) return;
    4d6c:	79c3      	ldrb	r3, [r0, #7]
    4d6e:	b1e3      	cbz	r3, 4daa <Button2::_reportClicks()+0x3e>
  if (click_count == 1) {
    4d70:	2b01      	cmp	r3, #1
  last_click_count = click_count;
    4d72:	7203      	strb	r3, [r0, #8]
void Button2::_reportClicks() {
    4d74:	b510      	push	{r4, lr}
    4d76:	4604      	mov	r4, r0
  if (click_count == 1) {
    4d78:	d00d      	beq.n	4d96 <Button2::_reportClicks()+0x2a>
  } else if (click_count == 2) {
    4d7a:	2b02      	cmp	r3, #2
    4d7c:	d01c      	beq.n	4db8 <Button2::_reportClicks()+0x4c>
      last_click_type = triple_click;
    4d7e:	2202      	movs	r2, #2
      if (triple_cb != NULL) triple_cb(*this);
    4d80:	6d43      	ldr	r3, [r0, #84]	; 0x54
      last_click_type = triple_click;
    4d82:	7242      	strb	r2, [r0, #9]
      if (triple_cb != NULL) triple_cb(*this);
    4d84:	b103      	cbz	r3, 4d88 <Button2::_reportClicks()+0x1c>
    4d86:	4798      	blx	r3
  click_count = 0;
    4d88:	2300      	movs	r3, #0
  was_pressed = true;
    4d8a:	2201      	movs	r2, #1
  click_count = 0;
    4d8c:	71e3      	strb	r3, [r4, #7]
  was_pressed = true;
    4d8e:	72a2      	strb	r2, [r4, #10]
  click_ms = 0;
    4d90:	60e3      	str	r3, [r4, #12]
  longclick_detected = false;
    4d92:	8323      	strh	r3, [r4, #24]
}
    4d94:	bd10      	pop	{r4, pc}
    if (longclick_detected) {
    4d96:	7e03      	ldrb	r3, [r0, #24]
    4d98:	b143      	cbz	r3, 4dac <Button2::_reportClicks()+0x40>
      last_click_type = long_click;
    4d9a:	2203      	movs	r2, #3
      if (long_cb != NULL) long_cb(*this);
    4d9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
      last_click_type = long_click;
    4d9e:	7242      	strb	r2, [r0, #9]
      if (long_cb != NULL) long_cb(*this);
    4da0:	b103      	cbz	r3, 4da4 <Button2::_reportClicks()+0x38>
    4da2:	4798      	blx	r3
      longclick_counter = 0;
    4da4:	2300      	movs	r3, #0
    4da6:	82e3      	strh	r3, [r4, #22]
    4da8:	e7ee      	b.n	4d88 <Button2::_reportClicks()+0x1c>
    4daa:	4770      	bx	lr
      if (click_cb != NULL) click_cb (*this);
    4dac:	6c42      	ldr	r2, [r0, #68]	; 0x44
      last_click_type = single_click;
    4dae:	7243      	strb	r3, [r0, #9]
      if (click_cb != NULL) click_cb (*this);
    4db0:	2a00      	cmp	r2, #0
    4db2:	d0e9      	beq.n	4d88 <Button2::_reportClicks()+0x1c>
    4db4:	4790      	blx	r2
    4db6:	e7e7      	b.n	4d88 <Button2::_reportClicks()+0x1c>
      last_click_type = double_click;
    4db8:	2201      	movs	r2, #1
      if (double_cb != NULL) double_cb(*this);
    4dba:	6d03      	ldr	r3, [r0, #80]	; 0x50
      last_click_type = double_click;
    4dbc:	7242      	strb	r2, [r0, #9]
      if (double_cb != NULL) double_cb(*this);
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d1e1      	bne.n	4d86 <Button2::_reportClicks()+0x1a>
    4dc2:	e7e1      	b.n	4d88 <Button2::_reportClicks()+0x1c>

00004dc4 <Button2::_releasedNow(long)>:
  down_time_ms = now - down_ms;
    4dc4:	6902      	ldr	r2, [r0, #16]
  if (down_time_ms < debounce_time_ms) return;
    4dc6:	69c3      	ldr	r3, [r0, #28]
  down_time_ms = now - down_ms;
    4dc8:	1a89      	subs	r1, r1, r2
  if (down_time_ms < debounce_time_ms) return;
    4dca:	4299      	cmp	r1, r3
  down_time_ms = now - down_ms;
    4dcc:	6281      	str	r1, [r0, #40]	; 0x28
  if (down_time_ms < debounce_time_ms) return;
    4dce:	d313      	bcc.n	4df8 <Button2::_releasedNow(long)+0x34>
  if (change_cb != NULL) change_cb(*this);
    4dd0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void Button2::_releasedNow(long now) {
    4dd2:	b510      	push	{r4, lr}
    4dd4:	4604      	mov	r4, r0
  if (change_cb != NULL) change_cb(*this);
    4dd6:	b103      	cbz	r3, 4dda <Button2::_releasedNow(long)+0x16>
    4dd8:	4798      	blx	r3
  if (released_cb != NULL) released_cb(*this);
    4dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ddc:	b10b      	cbz	r3, 4de2 <Button2::_releasedNow(long)+0x1e>
    4dde:	4620      	mov	r0, r4
    4de0:	4798      	blx	r3
  if (tap_cb != NULL) tap_cb(*this);
    4de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4de4:	b10b      	cbz	r3, 4dea <Button2::_releasedNow(long)+0x26>
    4de6:	4620      	mov	r0, r4
    4de8:	4798      	blx	r3
  if (down_time_ms >= longclick_time_ms) {
    4dea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4dec:	6a23      	ldr	r3, [r4, #32]
    4dee:	429a      	cmp	r2, r3
    4df0:	d301      	bcc.n	4df6 <Button2::_releasedNow(long)+0x32>
    longclick_detected = true;
    4df2:	2301      	movs	r3, #1
    4df4:	7623      	strb	r3, [r4, #24]
}
    4df6:	bd10      	pop	{r4, pc}
    4df8:	4770      	bx	lr
    4dfa:	bf00      	nop

00004dfc <Button2::loop()>:
  if (pin == BTN_UNDEFINED_PIN) return;
    4dfc:	7901      	ldrb	r1, [r0, #4]
    4dfe:	29ff      	cmp	r1, #255	; 0xff
    4e00:	d01d      	beq.n	4e3e <Button2::loop()+0x42>
  if (get_state_cb != NULL) {
    4e02:	6b03      	ldr	r3, [r0, #48]	; 0x30
void Button2::loop() {
    4e04:	b510      	push	{r4, lr}
  prev_state = state;
    4e06:	7942      	ldrb	r2, [r0, #5]
    4e08:	4604      	mov	r4, r0
    4e0a:	7182      	strb	r2, [r0, #6]
  if (get_state_cb != NULL) {
    4e0c:	b1c3      	cbz	r3, 4e40 <Button2::loop()+0x44>
    return get_state_cb();
    4e0e:	4798      	blx	r3
  if (state == _pressedState) {
    4e10:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
  state = _getState();
    4e14:	7160      	strb	r0, [r4, #5]
  if (state == _pressedState) {
    4e16:	4283      	cmp	r3, r0
    4e18:	d00a      	beq.n	4e30 <Button2::loop()+0x34>
  if (prev_state == _pressedState) {
    4e1a:	79a2      	ldrb	r2, [r4, #6]
    4e1c:	4910      	ldr	r1, [pc, #64]	; (4e60 <Button2::loop()+0x64>)
    4e1e:	429a      	cmp	r2, r3
    4e20:	6809      	ldr	r1, [r1, #0]
    4e22:	d018      	beq.n	4e56 <Button2::loop()+0x5a>
  if (now - click_ms > doubleclick_time_ms) {
    4e24:	68e2      	ldr	r2, [r4, #12]
    4e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e28:	1a89      	subs	r1, r1, r2
    4e2a:	4299      	cmp	r1, r3
    4e2c:	d80e      	bhi.n	4e4c <Button2::loop()+0x50>
}
    4e2e:	bd10      	pop	{r4, pc}
    4e30:	4b0b      	ldr	r3, [pc, #44]	; (4e60 <Button2::loop()+0x64>)
    _handlePress(millis());
    4e32:	4620      	mov	r0, r4
    4e34:	6819      	ldr	r1, [r3, #0]
}
    4e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _handlePress(millis());
    4e3a:	f7ff bf63 	b.w	4d04 <Button2::_handlePress(long)>
    4e3e:	4770      	bx	lr
    4e40:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    return hw->digitalRead(pin);
    4e42:	6803      	ldr	r3, [r0, #0]
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	4798      	blx	r3
    4e48:	b2c0      	uxtb	r0, r0
    4e4a:	e7e1      	b.n	4e10 <Button2::loop()+0x14>
    _reportClicks();
    4e4c:	4620      	mov	r0, r4
}
    4e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _reportClicks();
    4e52:	f7ff bf8b 	b.w	4d6c <Button2::_reportClicks()>
    _releasedNow(now);
    4e56:	4620      	mov	r0, r4
}
    4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _releasedNow(now);
    4e5c:	f7ff bfb2 	b.w	4dc4 <Button2::_releasedNow(long)>
    4e60:	2000277c 	.word	0x2000277c

00004e64 <EventResponder::runFromInterrupt()>:
{
    4e64:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4e66:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4e6a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    4e6c:	4c0c      	ldr	r4, [pc, #48]	; (4ea0 <EventResponder::runFromInterrupt()+0x3c>)
    4e6e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4e70:	b180      	cbz	r0, 4e94 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    4e72:	4e0c      	ldr	r6, [pc, #48]	; (4ea4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    4e74:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    4e76:	6943      	ldr	r3, [r0, #20]
    4e78:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    4e7a:	b173      	cbz	r3, 4e9a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4e7c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4e7e:	b902      	cbnz	r2, 4e82 <EventResponder::runFromInterrupt()+0x1e>
    4e80:	b662      	cpsie	i
			(*(first->_function))(*first);
    4e82:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    4e84:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4e86:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4e88:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4e8c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    4e8e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4e90:	2800      	cmp	r0, #0
    4e92:	d1f0      	bne.n	4e76 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    4e94:	b902      	cbnz	r2, 4e98 <EventResponder::runFromInterrupt()+0x34>
    4e96:	b662      	cpsie	i
}
    4e98:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    4e9a:	6033      	str	r3, [r6, #0]
    4e9c:	e7ef      	b.n	4e7e <EventResponder::runFromInterrupt()+0x1a>
    4e9e:	bf00      	nop
    4ea0:	200021d8 	.word	0x200021d8
    4ea4:	200021d4 	.word	0x200021d4

00004ea8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    4ea8:	f7ff bfdc 	b.w	4e64 <EventResponder::runFromInterrupt()>

00004eac <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4eac:	4904      	ldr	r1, [pc, #16]	; (4ec0 <systick_isr+0x14>)
	systick_millis_count++;
    4eae:	4a05      	ldr	r2, [pc, #20]	; (4ec4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    4eb0:	6849      	ldr	r1, [r1, #4]
    4eb2:	4b05      	ldr	r3, [pc, #20]	; (4ec8 <systick_isr+0x1c>)
    4eb4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    4eb6:	6813      	ldr	r3, [r2, #0]
    4eb8:	3301      	adds	r3, #1
    4eba:	6013      	str	r3, [r2, #0]
}
    4ebc:	4770      	bx	lr
    4ebe:	bf00      	nop
    4ec0:	e0001000 	.word	0xe0001000
    4ec4:	2000277c 	.word	0x2000277c
    4ec8:	20002778 	.word	0x20002778

00004ecc <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
    4ecc:	2001      	movs	r0, #1
    4ece:	4770      	bx	lr

00004ed0 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    4ed0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    4ed4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    4ed8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    4eda:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4edc:	4293      	cmp	r3, r2
    4ede:	d202      	bcs.n	4ee6 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    4ee0:	3a01      	subs	r2, #1
    4ee2:	1ad0      	subs	r0, r2, r3
}
    4ee4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4ee6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    4ee8:	3901      	subs	r1, #1
    4eea:	440a      	add	r2, r1
    4eec:	1ad0      	subs	r0, r2, r3
    4eee:	4770      	bx	lr

00004ef0 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4ef0:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    4ef2:	b672      	cpsid	i
	head = rx_buffer_head_;
    4ef4:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    4ef8:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4efc:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    4efe:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    4f00:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    4f02:	bf3c      	itt	cc
    4f04:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    4f06:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    4f08:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    4f0a:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    4f0c:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    4f0e:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    4f12:	4418      	add	r0, r3
    4f14:	4770      	bx	lr
    4f16:	bf00      	nop

00004f18 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    4f18:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4f1c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4f1e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4f22:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4f24:	b29b      	uxth	r3, r3
	if (head == tail) {
    4f26:	4299      	cmp	r1, r3
{
    4f28:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4f2a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4f2c:	d014      	beq.n	4f58 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4f2e:	3301      	adds	r3, #1
    4f30:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    4f32:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4f34:	4298      	cmp	r0, r3
    4f36:	bf98      	it	ls
    4f38:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    4f3a:	4299      	cmp	r1, r3
    4f3c:	d806      	bhi.n	4f4c <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    4f3e:	1a5b      	subs	r3, r3, r1
    4f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4f42:	5cd0      	ldrb	r0, [r2, r3]
    4f44:	b2c0      	uxtb	r0, r0
	}
}
    4f46:	f85d 4b04 	ldr.w	r4, [sp], #4
    4f4a:	4770      	bx	lr
		return rx_buffer_[tail];
    4f4c:	6a12      	ldr	r2, [r2, #32]
}
    4f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    4f52:	5cd0      	ldrb	r0, [r2, r3]
    4f54:	b2c0      	uxtb	r0, r0
}
    4f56:	4770      	bx	lr
		__disable_irq();
    4f58:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    4f5a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    4f5e:	b280      	uxth	r0, r0
		if (head == tail) {
    4f60:	4281      	cmp	r1, r0
    4f62:	d001      	beq.n	4f68 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    4f64:	b662      	cpsie	i
    4f66:	e7e2      	b.n	4f2e <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    4f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f6a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4f6e:	d103      	bne.n	4f78 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    4f70:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    4f74:	b662      	cpsie	i
			return c;
    4f76:	e7e6      	b.n	4f46 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4f78:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    4f7a:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    4f7c:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    4f7e:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    4f80:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4f84:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    4f88:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    4f8a:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    4f8e:	704b      	strb	r3, [r1, #1]
    4f90:	e7f0      	b.n	4f74 <HardwareSerialIMXRT::peek()+0x5c>
    4f92:	bf00      	nop

00004f94 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    4f94:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4f98:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4f9a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4f9e:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4fa0:	b29b      	uxth	r3, r3
	if (head == tail) {
    4fa2:	4299      	cmp	r1, r3
{
    4fa4:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4fa6:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4fa8:	d025      	beq.n	4ff6 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4faa:	3301      	adds	r3, #1
    4fac:	6b94      	ldr	r4, [r2, #56]	; 0x38
    4fae:	429c      	cmp	r4, r3
    4fb0:	d916      	bls.n	4fe0 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    4fb2:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    4fb4:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    4fb8:	4298      	cmp	r0, r3
    4fba:	d917      	bls.n	4fec <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    4fbc:	6a10      	ldr	r0, [r2, #32]
    4fbe:	5cc0      	ldrb	r0, [r0, r3]
    4fc0:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    4fc2:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    4fc4:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    4fc8:	b145      	cbz	r5, 4fdc <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    4fca:	4299      	cmp	r1, r3
    4fcc:	d31c      	bcc.n	5008 <HardwareSerialIMXRT::read()+0x74>
    4fce:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    4fd0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    4fd2:	4299      	cmp	r1, r3
    4fd4:	d302      	bcc.n	4fdc <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    4fd6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    4fd8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    4fdc:	bc30      	pop	{r4, r5}
    4fde:	4770      	bx	lr
    4fe0:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    4fe4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4fe6:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    4fe8:	4298      	cmp	r0, r3
    4fea:	d8e7      	bhi.n	4fbc <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    4fec:	1a18      	subs	r0, r3, r0
    4fee:	6a55      	ldr	r5, [r2, #36]	; 0x24
    4ff0:	5c28      	ldrb	r0, [r5, r0]
    4ff2:	b2c0      	uxtb	r0, r0
    4ff4:	e7e5      	b.n	4fc2 <HardwareSerialIMXRT::read()+0x2e>
    4ff6:	4608      	mov	r0, r1
		__disable_irq();
    4ff8:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    4ffa:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    4ffe:	b289      	uxth	r1, r1
		if (head == tail) {
    5000:	4288      	cmp	r0, r1
    5002:	d004      	beq.n	500e <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    5004:	b662      	cpsie	i
    5006:	e7d0      	b.n	4faa <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    5008:	440c      	add	r4, r1
    500a:	1ae3      	subs	r3, r4, r3
    500c:	e7e0      	b.n	4fd0 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    500e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5010:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    5014:	d103      	bne.n	501e <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    5016:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    501a:	b662      	cpsie	i
			return c;
    501c:	e7de      	b.n	4fdc <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    501e:	69e0      	ldr	r0, [r4, #28]
    5020:	f3c0 0009 	ubfx	r0, r0, #0, #10
    5024:	e7f9      	b.n	501a <HardwareSerialIMXRT::read()+0x86>
    5026:	bf00      	nop

00005028 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    5028:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    502c:	b143      	cbz	r3, 5040 <HardwareSerialIMXRT::flush()+0x18>
{
    502e:	b510      	push	{r4, lr}
    5030:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    5032:	f002 fa41 	bl	74b8 <yield>
    5036:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    503a:	2b00      	cmp	r3, #0
    503c:	d1f9      	bne.n	5032 <HardwareSerialIMXRT::flush()+0xa>
}
    503e:	bd10      	pop	{r4, pc}
    5040:	4770      	bx	lr
    5042:	bf00      	nop

00005044 <HardwareSerialIMXRT::end()>:
{
    5044:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    5046:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    504a:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    504e:	6809      	ldr	r1, [r1, #0]
    5050:	4211      	tst	r1, r2
    5052:	d028      	beq.n	50a6 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    5054:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    5058:	4604      	mov	r4, r0
    505a:	b132      	cbz	r2, 506a <HardwareSerialIMXRT::end()+0x26>
    505c:	f002 fa2c 	bl	74b8 <yield>
    5060:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5064:	2b00      	cmp	r3, #0
    5066:	d1f9      	bne.n	505c <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    5068:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    506a:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    506c:	4a0e      	ldr	r2, [pc, #56]	; (50a8 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    506e:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    5070:	7e20      	ldrb	r0, [r4, #24]
    5072:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5076:	7d00      	ldrb	r0, [r0, #20]
    5078:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    507c:	6845      	ldr	r5, [r0, #4]
    507e:	2005      	movs	r0, #5
    5080:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    5082:	7e65      	ldrb	r5, [r4, #25]
    5084:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5088:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    508c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    5090:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    5092:	6852      	ldr	r2, [r2, #4]
    5094:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    5096:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    509a:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    509e:	b113      	cbz	r3, 50a6 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    50a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    50a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    50a6:	bd38      	pop	{r3, r4, r5, pc}
    50a8:	200009c0 	.word	0x200009c0

000050ac <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    50ac:	ee07 1a90 	vmov	s15, r1
    50b0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 531c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    50b4:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    50b6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    50ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    50be:	ed9f 6a98 	vldr	s12, [pc, #608]	; 5320 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    50c2:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    50c6:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    50ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    50ce:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    50d0:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    50d2:	2401      	movs	r4, #1
		float div = base / (float)osr;
    50d4:	ee07 1a90 	vmov	s15, r1
    50d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    50dc:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    50e0:	ee77 7a05 	vadd.f32	s15, s14, s10
    50e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    50e8:	ee17 3a90 	vmov	r3, s15
    50ec:	4563      	cmp	r3, ip
    50ee:	bfa8      	it	ge
    50f0:	4663      	movge	r3, ip
    50f2:	2b01      	cmp	r3, #1
    50f4:	bfb8      	it	lt
    50f6:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    50f8:	ee07 3a90 	vmov	s15, r3
    50fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    5100:	ee76 6ac7 	vsub.f32	s13, s13, s14
    5104:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    5108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5110:	bf48      	it	mi
    5112:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    5116:	eef4 7ac6 	vcmpe.f32	s15, s12
    511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    511e:	d803      	bhi.n	5128 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    5120:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    5124:	468e      	mov	lr, r1
			bestdiv = divint;
    5126:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    5128:	3101      	adds	r1, #1
    512a:	2921      	cmp	r1, #33	; 0x21
    512c:	d1d2      	bne.n	50d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    512e:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    5130:	6943      	ldr	r3, [r0, #20]
    5132:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    5136:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    513a:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    513e:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    5140:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    5144:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    5148:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    514c:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    5150:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    5154:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    5156:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    5158:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    515c:	eba1 010c 	sub.w	r1, r1, ip
    5160:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    5164:	6839      	ldr	r1, [r7, #0]
    5166:	691e      	ldr	r6, [r3, #16]
    5168:	ea41 0106 	orr.w	r1, r1, r6
    516c:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    516e:	bf14      	ite	ne
    5170:	2101      	movne	r1, #1
    5172:	2100      	moveq	r1, #0
    5174:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    5176:	f040 80ac 	bne.w	52d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    517a:	7e01      	ldrb	r1, [r0, #24]
    517c:	4e69      	ldr	r6, [pc, #420]	; (5324 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    517e:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    5182:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 5344 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    5186:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    518a:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    518e:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    5192:	68b9      	ldr	r1, [r7, #8]
    5194:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    5198:	6879      	ldr	r1, [r7, #4]
    519a:	f8d8 7018 	ldr.w	r7, [r8, #24]
    519e:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    51a0:	f1ba 0f00 	cmp.w	sl, #0
    51a4:	d003      	beq.n	51ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    51a6:	f8d8 1020 	ldr.w	r1, [r8, #32]
    51aa:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    51ae:	7e47      	ldrb	r7, [r0, #25]
    51b0:	21d9      	movs	r1, #217	; 0xd9
    51b2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    51b6:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    51ba:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    51be:	f8dc 7008 	ldr.w	r7, [ip, #8]
    51c2:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    51c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    51c8:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    51cc:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    51ce:	7e41      	ldrb	r1, [r0, #25]
    51d0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    51d4:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    51d6:	b10f      	cbz	r7, 51dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    51d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
    51da:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    51dc:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    51e0:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    51e4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    51e8:	bfcc      	ite	gt
    51ea:	f04f 0e00 	movgt.w	lr, #0
    51ee:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    51f2:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    51f6:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    51fa:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    51fc:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    51fe:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    5200:	7859      	ldrb	r1, [r3, #1]
    5202:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    5206:	2100      	movs	r1, #0
    5208:	60e9      	str	r1, [r5, #12]
    520a:	4947      	ldr	r1, [pc, #284]	; (5328 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    520c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    5210:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    5212:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    5216:	4c45      	ldr	r4, [pc, #276]	; (532c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    5218:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    521c:	784f      	ldrb	r7, [r1, #1]
    521e:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    5222:	4b43      	ldr	r3, [pc, #268]	; (5330 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    5224:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    5226:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    522a:	6944      	ldr	r4, [r0, #20]
    522c:	7861      	ldrb	r1, [r4, #1]
    522e:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    5232:	f001 011f 	and.w	r1, r1, #31
    5236:	009b      	lsls	r3, r3, #2
    5238:	fa0e f101 	lsl.w	r1, lr, r1
    523c:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    523e:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    5240:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5242:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    5246:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    5248:	0753      	lsls	r3, r2, #29
    524a:	d43e      	bmi.n	52ca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    524c:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    5250:	f002 010f 	and.w	r1, r2, #15
    5254:	2904      	cmp	r1, #4
    5256:	bf08      	it	eq
    5258:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    525c:	0697      	lsls	r7, r2, #26
    525e:	d52e      	bpl.n	52be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    5260:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    5262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    5266:	2900      	cmp	r1, #0
    5268:	d13a      	bne.n	52e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    526a:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    526c:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    526e:	d503      	bpl.n	5278 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    5270:	692b      	ldr	r3, [r5, #16]
    5272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5276:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    5278:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    527a:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    527c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    5280:	bf48      	it	mi
    5282:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    5286:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    5288:	05d3      	lsls	r3, r2, #23
    528a:	d503      	bpl.n	5294 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    528c:	692b      	ldr	r3, [r5, #16]
    528e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5292:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    5294:	68a3      	ldr	r3, [r4, #8]
    5296:	b183      	cbz	r3, 52ba <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5298:	4e26      	ldr	r6, [pc, #152]	; (5334 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    529a:	7834      	ldrb	r4, [r6, #0]
    529c:	2c00      	cmp	r4, #0
    529e:	d03a      	beq.n	5316 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    52a0:	1e61      	subs	r1, r4, #1
    52a2:	4d25      	ldr	r5, [pc, #148]	; (5338 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    52a4:	b2c9      	uxtb	r1, r1
    52a6:	1f2b      	subs	r3, r5, #4
    52a8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    52ac:	e001      	b.n	52b2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    52ae:	4299      	cmp	r1, r3
    52b0:	d025      	beq.n	52fe <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    52b2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    52b6:	4290      	cmp	r0, r2
    52b8:	d1f9      	bne.n	52ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    52ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    52be:	7e81      	ldrb	r1, [r0, #26]
    52c0:	2900      	cmp	r1, #0
    52c2:	d0d2      	beq.n	526a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    52c4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    52c8:	e7cf      	b.n	526a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    52ca:	4b1c      	ldr	r3, [pc, #112]	; (533c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    52cc:	ea4c 0303 	orr.w	r3, ip, r3
    52d0:	e7be      	b.n	5250 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    52d2:	7e47      	ldrb	r7, [r0, #25]
    52d4:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    52d8:	4e12      	ldr	r6, [pc, #72]	; (5324 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    52da:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    52de:	e76a      	b.n	51b6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    52e0:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    52e2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    52e6:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    52ea:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    52ee:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    52f2:	68b6      	ldr	r6, [r6, #8]
    52f4:	6831      	ldr	r1, [r6, #0]
    52f6:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    52fa:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    52fc:	e7b5      	b.n	526a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    52fe:	1c63      	adds	r3, r4, #1
    5300:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    5302:	4a0f      	ldr	r2, [pc, #60]	; (5340 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    5304:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    5306:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    5308:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    530c:	f043 0302 	orr.w	r3, r3, #2
    5310:	7013      	strb	r3, [r2, #0]
};
    5312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5316:	2301      	movs	r3, #1
    5318:	4d07      	ldr	r5, [pc, #28]	; (5338 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    531a:	e7f2      	b.n	5302 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    531c:	4bb71b00 	.word	0x4bb71b00
    5320:	60ad78ec 	.word	0x60ad78ec
    5324:	200009c0 	.word	0x200009c0
    5328:	20001c00 	.word	0x20001c00
    532c:	e000e400 	.word	0xe000e400
    5330:	38003840 	.word	0x38003840
    5334:	2000279f 	.word	0x2000279f
    5338:	200021e0 	.word	0x200021e0
    533c:	003c0010 	.word	0x003c0010
    5340:	200027ad 	.word	0x200027ad
    5344:	0001f038 	.word	0x0001f038

00005348 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    5348:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    534c:	b9b8      	cbnz	r0, 537e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    534e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    5352:	b94b      	cbnz	r3, 5368 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5354:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    5358:	b93a      	cbnz	r2, 536a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    535a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    535e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    5362:	b150      	cbz	r0, 537a <nvic_execution_priority()+0x32>
    5364:	4298      	cmp	r0, r3
    5366:	d208      	bcs.n	537a <nvic_execution_priority()+0x32>
}
    5368:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    536a:	2a0f      	cmp	r2, #15
    536c:	d9f7      	bls.n	535e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    536e:	4b05      	ldr	r3, [pc, #20]	; (5384 <nvic_execution_priority()+0x3c>)
    5370:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    5372:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    5376:	2800      	cmp	r0, #0
    5378:	d1f4      	bne.n	5364 <nvic_execution_priority()+0x1c>
    537a:	4618      	mov	r0, r3
	return priority;
    537c:	4770      	bx	lr
	if (faultmask) return -1;
    537e:	f04f 30ff 	mov.w	r0, #4294967295
    5382:	e7f1      	b.n	5368 <nvic_execution_priority()+0x20>
    5384:	e000e3f0 	.word	0xe000e3f0

00005388 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5388:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    538a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    538e:	4604      	mov	r4, r0
    5390:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    5392:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5394:	b113      	cbz	r3, 539c <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    5396:	6d42      	ldr	r2, [r0, #84]	; 0x54
    5398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    539c:	7ea3      	ldrb	r3, [r4, #26]
    539e:	b12b      	cbz	r3, 53ac <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    53a0:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    53a2:	69b3      	ldr	r3, [r6, #24]
    53a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    53a8:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    53aa:	b662      	cpsie	i
	head = tx_buffer_head_;
    53ac:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    53b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    53b2:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    53b4:	3501      	adds	r5, #1
    53b6:	42ab      	cmp	r3, r5
    53b8:	d84c      	bhi.n	5454 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    53ba:	f04f 0800 	mov.w	r8, #0
    53be:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    53c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    53c4:	b29b      	uxth	r3, r3
    53c6:	429d      	cmp	r5, r3
    53c8:	d019      	beq.n	53fe <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    53ca:	e028      	b.n	541e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    53cc:	6973      	ldr	r3, [r6, #20]
    53ce:	021b      	lsls	r3, r3, #8
    53d0:	d510      	bpl.n	53f4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    53d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    53d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    53d8:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    53da:	3301      	adds	r3, #1
    53dc:	429a      	cmp	r2, r3
    53de:	d936      	bls.n	544e <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    53e0:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    53e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    53e4:	4299      	cmp	r1, r3
    53e6:	d92d      	bls.n	5444 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    53e8:	69e1      	ldr	r1, [r4, #28]
    53ea:	5ccb      	ldrb	r3, [r1, r3]
    53ec:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    53ee:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    53f0:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    53f4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    53f8:	b29b      	uxth	r3, r3
    53fa:	42ab      	cmp	r3, r5
    53fc:	d10f      	bne.n	541e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    53fe:	f7ff ffa3 	bl	5348 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    5402:	6963      	ldr	r3, [r4, #20]
    5404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    5408:	4283      	cmp	r3, r0
    540a:	dadf      	bge.n	53cc <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    540c:	28ff      	cmp	r0, #255	; 0xff
    540e:	ddf1      	ble.n	53f4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    5410:	f002 f852 	bl	74b8 <yield>
	while (tx_buffer_tail_ == head) {
    5414:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    5418:	b29b      	uxth	r3, r3
    541a:	42ab      	cmp	r3, r5
    541c:	d0ef      	beq.n	53fe <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    541e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5420:	42ab      	cmp	r3, r5
    5422:	d91a      	bls.n	545a <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    5424:	b2ff      	uxtb	r7, r7
    5426:	69e3      	ldr	r3, [r4, #28]
    5428:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    542a:	b672      	cpsid	i
	transmitting_ = 1;
    542c:	2001      	movs	r0, #1
    542e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    5432:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    5436:	69b3      	ldr	r3, [r6, #24]
    5438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    543c:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    543e:	b662      	cpsie	i
}
    5440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    5444:	1a5b      	subs	r3, r3, r1
    5446:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5448:	5ccb      	ldrb	r3, [r1, r3]
    544a:	b2db      	uxtb	r3, r3
    544c:	e7cf      	b.n	53ee <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    544e:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    5450:	4613      	mov	r3, r2
    5452:	e7c6      	b.n	53e2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    5454:	fa1f f885 	uxth.w	r8, r5
    5458:	e7b2      	b.n	53c0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    545a:	1aed      	subs	r5, r5, r3
    545c:	b2ff      	uxtb	r7, r7
    545e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5460:	555f      	strb	r7, [r3, r5]
    5462:	e7e2      	b.n	542a <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00005464 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    5464:	f7ff bf90 	b.w	5388 <HardwareSerialIMXRT::write9bit(unsigned long)>

00005468 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    5468:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    546a:	6953      	ldr	r3, [r2, #20]
    546c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    5470:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    5472:	d043      	beq.n	54fc <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    5474:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    5476:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    547a:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    547e:	d03a      	beq.n	54f6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    5480:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    5484:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    5488:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    548a:	b2b6      	uxth	r6, r6
    548c:	e007      	b.n	549e <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    548e:	6a01      	ldr	r1, [r0, #32]
    5490:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    5494:	f10e 33ff 	add.w	r3, lr, #4294967295
    5498:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    549c:	d01d      	beq.n	54da <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    549e:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    54a0:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    54a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    54a4:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    54a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    54ac:	429c      	cmp	r4, r3
    54ae:	bf98      	it	ls
    54b0:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    54b2:	fa1f fc8c 	uxth.w	ip, ip
    54b6:	459c      	cmp	ip, r3
    54b8:	d0ec      	beq.n	5494 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    54ba:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    54bc:	fa5f fc81 	uxtb.w	ip, r1
    54c0:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    54c2:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    54c4:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    54c8:	d8e1      	bhi.n	548e <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    54ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
    54cc:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    54d0:	f10e 33ff 	add.w	r3, lr, #4294967295
    54d4:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    54d8:	d1e1      	bne.n	549e <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    54da:	b2ab      	uxth	r3, r5
    54dc:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    54e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    54e2:	b143      	cbz	r3, 54f6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    54e4:	42b5      	cmp	r5, r6
    54e6:	d354      	bcc.n	5592 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    54e8:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    54ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
    54ec:	42a9      	cmp	r1, r5
    54ee:	d802      	bhi.n	54f6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    54f0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    54f2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    54f6:	6953      	ldr	r3, [r2, #20]
    54f8:	02d9      	lsls	r1, r3, #11
    54fa:	d445      	bmi.n	5588 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    54fc:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    54fe:	0233      	lsls	r3, r6, #8
    5500:	d528      	bpl.n	5554 <HardwareSerialIMXRT::IRQHandler()+0xec>
    5502:	6953      	ldr	r3, [r2, #20]
    5504:	021d      	lsls	r5, r3, #8
    5506:	d525      	bpl.n	5554 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    5508:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    550c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    5510:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    5512:	b29b      	uxth	r3, r3
    5514:	e006      	b.n	5524 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    5516:	69c1      	ldr	r1, [r0, #28]
    5518:	5cc9      	ldrb	r1, [r1, r3]
    551a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    551c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    551e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5520:	054c      	lsls	r4, r1, #21
    5522:	d412      	bmi.n	554a <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    5524:	42ab      	cmp	r3, r5
    5526:	d038      	beq.n	559a <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    5528:	6b44      	ldr	r4, [r0, #52]	; 0x34
    552a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    552c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    552e:	429c      	cmp	r4, r3
    5530:	bf98      	it	ls
    5532:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    5534:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    5536:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    553a:	d8ec      	bhi.n	5516 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    553c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    553e:	5d09      	ldrb	r1, [r1, r4]
    5540:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    5542:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    5544:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5546:	054c      	lsls	r4, r1, #21
    5548:	d5ec      	bpl.n	5524 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    554a:	b299      	uxth	r1, r3
		if (head == tail) {
    554c:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    554e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    5552:	d025      	beq.n	55a0 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    5554:	0271      	lsls	r1, r6, #9
    5556:	d516      	bpl.n	5586 <HardwareSerialIMXRT::IRQHandler()+0x11e>
    5558:	6953      	ldr	r3, [r2, #20]
    555a:	025b      	lsls	r3, r3, #9
    555c:	d513      	bpl.n	5586 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    555e:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5560:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    5562:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5566:	b113      	cbz	r3, 556e <HardwareSerialIMXRT::IRQHandler()+0x106>
    5568:	6d41      	ldr	r1, [r0, #84]	; 0x54
    556a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    556e:	7e83      	ldrb	r3, [r0, #26]
    5570:	b12b      	cbz	r3, 557e <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    5572:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    5574:	6993      	ldr	r3, [r2, #24]
    5576:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    557a:	6193      	str	r3, [r2, #24]
			__enable_irq();
    557c:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    557e:	6993      	ldr	r3, [r2, #24]
    5580:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    5584:	6193      	str	r3, [r2, #24]
}
    5586:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    5588:	6953      	ldr	r3, [r2, #20]
    558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    558e:	6153      	str	r3, [r2, #20]
    5590:	e7b4      	b.n	54fc <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    5592:	6b81      	ldr	r1, [r0, #56]	; 0x38
    5594:	1b89      	subs	r1, r1, r6
    5596:	440d      	add	r5, r1
    5598:	e7a7      	b.n	54ea <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    559a:	b29b      	uxth	r3, r3
    559c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    55a0:	6993      	ldr	r3, [r2, #24]
    55a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    55a6:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    55a8:	6993      	ldr	r3, [r2, #24]
    55aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    55ae:	6193      	str	r3, [r2, #24]
    55b0:	e7d0      	b.n	5554 <HardwareSerialIMXRT::IRQHandler()+0xec>
    55b2:	bf00      	nop

000055b4 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    55b4:	4801      	ldr	r0, [pc, #4]	; (55bc <IRQHandler_Serial1+0x8>)
    55b6:	f7ff bf57 	b.w	5468 <HardwareSerialIMXRT::IRQHandler()>
    55ba:	bf00      	nop
    55bc:	20000e18 	.word	0x20000e18

000055c0 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    55c0:	4801      	ldr	r0, [pc, #4]	; (55c8 <IRQHandler_Serial2+0x8>)
    55c2:	f7ff bf51 	b.w	5468 <HardwareSerialIMXRT::IRQHandler()>
    55c6:	bf00      	nop
    55c8:	20000e78 	.word	0x20000e78

000055cc <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
    55cc:	4770      	bx	lr
    55ce:	bf00      	nop

000055d0 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    55d0:	4770      	bx	lr
    55d2:	bf00      	nop

000055d4 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    55d4:	4770      	bx	lr
    55d6:	bf00      	nop

000055d8 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    55d8:	4770      	bx	lr
    55da:	bf00      	nop

000055dc <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    55dc:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    55de:	4c1a      	ldr	r4, [pc, #104]	; (5648 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    55e0:	4d1a      	ldr	r5, [pc, #104]	; (564c <pit_isr()+0x70>)
    55e2:	6823      	ldr	r3, [r4, #0]
    55e4:	42ab      	cmp	r3, r5
    55e6:	d002      	beq.n	55ee <pit_isr()+0x12>
    55e8:	4a19      	ldr	r2, [pc, #100]	; (5650 <pit_isr()+0x74>)
    55ea:	68d1      	ldr	r1, [r2, #12]
    55ec:	bb29      	cbnz	r1, 563a <pit_isr()+0x5e>
    55ee:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    55f0:	42ab      	cmp	r3, r5
    55f2:	d002      	beq.n	55fa <pit_isr()+0x1e>
    55f4:	4a16      	ldr	r2, [pc, #88]	; (5650 <pit_isr()+0x74>)
    55f6:	69d1      	ldr	r1, [r2, #28]
    55f8:	b9c9      	cbnz	r1, 562e <pit_isr()+0x52>
    55fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    55fc:	42ab      	cmp	r3, r5
    55fe:	d002      	beq.n	5606 <pit_isr()+0x2a>
    5600:	4a13      	ldr	r2, [pc, #76]	; (5650 <pit_isr()+0x74>)
    5602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5604:	b969      	cbnz	r1, 5622 <pit_isr()+0x46>
    5606:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    5608:	42ab      	cmp	r3, r5
    560a:	d009      	beq.n	5620 <pit_isr()+0x44>
    560c:	4a10      	ldr	r2, [pc, #64]	; (5650 <pit_isr()+0x74>)
    560e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    5610:	b131      	cbz	r1, 5620 <pit_isr()+0x44>
    5612:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	480f      	ldr	r0, [pc, #60]	; (5654 <pit_isr()+0x78>)
    5618:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
    561a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    561e:	4718      	bx	r3
    5620:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    5622:	2101      	movs	r1, #1
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	480c      	ldr	r0, [pc, #48]	; (5658 <pit_isr()+0x7c>)
    5628:	62d1      	str	r1, [r2, #44]	; 0x2c
    562a:	4798      	blx	r3
        );
    562c:	e7eb      	b.n	5606 <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    562e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    5630:	681b      	ldr	r3, [r3, #0]
    5632:	480a      	ldr	r0, [pc, #40]	; (565c <pit_isr()+0x80>)
    5634:	61d1      	str	r1, [r2, #28]
    5636:	4798      	blx	r3
        );
    5638:	e7df      	b.n	55fa <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    563a:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	f104 0008 	add.w	r0, r4, #8
    5642:	60d1      	str	r1, [r2, #12]
    5644:	4798      	blx	r3
        );
    5646:	e7d2      	b.n	55ee <pit_isr()+0x12>
    5648:	20001ec0 	.word	0x20001ec0
    564c:	2000083c 	.word	0x2000083c
    5650:	40084100 	.word	0x40084100
    5654:	20001f10 	.word	0x20001f10
    5658:	20001ef8 	.word	0x20001ef8
    565c:	20001ee0 	.word	0x20001ee0

00005660 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    5660:	b538      	push	{r3, r4, r5, lr}
    5662:	4c06      	ldr	r4, [pc, #24]	; (567c <__tcf_0+0x1c>)
    5664:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    5668:	f854 3c08 	ldr.w	r3, [r4, #-8]
    566c:	4620      	mov	r0, r4
    566e:	3c18      	subs	r4, #24
    5670:	68db      	ldr	r3, [r3, #12]
    5672:	4798      	blx	r3
    5674:	42ac      	cmp	r4, r5
    5676:	d1f7      	bne.n	5668 <__tcf_0+0x8>
    5678:	bd38      	pop	{r3, r4, r5, pc}
    567a:	bf00      	nop
    567c:	20001f10 	.word	0x20001f10

00005680 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
    5680:	6803      	ldr	r3, [r0, #0]
{
    5682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5686:	4604      	mov	r4, r0
    5688:	b088      	sub	sp, #32
    568a:	4617      	mov	r7, r2
	if (channel) {
    568c:	2b00      	cmp	r3, #0
    568e:	d04b      	beq.n	5728 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
    5690:	2200      	movs	r2, #0
    5692:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
    5694:	2201      	movs	r2, #1
    5696:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
    5698:	4d30      	ldr	r5, [pc, #192]	; (575c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
    569a:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    569c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 5780 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
    56a0:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
    56a2:	f851 3b08 	ldr.w	r3, [r1], #8
    56a6:	112d      	asrs	r5, r5, #4
    56a8:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
    56aa:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    56ac:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
    56b0:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    56b2:	00f6      	lsls	r6, r6, #3
    56b4:	f106 0008 	add.w	r0, r6, #8
    56b8:	f858 3006 	ldr.w	r3, [r8, r6]
    56bc:	4440      	add	r0, r8
    56be:	68db      	ldr	r3, [r3, #12]
    56c0:	9001      	str	r0, [sp, #4]
    56c2:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
    56c4:	4a26      	ldr	r2, [pc, #152]	; (5760 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
    56c6:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
    56c8:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
    56cc:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    56ce:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
    56d2:	689b      	ldr	r3, [r3, #8]
    56d4:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    56d6:	9b02      	ldr	r3, [sp, #8]
    56d8:	a804      	add	r0, sp, #16
    56da:	68db      	ldr	r3, [r3, #12]
    56dc:	4798      	blx	r3
	channel->LDVAL = cycles;
    56de:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
    56e0:	2203      	movs	r2, #3
    56e2:	4820      	ldr	r0, [pc, #128]	; (5764 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
    56e4:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
    56e6:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    56e8:	4a1f      	ldr	r2, [pc, #124]	; (5768 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
    56ea:	7923      	ldrb	r3, [r4, #4]
    56ec:	4c1f      	ldr	r4, [pc, #124]	; (576c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
    56ee:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    56f0:	7813      	ldrb	r3, [r2, #0]
    56f2:	7851      	ldrb	r1, [r2, #1]
    56f4:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    56f8:	428b      	cmp	r3, r1
    56fa:	bf28      	it	cs
    56fc:	460b      	movcs	r3, r1
    56fe:	7891      	ldrb	r1, [r2, #2]
    5700:	78d2      	ldrb	r2, [r2, #3]
    5702:	428b      	cmp	r3, r1
    5704:	bf28      	it	cs
    5706:	460b      	movcs	r3, r1
    5708:	4293      	cmp	r3, r2
    570a:	bf28      	it	cs
    570c:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    570e:	4c18      	ldr	r4, [pc, #96]	; (5770 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    5710:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5714:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    5718:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    571a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    571e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    5722:	b008      	add	sp, #32
    5724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    5728:	4a12      	ldr	r2, [pc, #72]	; (5774 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
    572a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    572c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    5730:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
    5732:	2201      	movs	r2, #1
    5734:	4b10      	ldr	r3, [pc, #64]	; (5778 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
    5736:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    5738:	4a10      	ldr	r2, [pc, #64]	; (577c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
    573a:	4613      	mov	r3, r2
    573c:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    573e:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
    5740:	6898      	ldr	r0, [r3, #8]
    5742:	2800      	cmp	r0, #0
    5744:	d0a8      	beq.n	5698 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    5746:	3310      	adds	r3, #16
    5748:	4293      	cmp	r3, r2
    574a:	6023      	str	r3, [r4, #0]
    574c:	d1f8      	bne.n	5740 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
    574e:	2300      	movs	r3, #0
				return false;
    5750:	4618      	mov	r0, r3
				channel = NULL;
    5752:	6023      	str	r3, [r4, #0]
}
    5754:	b008      	add	sp, #32
    5756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    575a:	bf00      	nop
    575c:	bff7bf00 	.word	0xbff7bf00
    5760:	2000083c 	.word	0x2000083c
    5764:	20001c00 	.word	0x20001c00
    5768:	200012f8 	.word	0x200012f8
    576c:	000055dd 	.word	0x000055dd
    5770:	e000e400 	.word	0xe000e400
    5774:	400fc000 	.word	0x400fc000
    5778:	40084000 	.word	0x40084000
    577c:	40084100 	.word	0x40084100
    5780:	20001ec0 	.word	0x20001ec0

00005784 <IntervalTimer::end()>:
void IntervalTimer::end() {
    5784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
    5786:	6803      	ldr	r3, [r0, #0]
    5788:	b343      	cbz	r3, 57dc <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
    578a:	4c15      	ldr	r4, [pc, #84]	; (57e0 <IntervalTimer::end()+0x5c>)
    578c:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    578e:	4e15      	ldr	r6, [pc, #84]	; (57e4 <IntervalTimer::end()+0x60>)
    5790:	441c      	add	r4, r3
    5792:	1124      	asrs	r4, r4, #4
    5794:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    5798:	00ed      	lsls	r5, r5, #3
    579a:	5973      	ldr	r3, [r6, r5]
    579c:	f105 0008 	add.w	r0, r5, #8
    57a0:	68db      	ldr	r3, [r3, #12]
    57a2:	4430      	add	r0, r6
    57a4:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    57a6:	4b10      	ldr	r3, [pc, #64]	; (57e8 <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
    57a8:	2100      	movs	r1, #0
		channel->TFLG = 1;
    57aa:	2201      	movs	r2, #1
    57ac:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
    57ae:	683b      	ldr	r3, [r7, #0]
    57b0:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
    57b2:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
    57b4:	23ff      	movs	r3, #255	; 0xff
    57b6:	4a0d      	ldr	r2, [pc, #52]	; (57ec <IntervalTimer::end()+0x68>)
    57b8:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    57ba:	7813      	ldrb	r3, [r2, #0]
    57bc:	7850      	ldrb	r0, [r2, #1]
    57be:	7894      	ldrb	r4, [r2, #2]
    57c0:	4283      	cmp	r3, r0
    57c2:	bf28      	it	cs
    57c4:	4603      	movcs	r3, r0
    57c6:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    57c8:	4a09      	ldr	r2, [pc, #36]	; (57f0 <IntervalTimer::end()+0x6c>)
    57ca:	42a3      	cmp	r3, r4
    57cc:	bf28      	it	cs
    57ce:	4623      	movcs	r3, r4
    57d0:	4283      	cmp	r3, r0
    57d2:	bf28      	it	cs
    57d4:	4603      	movcs	r3, r0
    57d6:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
    57da:	6039      	str	r1, [r7, #0]
}
    57dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57de:	bf00      	nop
    57e0:	bff7bf00 	.word	0xbff7bf00
    57e4:	20001ec0 	.word	0x20001ec0
    57e8:	2000083c 	.word	0x2000083c
    57ec:	200012f8 	.word	0x200012f8
    57f0:	e000e400 	.word	0xe000e400

000057f4 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
    57f4:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
    57f6:	4b06      	ldr	r3, [pc, #24]	; (5810 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    57f8:	2000      	movs	r0, #0
    57fa:	4c06      	ldr	r4, [pc, #24]	; (5814 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
    57fc:	4a06      	ldr	r2, [pc, #24]	; (5818 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
    57fe:	601c      	str	r4, [r3, #0]
    5800:	619c      	str	r4, [r3, #24]
    5802:	631c      	str	r4, [r3, #48]	; 0x30
    5804:	649c      	str	r4, [r3, #72]	; 0x48
    5806:	4905      	ldr	r1, [pc, #20]	; (581c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
    5808:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    580c:	f001 bed2 	b.w	75b4 <__aeabi_atexit>
    5810:	20001ec0 	.word	0x20001ec0
    5814:	2000083c 	.word	0x2000083c
    5818:	20001304 	.word	0x20001304
    581c:	00005661 	.word	0x00005661

00005820 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5820:	4608      	mov	r0, r1
    5822:	f001 bdb5 	b.w	7390 <usb_serial_putchar>
    5826:	bf00      	nop

00005828 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    5828:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    582a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    582c:	bf08      	it	eq
    582e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    5830:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    5832:	b391      	cbz	r1, 589a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    5834:	f04f 0e21 	mov.w	lr, #33	; 0x21
    5838:	e001      	b.n	583e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    583a:	fa5f fe86 	uxtb.w	lr, r6
    583e:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    5842:	fbb1 f5f2 	udiv	r5, r1, r2
    5846:	fb02 1415 	mls	r4, r2, r5, r1
    584a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    584e:	2c09      	cmp	r4, #9
    5850:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    5854:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    5858:	bf98      	it	ls
    585a:	fa5f f48c 	uxtbls.w	r4, ip
    585e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    5862:	bf88      	it	hi
    5864:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    5866:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5868:	44ec      	add	ip, sp
			n /= base;
    586a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    586c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    5870:	d2e3      	bcs.n	583a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    5872:	b14b      	cbz	r3, 5888 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    5874:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    5878:	222d      	movs	r2, #45	; 0x2d
		i--;
    587a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    587e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    5882:	446b      	add	r3, sp
    5884:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5888:	6803      	ldr	r3, [r0, #0]
    588a:	a901      	add	r1, sp, #4
    588c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    5890:	685b      	ldr	r3, [r3, #4]
    5892:	4471      	add	r1, lr
    5894:	4798      	blx	r3
}
    5896:	b00a      	add	sp, #40	; 0x28
    5898:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    589a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    589c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    58a0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    58a4:	e7e5      	b.n	5872 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    58a6:	bf00      	nop

000058a8 <Print::write(unsigned char const*, unsigned int)>:
{
    58a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    58ac:	460c      	mov	r4, r1
    58ae:	b1d1      	cbz	r1, 58e6 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    58b0:	b1ea      	cbz	r2, 58ee <Print::write(unsigned char const*, unsigned int)+0x46>
    58b2:	4680      	mov	r8, r0
    58b4:	188e      	adds	r6, r1, r2
	size_t count = 0;
    58b6:	2500      	movs	r5, #0
    58b8:	4f0e      	ldr	r7, [pc, #56]	; (58f4 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    58ba:	e004      	b.n	58c6 <Print::write(unsigned char const*, unsigned int)+0x1e>
    58bc:	f001 fd68 	bl	7390 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    58c0:	42b4      	cmp	r4, r6
    58c2:	4405      	add	r5, r0
    58c4:	d00c      	beq.n	58e0 <Print::write(unsigned char const*, unsigned int)+0x38>
    58c6:	f8d8 3000 	ldr.w	r3, [r8]
    58ca:	f814 0b01 	ldrb.w	r0, [r4], #1
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	42bb      	cmp	r3, r7
    58d2:	d0f3      	beq.n	58bc <Print::write(unsigned char const*, unsigned int)+0x14>
    58d4:	4601      	mov	r1, r0
    58d6:	4640      	mov	r0, r8
    58d8:	4798      	blx	r3
    58da:	42b4      	cmp	r4, r6
    58dc:	4405      	add	r5, r0
    58de:	d1f2      	bne.n	58c6 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    58e0:	4628      	mov	r0, r5
    58e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    58e6:	460d      	mov	r5, r1
}
    58e8:	4628      	mov	r0, r5
    58ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    58ee:	4615      	mov	r5, r2
    58f0:	e7f6      	b.n	58e0 <Print::write(unsigned char const*, unsigned int)+0x38>
    58f2:	bf00      	nop
    58f4:	00005821 	.word	0x00005821

000058f8 <Print::print(long)>:
	if (n < 0) {
    58f8:	2900      	cmp	r1, #0
    58fa:	db03      	blt.n	5904 <Print::print(long)+0xc>
	uint8_t sign=0;
    58fc:	2300      	movs	r3, #0
	if (base == 0) {
    58fe:	220a      	movs	r2, #10
    5900:	f7ff bf92 	b.w	5828 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    5904:	4249      	negs	r1, r1
		sign = '-';
    5906:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    5908:	220a      	movs	r2, #10
    590a:	f7ff bf8d 	b.w	5828 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    590e:	bf00      	nop

00005910 <Print::println()>:
{
    5910:	b500      	push	{lr}
	return write(buf, 2);
    5912:	6803      	ldr	r3, [r0, #0]
{
    5914:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    5916:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    591a:	2202      	movs	r2, #2
    591c:	a901      	add	r1, sp, #4
    591e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    5920:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    5924:	4798      	blx	r3
}
    5926:	b003      	add	sp, #12
    5928:	f85d fb04 	ldr.w	pc, [sp], #4

0000592c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    592c:	49a2      	ldr	r1, [pc, #648]	; (5bb8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    592e:	4ba3      	ldr	r3, [pc, #652]	; (5bbc <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    5930:	4288      	cmp	r0, r1
{
    5932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    5936:	4ca2      	ldr	r4, [pc, #648]	; (5bc0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    5938:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    593a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    593c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    5940:	d91b      	bls.n	597a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    5942:	4ba0      	ldr	r3, [pc, #640]	; (5bc4 <set_arm_clock+0x298>)
    5944:	4298      	cmp	r0, r3
    5946:	f240 8102 	bls.w	5b4e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    594a:	1ac3      	subs	r3, r0, r3
    594c:	499e      	ldr	r1, [pc, #632]	; (5bc8 <set_arm_clock+0x29c>)
    594e:	0a1b      	lsrs	r3, r3, #8
    5950:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5954:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    5958:	09db      	lsrs	r3, r3, #7
    595a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    595e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5962:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5966:	428b      	cmp	r3, r1
    5968:	bf28      	it	cs
    596a:	460b      	movcs	r3, r1
    596c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    5970:	4b96      	ldr	r3, [pc, #600]	; (5bcc <set_arm_clock+0x2a0>)
    5972:	fba3 3707 	umull	r3, r7, r3, r7
    5976:	08ff      	lsrs	r7, r7, #3
    5978:	e004      	b.n	5984 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    597a:	4f95      	ldr	r7, [pc, #596]	; (5bd0 <set_arm_clock+0x2a4>)
    597c:	42b8      	cmp	r0, r7
    597e:	bf8c      	ite	hi
    5980:	270e      	movhi	r7, #14
    5982:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5984:	498d      	ldr	r1, [pc, #564]	; (5bbc <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5986:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    598a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    598e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    5994:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5998:	d20c      	bcs.n	59b4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    599a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    599e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    59a2:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    59a6:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    59aa:	680b      	ldr	r3, [r1, #0]
    59ac:	2b00      	cmp	r3, #0
    59ae:	dafc      	bge.n	59aa <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    59b0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    59b4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    59b8:	d124      	bne.n	5a04 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    59ba:	4986      	ldr	r1, [pc, #536]	; (5bd4 <set_arm_clock+0x2a8>)
    59bc:	690c      	ldr	r4, [r1, #16]
    59be:	4986      	ldr	r1, [pc, #536]	; (5bd8 <set_arm_clock+0x2ac>)
    59c0:	43a1      	bics	r1, r4
    59c2:	f000 80ea 	beq.w	5b9a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    59c6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    59ca:	4634      	mov	r4, r6
    59cc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    59d0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    59d4:	d004      	beq.n	59e0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    59d6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    59da:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    59dc:	4b77      	ldr	r3, [pc, #476]	; (5bbc <set_arm_clock+0x290>)
    59de:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    59e0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    59e4:	d007      	beq.n	59f6 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    59e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    59ea:	4974      	ldr	r1, [pc, #464]	; (5bbc <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    59ec:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    59ee:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    59f0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    59f2:	071a      	lsls	r2, r3, #28
    59f4:	d4fc      	bmi.n	59f0 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    59f6:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    59fa:	4a70      	ldr	r2, [pc, #448]	; (5bbc <set_arm_clock+0x290>)
    59fc:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    59fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5a00:	069b      	lsls	r3, r3, #26
    5a02:	d4fc      	bmi.n	59fe <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    5a04:	4c75      	ldr	r4, [pc, #468]	; (5bdc <set_arm_clock+0x2b0>)
    5a06:	42a0      	cmp	r0, r4
    5a08:	f200 80ce 	bhi.w	5ba8 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    5a0c:	f04f 0c01 	mov.w	ip, #1
    5a10:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    5a12:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    5a14:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    5a18:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    5a1c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5a20:	42a2      	cmp	r2, r4
    5a22:	d818      	bhi.n	5a56 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    5a24:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    5a28:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    5a2c:	f040 808d 	bne.w	5b4a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    5a30:	f1bc 0f04 	cmp.w	ip, #4
    5a34:	f200 8091 	bhi.w	5b5a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    5a38:	180a      	adds	r2, r1, r0
    5a3a:	42a2      	cmp	r2, r4
    5a3c:	f200 80a4 	bhi.w	5b88 <set_arm_clock+0x25c>
    5a40:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    5a44:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    5a46:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5a4a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    5a4e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5a52:	42a2      	cmp	r2, r4
    5a54:	d9e6      	bls.n	5a24 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5a56:	f10c 31ff 	add.w	r1, ip, #4294967295
    5a5a:	028c      	lsls	r4, r1, #10
    5a5c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5a60:	485f      	ldr	r0, [pc, #380]	; (5be0 <set_arm_clock+0x2b4>)
    5a62:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    5a64:	4a5f      	ldr	r2, [pc, #380]	; (5be4 <set_arm_clock+0x2b8>)
    5a66:	4290      	cmp	r0, r2
    5a68:	d97f      	bls.n	5b6a <set_arm_clock+0x23e>
    5a6a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 5c10 <set_arm_clock+0x2e4>
    5a6e:	226c      	movs	r2, #108	; 0x6c
    5a70:	485d      	ldr	r0, [pc, #372]	; (5be8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5a72:	4d58      	ldr	r5, [pc, #352]	; (5bd4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    5a74:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5a78:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    5a7c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5a80:	f8df c190 	ldr.w	ip, [pc, #400]	; 5c14 <set_arm_clock+0x2e8>
    5a84:	ea0e 0c0c 	and.w	ip, lr, ip
    5a88:	45d4      	cmp	ip, sl
    5a8a:	d009      	beq.n	5aa0 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    5a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    5a90:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    5a94:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    5a98:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    5a9a:	682a      	ldr	r2, [r5, #0]
    5a9c:	2a00      	cmp	r2, #0
    5a9e:	dafc      	bge.n	5a9a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    5aa0:	4a46      	ldr	r2, [pc, #280]	; (5bbc <set_arm_clock+0x290>)
    5aa2:	6915      	ldr	r5, [r2, #16]
    5aa4:	f005 0507 	and.w	r5, r5, #7
    5aa8:	429d      	cmp	r5, r3
    5aaa:	d003      	beq.n	5ab4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    5aac:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    5aae:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5ab0:	03dd      	lsls	r5, r3, #15
    5ab2:	d4fc      	bmi.n	5aae <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5ab4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    5ab8:	d009      	beq.n	5ace <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    5aba:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5abe:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    5ac2:	4a3e      	ldr	r2, [pc, #248]	; (5bbc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5ac4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    5ac6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    5ac8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5aca:	0799      	lsls	r1, r3, #30
    5acc:	d4fc      	bmi.n	5ac8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5ace:	4947      	ldr	r1, [pc, #284]	; (5bec <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    5ad0:	4a47      	ldr	r2, [pc, #284]	; (5bf0 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5ad2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    5ad4:	4291      	cmp	r1, r2
    5ad6:	d83c      	bhi.n	5b52 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5ad8:	4b46      	ldr	r3, [pc, #280]	; (5bf4 <set_arm_clock+0x2c8>)
    5ada:	09c9      	lsrs	r1, r1, #7
    5adc:	fba3 3101 	umull	r3, r1, r3, r1
    5ae0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    5ae2:	1e4b      	subs	r3, r1, #1
    5ae4:	021b      	lsls	r3, r3, #8
    5ae6:	ea86 0203 	eor.w	r2, r6, r3
    5aea:	f412 7f40 	tst.w	r2, #768	; 0x300
    5aee:	d006      	beq.n	5afe <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    5af0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    5af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    5af8:	4a30      	ldr	r2, [pc, #192]	; (5bbc <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    5afa:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    5afc:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    5afe:	4a2f      	ldr	r2, [pc, #188]	; (5bbc <set_arm_clock+0x290>)
    5b00:	6953      	ldr	r3, [r2, #20]
    5b02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    5b06:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    5b08:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5b0a:	069b      	lsls	r3, r3, #26
    5b0c:	d4fc      	bmi.n	5b08 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5b0e:	4b3a      	ldr	r3, [pc, #232]	; (5bf8 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b10:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5b12:	fba3 2300 	umull	r2, r3, r3, r0
    5b16:	f04f 32ff 	mov.w	r2, #4294967295
    5b1a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    5b1e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5b22:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    5b26:	4a35      	ldr	r2, [pc, #212]	; (5bfc <set_arm_clock+0x2d0>)
    5b28:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    5b2a:	4a35      	ldr	r2, [pc, #212]	; (5c00 <set_arm_clock+0x2d4>)
    5b2c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5b2e:	4a35      	ldr	r2, [pc, #212]	; (5c04 <set_arm_clock+0x2d8>)
    5b30:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5b32:	d208      	bcs.n	5b46 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    5b34:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    5b38:	4a21      	ldr	r2, [pc, #132]	; (5bc0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    5b3a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    5b3e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    5b40:	6813      	ldr	r3, [r2, #0]
    5b42:	2b00      	cmp	r3, #0
    5b44:	dafc      	bge.n	5b40 <set_arm_clock+0x214>
	}

	return frequency;
}
    5b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b4a:	4673      	mov	r3, lr
    5b4c:	e762      	b.n	5a14 <set_arm_clock+0xe8>
    5b4e:	2712      	movs	r7, #18
    5b50:	e718      	b.n	5984 <set_arm_clock+0x58>
    5b52:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    5b56:	2104      	movs	r1, #4
    5b58:	e7c5      	b.n	5ae6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5b5a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5b5e:	4820      	ldr	r0, [pc, #128]	; (5be0 <set_arm_clock+0x2b4>)
    5b60:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5b62:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5b64:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5b66:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5b6a:	4a27      	ldr	r2, [pc, #156]	; (5c08 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    5b6c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 5c18 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    5b70:	fba2 2000 	umull	r2, r0, r2, r0
    5b74:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    5b76:	4825      	ldr	r0, [pc, #148]	; (5c0c <set_arm_clock+0x2e0>)
    5b78:	2a36      	cmp	r2, #54	; 0x36
    5b7a:	bf38      	it	cc
    5b7c:	2236      	movcc	r2, #54	; 0x36
    5b7e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    5b82:	ea42 0a0a 	orr.w	sl, r2, sl
    5b86:	e774      	b.n	5a72 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5b88:	ea4f 248c 	mov.w	r4, ip, lsl #10
    5b8c:	2300      	movs	r3, #0
    5b8e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    5b92:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    5b96:	46ac      	mov	ip, r5
    5b98:	e762      	b.n	5a60 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    5b9a:	461d      	mov	r5, r3
    5b9c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    5ba0:	4611      	mov	r1, r2
    5ba2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    5ba6:	e713      	b.n	59d0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    5ba8:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    5baa:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5bae:	4602      	mov	r2, r0
    5bb0:	4631      	mov	r1, r6
    5bb2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    5bb4:	46e6      	mov	lr, ip
    5bb6:	e753      	b.n	5a60 <set_arm_clock+0x134>
    5bb8:	1f78a400 	.word	0x1f78a400
    5bbc:	400fc000 	.word	0x400fc000
    5bc0:	40080000 	.word	0x40080000
    5bc4:	23c34600 	.word	0x23c34600
    5bc8:	004cb223 	.word	0x004cb223
    5bcc:	51eb851f 	.word	0x51eb851f
    5bd0:	016e3600 	.word	0x016e3600
    5bd4:	400d8000 	.word	0x400d8000
    5bd8:	80003040 	.word	0x80003040
    5bdc:	269fb1ff 	.word	0x269fb1ff
    5be0:	005b8d80 	.word	0x005b8d80
    5be4:	4df67eff 	.word	0x4df67eff
    5be8:	4d3f6400 	.word	0x4d3f6400
    5bec:	08f0d17f 	.word	0x08f0d17f
    5bf0:	2cb4177f 	.word	0x2cb4177f
    5bf4:	00e5109f 	.word	0x00e5109f
    5bf8:	431bde83 	.word	0x431bde83
    5bfc:	20000e04 	.word	0x20000e04
    5c00:	20000e00 	.word	0x20000e00
    5c04:	20002774 	.word	0x20002774
    5c08:	165e9f81 	.word	0x165e9f81
    5c0c:	00b71b00 	.word	0x00b71b00
    5c10:	8000206c 	.word	0x8000206c
    5c14:	8001307f 	.word	0x8001307f
    5c18:	80002000 	.word	0x80002000

00005c1c <delay>:
	if (msec == 0) return;
    5c1c:	b900      	cbnz	r0, 5c20 <delay+0x4>
    5c1e:	4770      	bx	lr
{
    5c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5c24:	2101      	movs	r1, #1
    5c26:	4681      	mov	r9, r0
    5c28:	4c21      	ldr	r4, [pc, #132]	; (5cb0 <delay+0x94>)
    5c2a:	4d22      	ldr	r5, [pc, #136]	; (5cb4 <delay+0x98>)
    5c2c:	4e22      	ldr	r6, [pc, #136]	; (5cb8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    5c2e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    5c32:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    5c34:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5c36:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d1f7      	bne.n	5c2e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    5c3e:	491f      	ldr	r1, [pc, #124]	; (5cbc <delay+0xa0>)
    5c40:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    5c42:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5c46:	f8df a078 	ldr.w	sl, [pc, #120]	; 5cc0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    5c4a:	1a1b      	subs	r3, r3, r0
    5c4c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    5c4e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5c52:	f8da 2000 	ldr.w	r2, [sl]
    5c56:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    5c5a:	455a      	cmp	r2, fp
    5c5c:	bf94      	ite	ls
    5c5e:	4490      	addls	r8, r2
    5c60:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    5c62:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    5c66:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    5c68:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    5c6a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d1f7      	bne.n	5c62 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    5c72:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5c74:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    5c78:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    5c7a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    5c7e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    5c82:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    5c86:	bf94      	ite	ls
    5c88:	4462      	addls	r2, ip
    5c8a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    5c8e:	eba2 0208 	sub.w	r2, r2, r8
    5c92:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    5c96:	d306      	bcc.n	5ca6 <delay+0x8a>
			if (--msec == 0) return;
    5c98:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    5c9c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    5ca0:	d1df      	bne.n	5c62 <delay+0x46>
}
    5ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    5ca6:	f001 fc07 	bl	74b8 <yield>
		while ((micros() - start) >= 1000) {
    5caa:	4904      	ldr	r1, [pc, #16]	; (5cbc <delay+0xa0>)
    5cac:	e7d9      	b.n	5c62 <delay+0x46>
    5cae:	bf00      	nop
    5cb0:	20002780 	.word	0x20002780
    5cb4:	2000277c 	.word	0x2000277c
    5cb8:	20002778 	.word	0x20002778
    5cbc:	e0001000 	.word	0xe0001000
    5cc0:	20002774 	.word	0x20002774

00005cc4 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    5cc4:	2827      	cmp	r0, #39	; 0x27
    5cc6:	d816      	bhi.n	5cf6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    5cc8:	0102      	lsls	r2, r0, #4
    5cca:	4b10      	ldr	r3, [pc, #64]	; (5d0c <digitalWrite+0x48>)
    5ccc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    5cd0:	589b      	ldr	r3, [r3, r2]
{
    5cd2:	b410      	push	{r4}
	mask = p->mask;
    5cd4:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    5cd6:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    5cd8:	4214      	tst	r4, r2
    5cda:	d005      	beq.n	5ce8 <digitalWrite+0x24>
		if (val) {
    5cdc:	b961      	cbnz	r1, 5cf8 <digitalWrite+0x34>
}
    5cde:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    5ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    5ce6:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5ce8:	6883      	ldr	r3, [r0, #8]
		if (val) {
    5cea:	b151      	cbz	r1, 5d02 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5cec:	4a08      	ldr	r2, [pc, #32]	; (5d10 <digitalWrite+0x4c>)
}
    5cee:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5cf2:	601a      	str	r2, [r3, #0]
}
    5cf4:	4770      	bx	lr
    5cf6:	4770      	bx	lr
    5cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    5cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    5d00:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5d02:	4a04      	ldr	r2, [pc, #16]	; (5d14 <digitalWrite+0x50>)
}
    5d04:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5d08:	601a      	str	r2, [r3, #0]
}
    5d0a:	4770      	bx	lr
    5d0c:	200009c0 	.word	0x200009c0
    5d10:	0001f038 	.word	0x0001f038
    5d14:	00013038 	.word	0x00013038

00005d18 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    5d18:	2827      	cmp	r0, #39	; 0x27
    5d1a:	d80b      	bhi.n	5d34 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    5d1c:	4b06      	ldr	r3, [pc, #24]	; (5d38 <digitalRead+0x20>)
    5d1e:	0102      	lsls	r2, r0, #4
    5d20:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    5d24:	589a      	ldr	r2, [r3, r2]
    5d26:	68c3      	ldr	r3, [r0, #12]
    5d28:	6892      	ldr	r2, [r2, #8]
    5d2a:	421a      	tst	r2, r3
    5d2c:	bf14      	ite	ne
    5d2e:	2001      	movne	r0, #1
    5d30:	2000      	moveq	r0, #0
    5d32:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    5d34:	2000      	movs	r0, #0
}
    5d36:	4770      	bx	lr
    5d38:	200009c0 	.word	0x200009c0

00005d3c <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    5d3c:	2827      	cmp	r0, #39	; 0x27
    5d3e:	d829      	bhi.n	5d94 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    5d40:	4b16      	ldr	r3, [pc, #88]	; (5d9c <pinMode+0x60>)
    5d42:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5d44:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    5d46:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5d4a:	589a      	ldr	r2, [r3, r2]
{
    5d4c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5d4e:	6853      	ldr	r3, [r2, #4]
    5d50:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    5d52:	d00e      	beq.n	5d72 <pinMode+0x36>
    5d54:	2904      	cmp	r1, #4
    5d56:	d00c      	beq.n	5d72 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    5d58:	ea23 0304 	bic.w	r3, r3, r4
    5d5c:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5d5e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    5d60:	b1a9      	cbz	r1, 5d8e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    5d62:	2902      	cmp	r1, #2
    5d64:	d017      	beq.n	5d96 <pinMode+0x5a>
		} else if (mode == INPUT_PULLDOWN) {
    5d66:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    5d68:	bf0c      	ite	eq
    5d6a:	4a0d      	ldreq	r2, [pc, #52]	; (5da0 <pinMode+0x64>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    5d6c:	4a0d      	ldrne	r2, [pc, #52]	; (5da4 <pinMode+0x68>)
    5d6e:	601a      	str	r2, [r3, #0]
    5d70:	e007      	b.n	5d82 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    5d72:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    5d74:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    5d76:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5d78:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    5d7a:	d008      	beq.n	5d8e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    5d7c:	f640 0238 	movw	r2, #2104	; 0x838
    5d80:	601a      	str	r2, [r3, #0]
	*(p->mux) = 5 | 0x10;
    5d82:	6843      	ldr	r3, [r0, #4]
    5d84:	2215      	movs	r2, #21
}
    5d86:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    5d8a:	601a      	str	r2, [r3, #0]
}
    5d8c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    5d8e:	2238      	movs	r2, #56	; 0x38
    5d90:	601a      	str	r2, [r3, #0]
    5d92:	e7f6      	b.n	5d82 <pinMode+0x46>
    5d94:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    5d96:	4a04      	ldr	r2, [pc, #16]	; (5da8 <pinMode+0x6c>)
    5d98:	601a      	str	r2, [r3, #0]
    5d9a:	e7f2      	b.n	5d82 <pinMode+0x46>
    5d9c:	200009c0 	.word	0x200009c0
    5da0:	00013038 	.word	0x00013038
    5da4:	00010038 	.word	0x00010038
    5da8:	0001f038 	.word	0x0001f038

00005dac <dummy_isr>:
static void dummy_isr() {};
    5dac:	4770      	bx	lr
    5dae:	bf00      	nop

00005db0 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    5db0:	2827      	cmp	r0, #39	; 0x27
    5db2:	d858      	bhi.n	5e66 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    5db4:	0100      	lsls	r0, r0, #4
{
    5db6:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    5db8:	4c34      	ldr	r4, [pc, #208]	; (5e8c <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    5dba:	4d35      	ldr	r5, [pc, #212]	; (5e90 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    5dbc:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    5dbe:	42ab      	cmp	r3, r5
    5dc0:	d056      	beq.n	5e70 <attachInterrupt+0xc0>
    5dc2:	d849      	bhi.n	5e58 <attachInterrupt+0xa8>
    5dc4:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    5dc8:	d04b      	beq.n	5e62 <attachInterrupt+0xb2>
    5dca:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    5dce:	42ab      	cmp	r3, r5
    5dd0:	d140      	bne.n	5e54 <attachInterrupt+0xa4>
    5dd2:	4d30      	ldr	r5, [pc, #192]	; (5e94 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
    5dd4:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    5dd6:	4e30      	ldr	r6, [pc, #192]	; (5e98 <attachInterrupt+0xe8>)
    5dd8:	4c30      	ldr	r4, [pc, #192]	; (5e9c <attachInterrupt+0xec>)
    5dda:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
    5dde:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
    5de2:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    5de4:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    5de8:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
    5dec:	2a04      	cmp	r2, #4
    5dee:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    5df2:	d82f      	bhi.n	5e54 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    5df4:	695e      	ldr	r6, [r3, #20]
    5df6:	ea26 0600 	bic.w	r6, r6, r0
    5dfa:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
    5dfc:	f04f 0605 	mov.w	r6, #5
    5e00:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
    5e04:	6826      	ldr	r6, [r4, #0]
    5e06:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
    5e0a:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    5e0c:	685c      	ldr	r4, [r3, #4]
    5e0e:	ea24 0400 	bic.w	r4, r4, r0
    5e12:	605c      	str	r4, [r3, #4]
    5e14:	4c22      	ldr	r4, [pc, #136]	; (5ea0 <attachInterrupt+0xf0>)
    5e16:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    5e1a:	fa90 f2a0 	rbit	r2, r0
    5e1e:	fab2 f282 	clz	r2, r2
	table[index] = function;
    5e22:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    5e26:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    5e2a:	d01d      	beq.n	5e68 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    5e2c:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    5e2e:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    5e30:	ea01 0105 	and.w	r1, r1, r5
    5e34:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    5e36:	dc1d      	bgt.n	5e74 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
    5e38:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    5e3a:	2503      	movs	r5, #3
    5e3c:	68d9      	ldr	r1, [r3, #12]
    5e3e:	4094      	lsls	r4, r2
    5e40:	fa05 f202 	lsl.w	r2, r5, r2
    5e44:	ea21 0202 	bic.w	r2, r1, r2
    5e48:	4322      	orrs	r2, r4
    5e4a:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    5e4c:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    5e4e:	695a      	ldr	r2, [r3, #20]
    5e50:	4302      	orrs	r2, r0
    5e52:	615a      	str	r2, [r3, #20]
}
    5e54:	bcf0      	pop	{r4, r5, r6, r7}
    5e56:	4770      	bx	lr
	switch((uint32_t)gpio) {
    5e58:	4d12      	ldr	r5, [pc, #72]	; (5ea4 <attachInterrupt+0xf4>)
    5e5a:	42ab      	cmp	r3, r5
    5e5c:	d1fa      	bne.n	5e54 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
    5e5e:	4d12      	ldr	r5, [pc, #72]	; (5ea8 <attachInterrupt+0xf8>)
    5e60:	e7b8      	b.n	5dd4 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    5e62:	4d12      	ldr	r5, [pc, #72]	; (5eac <attachInterrupt+0xfc>)
    5e64:	e7b6      	b.n	5dd4 <attachInterrupt+0x24>
    5e66:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    5e68:	69da      	ldr	r2, [r3, #28]
    5e6a:	4302      	orrs	r2, r0
    5e6c:	61da      	str	r2, [r3, #28]
    5e6e:	e7ed      	b.n	5e4c <attachInterrupt+0x9c>
			table = isr_table_gpio3;
    5e70:	4d0f      	ldr	r5, [pc, #60]	; (5eb0 <attachInterrupt+0x100>)
    5e72:	e7af      	b.n	5dd4 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    5e74:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    5e76:	2503      	movs	r5, #3
    5e78:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    5e7a:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    5e7c:	4094      	lsls	r4, r2
    5e7e:	fa05 f202 	lsl.w	r2, r5, r2
    5e82:	ea21 0202 	bic.w	r2, r1, r2
    5e86:	4322      	orrs	r2, r4
    5e88:	611a      	str	r2, [r3, #16]
    5e8a:	e7df      	b.n	5e4c <attachInterrupt+0x9c>
    5e8c:	200009c0 	.word	0x200009c0
    5e90:	42008000 	.word	0x42008000
    5e94:	200017d4 	.word	0x200017d4
    5e98:	00000021 	.word	0x00000021
    5e9c:	20001c00 	.word	0x20001c00
    5ea0:	200002a0 	.word	0x200002a0
    5ea4:	4200c000 	.word	0x4200c000
    5ea8:	200018d4 	.word	0x200018d4
    5eac:	20001754 	.word	0x20001754
    5eb0:	20001854 	.word	0x20001854

00005eb4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5eb4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5eb6:	f7fc f857 	bl	1f68 <setup>
	while (1) {
		loop();
    5eba:	f7fc fa99 	bl	23f0 <loop>
		yield();
    5ebe:	f001 fafb 	bl	74b8 <yield>
	while (1) {
    5ec2:	e7fa      	b.n	5eba <main+0x6>

00005ec4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    5ec4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    5ec6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    5eca:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    5ece:	d16d      	bne.n	5fac <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5ed0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    5ed2:	d341      	bcc.n	5f58 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5ed4:	f851 3b04 	ldr.w	r3, [r1], #4
    5ed8:	f840 3b04 	str.w	r3, [r0], #4
    5edc:	f851 3b04 	ldr.w	r3, [r1], #4
    5ee0:	f840 3b04 	str.w	r3, [r0], #4
    5ee4:	f851 3b04 	ldr.w	r3, [r1], #4
    5ee8:	f840 3b04 	str.w	r3, [r0], #4
    5eec:	f851 3b04 	ldr.w	r3, [r1], #4
    5ef0:	f840 3b04 	str.w	r3, [r0], #4
    5ef4:	f851 3b04 	ldr.w	r3, [r1], #4
    5ef8:	f840 3b04 	str.w	r3, [r0], #4
    5efc:	f851 3b04 	ldr.w	r3, [r1], #4
    5f00:	f840 3b04 	str.w	r3, [r0], #4
    5f04:	f851 3b04 	ldr.w	r3, [r1], #4
    5f08:	f840 3b04 	str.w	r3, [r0], #4
    5f0c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f10:	f840 3b04 	str.w	r3, [r0], #4
    5f14:	f851 3b04 	ldr.w	r3, [r1], #4
    5f18:	f840 3b04 	str.w	r3, [r0], #4
    5f1c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f20:	f840 3b04 	str.w	r3, [r0], #4
    5f24:	f851 3b04 	ldr.w	r3, [r1], #4
    5f28:	f840 3b04 	str.w	r3, [r0], #4
    5f2c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f30:	f840 3b04 	str.w	r3, [r0], #4
    5f34:	f851 3b04 	ldr.w	r3, [r1], #4
    5f38:	f840 3b04 	str.w	r3, [r0], #4
    5f3c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f40:	f840 3b04 	str.w	r3, [r0], #4
    5f44:	f851 3b04 	ldr.w	r3, [r1], #4
    5f48:	f840 3b04 	str.w	r3, [r0], #4
    5f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f50:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5f54:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    5f56:	d2bd      	bcs.n	5ed4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    5f58:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    5f5a:	d311      	bcc.n	5f80 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f60:	f840 3b04 	str.w	r3, [r0], #4
    5f64:	f851 3b04 	ldr.w	r3, [r1], #4
    5f68:	f840 3b04 	str.w	r3, [r0], #4
    5f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    5f70:	f840 3b04 	str.w	r3, [r0], #4
    5f74:	f851 3b04 	ldr.w	r3, [r1], #4
    5f78:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    5f7c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    5f7e:	d2ed      	bcs.n	5f5c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    5f80:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    5f82:	d305      	bcc.n	5f90 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    5f84:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    5f88:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    5f8c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    5f8e:	d2f9      	bcs.n	5f84 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    5f90:	3204      	adds	r2, #4
	beq	.Ldone
    5f92:	d008      	beq.n	5fa6 <memcpy+0xe2>

	lsls	r2, r2, #31
    5f94:	07d2      	lsls	r2, r2, #31
	itt ne
    5f96:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    5f98:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    5f9c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    5fa0:	d301      	bcc.n	5fa6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    5fa2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    5fa4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    5fa6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    5fa8:	4770      	bx	lr
    5faa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    5fac:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    5fae:	d313      	bcc.n	5fd8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    5fb0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    5fb2:	d08d      	beq.n	5ed0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    5fb4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    5fb8:	d08a      	beq.n	5ed0 <memcpy+0xc>

	rsb	r3, #4
    5fba:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    5fbe:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    5fc0:	07db      	lsls	r3, r3, #31
	itt ne
    5fc2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    5fc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    5fc8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    5fcc:	d380      	bcc.n	5ed0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    5fce:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    5fd2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    5fd6:	e77b      	b.n	5ed0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    5fd8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    5fda:	d3d9      	bcc.n	5f90 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    5fdc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    5fde:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    5fe2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    5fe6:	d2f9      	bcs.n	5fdc <memcpy+0x118>

	ldrb	r3, [r1]
    5fe8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    5fea:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    5fec:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    5fee:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    5ff0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    5ff2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    5ff4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    5ff6:	4770      	bx	lr

00005ff8 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    5ff8:	f001 bae2 	b.w	75c0 <malloc>

00005ffc <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    5ffc:	f101 3cff 	add.w	ip, r1, #4294967295
{
    6000:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    6002:	4666      	mov	r6, ip
	int i=0, j;
    6004:	2400      	movs	r4, #0
    6006:	e000      	b.n	600a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6008:	3401      	adds	r4, #1
		digit = val % radix;
    600a:	fbb0 f5f2 	udiv	r5, r0, r2
    600e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6012:	2b09      	cmp	r3, #9
    6014:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    6018:	f103 0330 	add.w	r3, r3, #48	; 0x30
    601c:	fa5f fe8e 	uxtb.w	lr, lr
    6020:	bf98      	it	ls
    6022:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    6026:	4290      	cmp	r0, r2
		val /= radix;
    6028:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    602a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    602e:	d2eb      	bcs.n	6008 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    6030:	1c63      	adds	r3, r4, #1
    6032:	2200      	movs	r2, #0
    6034:	18c8      	adds	r0, r1, r3
    6036:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    6038:	b17c      	cbz	r4, 605a <ultoa+0x5e>
		t = buf[j];
    603a:	4662      	mov	r2, ip
    603c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    6040:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    6044:	eba1 030c 	sub.w	r3, r1, ip
    6048:	3202      	adds	r2, #2
		buf[j] = buf[i];
    604a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    604e:	3b01      	subs	r3, #1
    6050:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    6052:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    6054:	4423      	add	r3, r4
    6056:	429a      	cmp	r2, r3
    6058:	dbef      	blt.n	603a <ultoa+0x3e>
	}
	return buf;
}
    605a:	4608      	mov	r0, r1
    605c:	bd70      	pop	{r4, r5, r6, pc}
    605e:	bf00      	nop

00006060 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    6060:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    6062:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    6064:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    6068:	4619      	mov	r1, r3
{
    606a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    606c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    6070:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    6074:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6078:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    607c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    6080:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    6082:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    6086:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    608a:	b29b      	uxth	r3, r3
    608c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    6090:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    6094:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    6098:	3101      	adds	r1, #1
    609a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    609e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    60a0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    60a2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    60a6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    60a8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    60aa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    60ac:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    60ae:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    60b2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    60b4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    60b6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    60b8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    60ba:	d1eb      	bne.n	6094 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    60bc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    60c0:	b29b      	uxth	r3, r3
    60c2:	f043 030f 	orr.w	r3, r3, #15
    60c6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    60ca:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    60ce:	b29b      	uxth	r3, r3
    60d0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    60d4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    60d8:	bd10      	pop	{r4, pc}
    60da:	bf00      	nop

000060dc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    60dc:	4b37      	ldr	r3, [pc, #220]	; (61bc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    60de:	4a38      	ldr	r2, [pc, #224]	; (61c0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    60e0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    60e2:	4838      	ldr	r0, [pc, #224]	; (61c4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    60e4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    60e8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    60ea:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    60ec:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    60f0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    60f4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    60f8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    60fc:	430a      	orrs	r2, r1
    60fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    6102:	f7ff ffad 	bl	6060 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    6106:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    610a:	f7ff ffa9 	bl	6060 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    610e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    6112:	f7ff ffa5 	bl	6060 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    6116:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    611a:	f7ff ffa1 	bl	6060 <flexpwm_init>
	for (i=0; i < 4; i++) {
    611e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    6120:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6124:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    6128:	4611      	mov	r1, r2
    612a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    612e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    6132:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    6134:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    6136:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    6138:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    613a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    613e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6140:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    6142:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    6146:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6148:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    614a:	d1ee      	bne.n	612a <pwm_init+0x4e>
    614c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    614e:	481e      	ldr	r0, [pc, #120]	; (61c8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6150:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6154:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    6158:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    615a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    615e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    6162:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    6166:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    616a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    616c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    616e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    6170:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6172:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    6176:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6178:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    617a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    617e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6180:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    6182:	d1ee      	bne.n	6162 <pwm_init+0x86>
    6184:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    6186:	4811      	ldr	r0, [pc, #68]	; (61cc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    6188:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    618a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    618e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    6190:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    6194:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    6198:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    619c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    61a0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    61a2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    61a4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    61a6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    61a8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    61aa:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    61ac:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    61ae:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    61b2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    61b4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    61b8:	d1ee      	bne.n	6198 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    61ba:	bd70      	pop	{r4, r5, r6, pc}
    61bc:	400fc000 	.word	0x400fc000
    61c0:	fc030000 	.word	0xfc030000
    61c4:	403dc000 	.word	0x403dc000
    61c8:	401e0000 	.word	0x401e0000
    61cc:	401e4000 	.word	0x401e4000

000061d0 <unused_interrupt_vector>:
	__disable_irq();
    61d0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    61d2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    61d6:	4c52      	ldr	r4, [pc, #328]	; (6320 <unused_interrupt_vector+0x150>)
    61d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    61dc:	f01e 0f04 	tst.w	lr, #4
    61e0:	bf0c      	ite	eq
    61e2:	f3ef 8208 	mrseq	r2, MSP
    61e6:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    61ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    61ee:	4e4d      	ldr	r6, [pc, #308]	; (6324 <unused_interrupt_vector+0x154>)
	while (p < end) {
    61f0:	4d4d      	ldr	r5, [pc, #308]	; (6328 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    61f2:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    61f6:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    61fa:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    61fe:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    6202:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    6206:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    620a:	6993      	ldr	r3, [r2, #24]
    620c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    6210:	69d3      	ldr	r3, [r2, #28]
    6212:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    6216:	f000 f8bf 	bl	6398 <tempmonGetTemp>
    621a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    621e:	f001 f9b7 	bl	7590 <rtc_get>
	info->len = sizeof(*info) / 4;
    6222:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    6224:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    6228:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    622c:	460b      	mov	r3, r1
    622e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    6232:	493e      	ldr	r1, [pc, #248]	; (632c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    6234:	1d30      	adds	r0, r6, #4
    6236:	405a      	eors	r2, r3
    6238:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    623a:	f002 0301 	and.w	r3, r2, #1
    623e:	3c01      	subs	r4, #1
    6240:	fb01 f303 	mul.w	r3, r1, r3
    6244:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    6248:	d1f7      	bne.n	623a <unused_interrupt_vector+0x6a>
	while (p < end) {
    624a:	42a8      	cmp	r0, r5
    624c:	d002      	beq.n	6254 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    624e:	6873      	ldr	r3, [r6, #4]
    6250:	4606      	mov	r6, r0
    6252:	e7ef      	b.n	6234 <unused_interrupt_vector+0x64>
	info->crc = crc;
    6254:	4b32      	ldr	r3, [pc, #200]	; (6320 <unused_interrupt_vector+0x150>)
    6256:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    625a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    625e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6262:	4930      	ldr	r1, [pc, #192]	; (6324 <unused_interrupt_vector+0x154>)
    6264:	4a32      	ldr	r2, [pc, #200]	; (6330 <unused_interrupt_vector+0x160>)
    6266:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    626a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    626e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6272:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    6276:	4a2f      	ldr	r2, [pc, #188]	; (6334 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    6278:	2502      	movs	r5, #2
    627a:	482f      	ldr	r0, [pc, #188]	; (6338 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    627c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    627e:	492f      	ldr	r1, [pc, #188]	; (633c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    6280:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    6284:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    6286:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    6288:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    628a:	482d      	ldr	r0, [pc, #180]	; (6340 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    628c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6294:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    6296:	680b      	ldr	r3, [r1, #0]
    6298:	4283      	cmp	r3, r0
    629a:	d83d      	bhi.n	6318 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    629c:	4d26      	ldr	r5, [pc, #152]	; (6338 <unused_interrupt_vector+0x168>)
    629e:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    62a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    62a4:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    62a8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    62aa:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    62ac:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    62b0:	4924      	ldr	r1, [pc, #144]	; (6344 <unused_interrupt_vector+0x174>)
    62b2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    62b6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    62ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    62be:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    62c2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    62c6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    62ca:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    62ce:	e001      	b.n	62d4 <unused_interrupt_vector+0x104>
		usb_isr();
    62d0:	f000 f954 	bl	657c <usb_isr>
		if (PIT_TFLG0) {
    62d4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    62d8:	2b00      	cmp	r3, #0
    62da:	d0f9      	beq.n	62d0 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    62dc:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    62de:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    62e2:	2c4f      	cmp	r4, #79	; 0x4f
    62e4:	d9f4      	bls.n	62d0 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    62e6:	4b18      	ldr	r3, [pc, #96]	; (6348 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    62e8:	2002      	movs	r0, #2
    62ea:	4918      	ldr	r1, [pc, #96]	; (634c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    62ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    62f0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    62f4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    62f6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    62fa:	b93b      	cbnz	r3, 630c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    62fc:	4814      	ldr	r0, [pc, #80]	; (6350 <unused_interrupt_vector+0x180>)
    62fe:	4915      	ldr	r1, [pc, #84]	; (6354 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    6300:	4a0d      	ldr	r2, [pc, #52]	; (6338 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    6302:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    6304:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    6308:	2b00      	cmp	r3, #0
    630a:	d0fa      	beq.n	6302 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    630c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6310:	4a11      	ldr	r2, [pc, #68]	; (6358 <unused_interrupt_vector+0x188>)
    6312:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    6316:	e7fe      	b.n	6316 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    6318:	f7ff fb08 	bl	592c <set_arm_clock>
    631c:	e7be      	b.n	629c <unused_interrupt_vector+0xcc>
    631e:	bf00      	nop
    6320:	2027ff00 	.word	0x2027ff00
    6324:	2027ff80 	.word	0x2027ff80
    6328:	2027ffa8 	.word	0x2027ffa8
    632c:	edb88320 	.word	0xedb88320
    6330:	2027ffa0 	.word	0x2027ffa0
    6334:	400fc000 	.word	0x400fc000
    6338:	40084000 	.word	0x40084000
    633c:	20000e04 	.word	0x20000e04
    6340:	0bcd3d80 	.word	0x0bcd3d80
    6344:	00249f00 	.word	0x00249f00
    6348:	400d9000 	.word	0x400d9000
    634c:	402e0000 	.word	0x402e0000
    6350:	400f8000 	.word	0x400f8000
    6354:	0bad00f1 	.word	0x0bad00f1
    6358:	05fa0004 	.word	0x05fa0004

0000635c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    635c:	490a      	ldr	r1, [pc, #40]	; (6388 <_sbrk+0x2c>)
    635e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    6360:	b138      	cbz	r0, 6372 <_sbrk+0x16>
{
    6362:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    6364:	1813      	adds	r3, r2, r0
    6366:	4809      	ldr	r0, [pc, #36]	; (638c <_sbrk+0x30>)
    6368:	4283      	cmp	r3, r0
    636a:	d804      	bhi.n	6376 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    636c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    636e:	600b      	str	r3, [r1, #0]
}
    6370:	bd08      	pop	{r3, pc}
    6372:	4610      	mov	r0, r2
    6374:	4770      	bx	lr
                        errno = ENOMEM;
    6376:	f001 fc59 	bl	7c2c <__errno>
    637a:	230c      	movs	r3, #12
                        return (void *)-1;
    637c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    6380:	6003      	str	r3, [r0, #0]
}
    6382:	4610      	mov	r0, r2
    6384:	bd08      	pop	{r3, pc}
    6386:	bf00      	nop
    6388:	20001300 	.word	0x20001300
    638c:	20280000 	.word	0x20280000

00006390 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    6390:	bf30      	wfi
    6392:	e7fd      	b.n	6390 <__cxa_pure_virtual>

00006394 <Panic_Temp_isr>:
  unused_interrupt_vector();
    6394:	f7ff bf1c 	b.w	61d0 <unused_interrupt_vector>

00006398 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    6398:	4a12      	ldr	r2, [pc, #72]	; (63e4 <tempmonGetTemp+0x4c>)
    639a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    639e:	075b      	lsls	r3, r3, #29
    63a0:	d5fb      	bpl.n	639a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    63a2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    63a6:	4810      	ldr	r0, [pc, #64]	; (63e8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    63a8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    63ac:	490f      	ldr	r1, [pc, #60]	; (63ec <tempmonGetTemp+0x54>)
    63ae:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    63b2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    63b6:	ed91 6a00 	vldr	s12, [r1]
    63ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    63be:	4a0c      	ldr	r2, [pc, #48]	; (63f0 <tempmonGetTemp+0x58>)
    63c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    63c4:	4b0b      	ldr	r3, [pc, #44]	; (63f4 <tempmonGetTemp+0x5c>)
    63c6:	edd2 6a00 	vldr	s13, [r2]
    63ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
    63ce:	ed93 7a00 	vldr	s14, [r3]
    63d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    63d6:	ee67 7a86 	vmul.f32	s15, s15, s12
    63da:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    63de:	ee37 0a40 	vsub.f32	s0, s14, s0
    63e2:	4770      	bx	lr
    63e4:	400d8100 	.word	0x400d8100
    63e8:	20002764 	.word	0x20002764
    63ec:	2000276c 	.word	0x2000276c
    63f0:	20002770 	.word	0x20002770
    63f4:	20002768 	.word	0x20002768

000063f8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    63f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    63fa:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    63fc:	b11b      	cbz	r3, 6406 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    63fe:	6853      	ldr	r3, [r2, #4]
    6400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6404:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    6406:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    6408:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    640a:	b33c      	cbz	r4, 645c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    640c:	4b1a      	ldr	r3, [pc, #104]	; (6478 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    640e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    6410:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    6414:	420c      	tst	r4, r1
    6416:	d11d      	bne.n	6454 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    6418:	4e18      	ldr	r6, [pc, #96]	; (647c <schedule_transfer+0x84>)
    641a:	6877      	ldr	r7, [r6, #4]
    641c:	e004      	b.n	6428 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    641e:	6874      	ldr	r4, [r6, #4]
    6420:	1be4      	subs	r4, r4, r7
    6422:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    6426:	d20b      	bcs.n	6440 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    6428:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    642c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    6430:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    6434:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    6438:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    643c:	0464      	lsls	r4, r4, #17
    643e:	d5ee      	bpl.n	641e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    6440:	400d      	ands	r5, r1
    6442:	d107      	bne.n	6454 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    6444:	4c0c      	ldr	r4, [pc, #48]	; (6478 <schedule_transfer+0x80>)
		endpoint->status = 0;
    6446:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    644a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    644e:	430b      	orrs	r3, r1
    6450:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    6454:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    6456:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    6458:	bcf0      	pop	{r4, r5, r6, r7}
    645a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    645c:	4d06      	ldr	r5, [pc, #24]	; (6478 <schedule_transfer+0x80>)
	endpoint->status = 0;
    645e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    6462:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    6466:	430b      	orrs	r3, r1
    6468:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    646c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    646e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    6470:	b662      	cpsie	i
}
    6472:	bcf0      	pop	{r4, r5, r6, r7}
    6474:	4770      	bx	lr
    6476:	bf00      	nop
    6478:	402e0000 	.word	0x402e0000
    647c:	e0001000 	.word	0xe0001000

00006480 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    6480:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    6482:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    6484:	b19d      	cbz	r5, 64ae <run_callbacks+0x2e>
    6486:	4606      	mov	r6, r0
    6488:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    648a:	2400      	movs	r4, #0
    648c:	e003      	b.n	6496 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    648e:	6812      	ldr	r2, [r2, #0]
		count++;
    6490:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    6492:	2a01      	cmp	r2, #1
    6494:	d00c      	beq.n	64b0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    6496:	6853      	ldr	r3, [r2, #4]
    6498:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    649c:	d0f7      	beq.n	648e <run_callbacks+0xe>
			ep->first_transfer = t;
    649e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    64a0:	b12c      	cbz	r4, 64ae <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    64a2:	4628      	mov	r0, r5
		ep->callback_function(first);
    64a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    64a6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    64a8:	4798      	blx	r3
	while (count) {
    64aa:	3c01      	subs	r4, #1
    64ac:	d1f9      	bne.n	64a2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    64ae:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    64b0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    64b4:	e7f4      	b.n	64a0 <run_callbacks+0x20>
    64b6:	bf00      	nop

000064b8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    64b8:	b430      	push	{r4, r5}
	if (len > 0) {
    64ba:	b9d9      	cbnz	r1, 64f4 <endpoint0_transmit.constprop.0+0x3c>
    64bc:	4c1f      	ldr	r4, [pc, #124]	; (653c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    64be:	4b20      	ldr	r3, [pc, #128]	; (6540 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    64c0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    64c2:	4a20      	ldr	r2, [pc, #128]	; (6544 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    64c4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    64c6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    64ca:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    64cc:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    64ce:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    64d2:	2480      	movs	r4, #128	; 0x80
    64d4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    64d6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    64da:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    64de:	481a      	ldr	r0, [pc, #104]	; (6548 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    64e0:	432b      	orrs	r3, r5
    64e2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    64e6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    64e8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    64ec:	2b00      	cmp	r3, #0
    64ee:	d1fb      	bne.n	64e8 <endpoint0_transmit.constprop.0+0x30>
}
    64f0:	bc30      	pop	{r4, r5}
    64f2:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    64f4:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    64f6:	4b15      	ldr	r3, [pc, #84]	; (654c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    64f8:	4c10      	ldr	r4, [pc, #64]	; (653c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    64fa:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    64fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    6500:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    6502:	4a10      	ldr	r2, [pc, #64]	; (6544 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    6504:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    6506:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    650a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    650c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    650e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    6512:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    6514:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    6516:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    651a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    651e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    6520:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    6522:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    6524:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    6526:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    652a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    652e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    6532:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    6536:	2b00      	cmp	r3, #0
    6538:	d1fb      	bne.n	6532 <endpoint0_transmit.constprop.0+0x7a>
    653a:	e7c0      	b.n	64be <endpoint0_transmit.constprop.0+0x6>
    653c:	20000000 	.word	0x20000000
    6540:	20001f20 	.word	0x20001f20
    6544:	402e0000 	.word	0x402e0000
    6548:	20002704 	.word	0x20002704
    654c:	20001f40 	.word	0x20001f40

00006550 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    6550:	4908      	ldr	r1, [pc, #32]	; (6574 <usb_stop_sof_interrupts+0x24>)
    6552:	2201      	movs	r2, #1
    6554:	780b      	ldrb	r3, [r1, #0]
    6556:	fa02 f000 	lsl.w	r0, r2, r0
    655a:	ea23 0000 	bic.w	r0, r3, r0
    655e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    6560:	b930      	cbnz	r0, 6570 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    6562:	4a05      	ldr	r2, [pc, #20]	; (6578 <usb_stop_sof_interrupts+0x28>)
    6564:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    6568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    656c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    6570:	4770      	bx	lr
    6572:	bf00      	nop
    6574:	200027a4 	.word	0x200027a4
    6578:	402e0000 	.word	0x402e0000

0000657c <usb_isr>:
{
    657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    6580:	4c97      	ldr	r4, [pc, #604]	; (67e0 <usb_isr+0x264>)
{
    6582:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    6584:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    6588:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    658a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    658e:	d553      	bpl.n	6638 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    6590:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    6594:	2a00      	cmp	r2, #0
    6596:	d04a      	beq.n	662e <usb_isr+0xb2>
    6598:	4e92      	ldr	r6, [pc, #584]	; (67e4 <usb_isr+0x268>)
    659a:	f8df a260 	ldr.w	sl, [pc, #608]	; 67fc <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    659e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 6814 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    65a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 6818 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    65a6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 681c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    65aa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    65ae:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    65b2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    65b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    65ba:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    65be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    65c2:	049d      	lsls	r5, r3, #18
    65c4:	d5f5      	bpl.n	65b2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    65c6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    65ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    65ce:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    65d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    65d6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    65da:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    65de:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    65e2:	d1fa      	bne.n	65da <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    65e4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    65e6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    65e8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    65ec:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    65f0:	f000 81cf 	beq.w	6992 <usb_isr+0x416>
    65f4:	f200 80db 	bhi.w	67ae <usb_isr+0x232>
    65f8:	f240 3102 	movw	r1, #770	; 0x302
    65fc:	428b      	cmp	r3, r1
    65fe:	f000 81e7 	beq.w	69d0 <usb_isr+0x454>
    6602:	f200 809a 	bhi.w	673a <usb_isr+0x1be>
    6606:	2b82      	cmp	r3, #130	; 0x82
    6608:	f000 81cb 	beq.w	69a2 <usb_isr+0x426>
    660c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    6610:	f040 808a 	bne.w	6728 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    6614:	f010 0f78 	tst.w	r0, #120	; 0x78
    6618:	b283      	uxth	r3, r0
    661a:	f000 8203 	beq.w	6a24 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    661e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6622:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    6626:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    662a:	2a00      	cmp	r2, #0
    662c:	d1bd      	bne.n	65aa <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    662e:	4a6c      	ldr	r2, [pc, #432]	; (67e0 <usb_isr+0x264>)
    6630:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    6634:	2b00      	cmp	r3, #0
    6636:	d142      	bne.n	66be <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    6638:	067e      	lsls	r6, r7, #25
    663a:	d516      	bpl.n	666a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    663c:	4b68      	ldr	r3, [pc, #416]	; (67e0 <usb_isr+0x264>)
    663e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    6642:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    6646:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    664a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    664e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    6652:	2c00      	cmp	r4, #0
    6654:	d1fb      	bne.n	664e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    6656:	f04f 32ff 	mov.w	r2, #4294967295
    665a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    665e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    6662:	f000 fd2d 	bl	70c0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    6666:	4b60      	ldr	r3, [pc, #384]	; (67e8 <usb_isr+0x26c>)
    6668:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    666a:	01fc      	lsls	r4, r7, #7
    666c:	d503      	bpl.n	6676 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    666e:	4b5f      	ldr	r3, [pc, #380]	; (67ec <usb_isr+0x270>)
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	b103      	cbz	r3, 6676 <usb_isr+0xfa>
    6674:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    6676:	01b8      	lsls	r0, r7, #6
    6678:	d503      	bpl.n	6682 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    667a:	4b5d      	ldr	r3, [pc, #372]	; (67f0 <usb_isr+0x274>)
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	b103      	cbz	r3, 6682 <usb_isr+0x106>
    6680:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    6682:	0779      	lsls	r1, r7, #29
    6684:	d508      	bpl.n	6698 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    6686:	4b56      	ldr	r3, [pc, #344]	; (67e0 <usb_isr+0x264>)
    6688:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    668c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    6690:	d047      	beq.n	6722 <usb_isr+0x1a6>
			usb_high_speed = 1;
    6692:	4b58      	ldr	r3, [pc, #352]	; (67f4 <usb_isr+0x278>)
    6694:	2201      	movs	r2, #1
    6696:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    6698:	4b51      	ldr	r3, [pc, #324]	; (67e0 <usb_isr+0x264>)
    669a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    669e:	061a      	lsls	r2, r3, #24
    66a0:	d50a      	bpl.n	66b8 <usb_isr+0x13c>
    66a2:	063b      	lsls	r3, r7, #24
    66a4:	d508      	bpl.n	66b8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    66a6:	4a54      	ldr	r2, [pc, #336]	; (67f8 <usb_isr+0x27c>)
    66a8:	7813      	ldrb	r3, [r2, #0]
    66aa:	b12b      	cbz	r3, 66b8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    66ac:	3b01      	subs	r3, #1
    66ae:	b2db      	uxtb	r3, r3
    66b0:	7013      	strb	r3, [r2, #0]
    66b2:	2b00      	cmp	r3, #0
    66b4:	f000 8272 	beq.w	6b9c <usb_isr+0x620>
}
    66b8:	b003      	add	sp, #12
    66ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    66be:	494f      	ldr	r1, [pc, #316]	; (67fc <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    66c0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    66c4:	6808      	ldr	r0, [r1, #0]
    66c6:	4203      	tst	r3, r0
    66c8:	f040 81d1 	bne.w	6a6e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    66cc:	4a46      	ldr	r2, [pc, #280]	; (67e8 <usb_isr+0x26c>)
    66ce:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    66d0:	401c      	ands	r4, r3
    66d2:	d0b1      	beq.n	6638 <usb_isr+0xbc>
				while (tx) {
    66d4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    66d8:	d010      	beq.n	66fc <usb_isr+0x180>
    66da:	4e42      	ldr	r6, [pc, #264]	; (67e4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    66dc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    66e0:	fa98 f5a8 	rbit	r5, r8
    66e4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    66e8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    66ec:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    66f0:	3040      	adds	r0, #64	; 0x40
    66f2:	f7ff fec5 	bl	6480 <run_callbacks>
				while (tx) {
    66f6:	ea38 0805 	bics.w	r8, r8, r5
    66fa:	d1f1      	bne.n	66e0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    66fc:	b2a4      	uxth	r4, r4
				while(rx) {
    66fe:	2c00      	cmp	r4, #0
    6700:	d09a      	beq.n	6638 <usb_isr+0xbc>
    6702:	4e38      	ldr	r6, [pc, #224]	; (67e4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    6704:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    6708:	fa94 f5a4 	rbit	r5, r4
    670c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    6710:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    6714:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    6718:	f7ff feb2 	bl	6480 <run_callbacks>
				while(rx) {
    671c:	43ac      	bics	r4, r5
    671e:	d1f3      	bne.n	6708 <usb_isr+0x18c>
    6720:	e78a      	b.n	6638 <usb_isr+0xbc>
			usb_high_speed = 0;
    6722:	4a34      	ldr	r2, [pc, #208]	; (67f4 <usb_isr+0x278>)
    6724:	7013      	strb	r3, [r2, #0]
    6726:	e7b7      	b.n	6698 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    6728:	2b80      	cmp	r3, #128	; 0x80
    672a:	f47f af78 	bne.w	661e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    672e:	4834      	ldr	r0, [pc, #208]	; (6800 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    6730:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    6732:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    6734:	f7ff fec0 	bl	64b8 <endpoint0_transmit.constprop.0>
		return;
    6738:	e775      	b.n	6626 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    673a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    673e:	f000 810b 	beq.w	6958 <usb_isr+0x3dc>
    6742:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    6746:	2b01      	cmp	r3, #1
    6748:	f63f af69 	bhi.w	661e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    674c:	4b2d      	ldr	r3, [pc, #180]	; (6804 <usb_isr+0x288>)
    674e:	685d      	ldr	r5, [r3, #4]
    6750:	2d00      	cmp	r5, #0
    6752:	f43f af64 	beq.w	661e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    6756:	fa1f fc8c 	uxth.w	ip, ip
    675a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    675e:	e004      	b.n	676a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    6760:	691d      	ldr	r5, [r3, #16]
    6762:	330c      	adds	r3, #12
    6764:	2d00      	cmp	r5, #0
    6766:	f43f af5a 	beq.w	661e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    676a:	881a      	ldrh	r2, [r3, #0]
    676c:	4572      	cmp	r2, lr
    676e:	d1f7      	bne.n	6760 <usb_isr+0x1e4>
    6770:	885a      	ldrh	r2, [r3, #2]
    6772:	4562      	cmp	r2, ip
    6774:	d1f4      	bne.n	6760 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    6776:	ea4f 221e 	mov.w	r2, lr, lsr #8
    677a:	2a03      	cmp	r2, #3
    677c:	f000 81a5 	beq.w	6aca <usb_isr+0x54e>
					datalen = list->length;
    6780:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    6782:	0c00      	lsrs	r0, r0, #16
    6784:	4282      	cmp	r2, r0
    6786:	bf28      	it	cs
    6788:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    678a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    678e:	f040 81a1 	bne.w	6ad4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    6792:	4b18      	ldr	r3, [pc, #96]	; (67f4 <usb_isr+0x278>)
    6794:	491c      	ldr	r1, [pc, #112]	; (6808 <usb_isr+0x28c>)
    6796:	7818      	ldrb	r0, [r3, #0]
    6798:	4b1c      	ldr	r3, [pc, #112]	; (680c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    679a:	9201      	str	r2, [sp, #4]
    679c:	2800      	cmp	r0, #0
    679e:	bf18      	it	ne
    67a0:	4619      	movne	r1, r3
    67a2:	481b      	ldr	r0, [pc, #108]	; (6810 <usb_isr+0x294>)
    67a4:	f7ff fb8e 	bl	5ec4 <memcpy>
    67a8:	4d19      	ldr	r5, [pc, #100]	; (6810 <usb_isr+0x294>)
    67aa:	9a01      	ldr	r2, [sp, #4]
    67ac:	e1e1      	b.n	6b72 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    67ae:	f242 2121 	movw	r1, #8737	; 0x2221
    67b2:	428b      	cmp	r3, r1
    67b4:	d07c      	beq.n	68b0 <usb_isr+0x334>
    67b6:	d933      	bls.n	6820 <usb_isr+0x2a4>
    67b8:	f242 3121 	movw	r1, #8993	; 0x2321
    67bc:	428b      	cmp	r3, r1
    67be:	f000 8081 	beq.w	68c4 <usb_isr+0x348>
    67c2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    67c6:	428b      	cmp	r3, r1
    67c8:	f47f af29 	bne.w	661e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    67cc:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    67d0:	b283      	uxth	r3, r0
    67d2:	f47f af24 	bne.w	661e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    67d6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    67da:	f363 0c0f 	bfi	ip, r3, #0, #16
    67de:	e7b5      	b.n	674c <usb_isr+0x1d0>
    67e0:	402e0000 	.word	0x402e0000
    67e4:	20000000 	.word	0x20000000
    67e8:	20002708 	.word	0x20002708
    67ec:	20002790 	.word	0x20002790
    67f0:	20002794 	.word	0x20002794
    67f4:	200027ab 	.word	0x200027ab
    67f8:	200027ac 	.word	0x200027ac
    67fc:	20002704 	.word	0x20002704
    6800:	2000272c 	.word	0x2000272c
    6804:	20000c5c 	.word	0x20000c5c
    6808:	600022fc 	.word	0x600022fc
    680c:	60002360 	.word	0x60002360
    6810:	20200000 	.word	0x20200000
    6814:	200026fc 	.word	0x200026fc
    6818:	b8c6cf5d 	.word	0xb8c6cf5d
    681c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    6820:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6824:	d066      	beq.n	68f4 <usb_isr+0x378>
    6826:	f242 0121 	movw	r1, #8225	; 0x2021
    682a:	428b      	cmp	r3, r1
    682c:	f47f aef7 	bne.w	661e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    6830:	0c03      	lsrs	r3, r0, #16
    6832:	2b07      	cmp	r3, #7
    6834:	f47f aef3 	bne.w	661e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    6838:	4bb2      	ldr	r3, [pc, #712]	; (6b04 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    683a:	49b3      	ldr	r1, [pc, #716]	; (6b08 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    683c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    683e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    6840:	49b2      	ldr	r1, [pc, #712]	; (6b0c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    6842:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    6844:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    6848:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    684c:	2201      	movs	r2, #1
    684e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    6850:	4aaf      	ldr	r2, [pc, #700]	; (6b10 <usb_isr+0x594>)
    6852:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    6854:	4aaf      	ldr	r2, [pc, #700]	; (6b14 <usb_isr+0x598>)
    6856:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    6858:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    685c:	f041 0101 	orr.w	r1, r1, #1
    6860:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    6864:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    6868:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    686c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    686e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    6870:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6874:	2b00      	cmp	r3, #0
    6876:	d1fb      	bne.n	6870 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    6878:	4aa7      	ldr	r2, [pc, #668]	; (6b18 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    687a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    687c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    687e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6880:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6882:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6884:	f248 0380 	movw	r3, #32896	; 0x8080
    6888:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    688a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    688e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6892:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    689a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    689e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    68a2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    68a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    68aa:	2b00      	cmp	r3, #0
    68ac:	d1fb      	bne.n	68a6 <usb_isr+0x32a>
    68ae:	e6ba      	b.n	6626 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    68b0:	b280      	uxth	r0, r0
    68b2:	b938      	cbnz	r0, 68c4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    68b4:	4b99      	ldr	r3, [pc, #612]	; (6b1c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    68b6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    68ba:	6819      	ldr	r1, [r3, #0]
    68bc:	4b98      	ldr	r3, [pc, #608]	; (6b20 <usb_isr+0x5a4>)
    68be:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    68c0:	4b98      	ldr	r3, [pc, #608]	; (6b24 <usb_isr+0x5a8>)
    68c2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    68c4:	4b94      	ldr	r3, [pc, #592]	; (6b18 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    68c6:	2200      	movs	r2, #0
    68c8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    68ca:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    68cc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    68ce:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    68d0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    68d2:	2280      	movs	r2, #128	; 0x80
    68d4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    68d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    68da:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    68de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    68e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    68e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    68ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    68ee:	2b00      	cmp	r3, #0
    68f0:	d1fb      	bne.n	68ea <usb_isr+0x36e>
    68f2:	e698      	b.n	6626 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    68f4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    68f8:	4b8b      	ldr	r3, [pc, #556]	; (6b28 <usb_isr+0x5ac>)
    68fa:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    68fc:	4b8b      	ldr	r3, [pc, #556]	; (6b2c <usb_isr+0x5b0>)
    68fe:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    6902:	4b8b      	ldr	r3, [pc, #556]	; (6b30 <usb_isr+0x5b4>)
    6904:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    6908:	4b8a      	ldr	r3, [pc, #552]	; (6b34 <usb_isr+0x5b8>)
    690a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    690e:	f000 fbd9 	bl	70c4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    6912:	2280      	movs	r2, #128	; 0x80
    6914:	4629      	mov	r1, r5
    6916:	4888      	ldr	r0, [pc, #544]	; (6b38 <usb_isr+0x5bc>)
    6918:	f001 f924 	bl	7b64 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    691c:	4b87      	ldr	r3, [pc, #540]	; (6b3c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    691e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    6920:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    6924:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    6928:	4b7b      	ldr	r3, [pc, #492]	; (6b18 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    692a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    692c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    692e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6930:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    6932:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6934:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6936:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    693a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    693e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6946:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    694a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    694e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6952:	2b00      	cmp	r3, #0
    6954:	d1fb      	bne.n	694e <usb_isr+0x3d2>
    6956:	e666      	b.n	6626 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    6958:	4b6f      	ldr	r3, [pc, #444]	; (6b18 <usb_isr+0x59c>)
    695a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    695c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    695e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6960:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    6962:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6964:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6966:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6968:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    696c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6970:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6978:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    697c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6980:	2b00      	cmp	r3, #0
    6982:	d1fb      	bne.n	697c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    6984:	0c13      	lsrs	r3, r2, #16
    6986:	065b      	lsls	r3, r3, #25
    6988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    698c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    6990:	e649      	b.n	6626 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    6992:	4b65      	ldr	r3, [pc, #404]	; (6b28 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    6994:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    6996:	486a      	ldr	r0, [pc, #424]	; (6b40 <usb_isr+0x5c4>)
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    699c:	f7ff fd8c 	bl	64b8 <endpoint0_transmit.constprop.0>
		return;
    69a0:	e641      	b.n	6626 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    69a2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    69a4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    69a8:	f47f ae39 	bne.w	661e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    69ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    69b0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    69b4:	4a62      	ldr	r2, [pc, #392]	; (6b40 <usb_isr+0x5c4>)
    69b6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    69b8:	0618      	lsls	r0, r3, #24
    69ba:	f100 809e 	bmi.w	6afa <usb_isr+0x57e>
    69be:	07cb      	lsls	r3, r1, #31
    69c0:	d501      	bpl.n	69c6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    69c2:	2301      	movs	r3, #1
    69c4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    69c6:	2102      	movs	r1, #2
    69c8:	485d      	ldr	r0, [pc, #372]	; (6b40 <usb_isr+0x5c4>)
    69ca:	f7ff fd75 	bl	64b8 <endpoint0_transmit.constprop.0>
		return;
    69ce:	e62a      	b.n	6626 <usb_isr+0xaa>
		if (endpoint > 7) break;
    69d0:	f010 0f78 	tst.w	r0, #120	; 0x78
    69d4:	b283      	uxth	r3, r0
    69d6:	f47f ae22 	bne.w	661e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    69da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    69de:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    69e2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    69e6:	bf14      	ite	ne
    69e8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    69ec:	f043 0301 	orreq.w	r3, r3, #1
    69f0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    69f4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    69f6:	4b48      	ldr	r3, [pc, #288]	; (6b18 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    69f8:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    69fa:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    69fc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    69fe:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6a00:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6a02:	2280      	movs	r2, #128	; 0x80
    6a04:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6a06:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6a0a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6a0e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6a16:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6a1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6a1e:	2b00      	cmp	r3, #0
    6a20:	d1fb      	bne.n	6a1a <usb_isr+0x49e>
    6a22:	e600      	b.n	6626 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    6a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    6a28:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    6a2c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    6a30:	bf14      	ite	ne
    6a32:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    6a36:	f023 0301 	biceq.w	r3, r3, #1
    6a3a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    6a3e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    6a40:	4b35      	ldr	r3, [pc, #212]	; (6b18 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    6a42:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    6a44:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    6a46:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    6a48:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    6a4a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    6a4c:	2280      	movs	r2, #128	; 0x80
    6a4e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    6a50:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    6a54:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    6a58:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6a60:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    6a64:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d1fb      	bne.n	6a64 <usb_isr+0x4e8>
    6a6c:	e5db      	b.n	6626 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    6a6e:	2000      	movs	r0, #0
    6a70:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    6a72:	4926      	ldr	r1, [pc, #152]	; (6b0c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    6a74:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    6a76:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    6a78:	f242 0121 	movw	r1, #8225	; 0x2021
    6a7c:	428c      	cmp	r4, r1
    6a7e:	f47f ae25 	bne.w	66cc <usb_isr+0x150>
    6a82:	b280      	uxth	r0, r0
    6a84:	2800      	cmp	r0, #0
    6a86:	f47f ae21 	bne.w	66cc <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    6a8a:	492e      	ldr	r1, [pc, #184]	; (6b44 <usb_isr+0x5c8>)
    6a8c:	4c2e      	ldr	r4, [pc, #184]	; (6b48 <usb_isr+0x5cc>)
    6a8e:	c903      	ldmia	r1, {r0, r1}
    6a90:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    6a92:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    6a94:	ea4f 4111 	mov.w	r1, r1, lsr #16
    6a98:	6020      	str	r0, [r4, #0]
    6a9a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    6a9c:	f47f ae16 	bne.w	66cc <usb_isr+0x150>
	__disable_irq();
    6aa0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    6aa2:	482a      	ldr	r0, [pc, #168]	; (6b4c <usb_isr+0x5d0>)
    6aa4:	7801      	ldrb	r1, [r0, #0]
    6aa6:	f041 0108 	orr.w	r1, r1, #8
    6aaa:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    6aac:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    6ab0:	060d      	lsls	r5, r1, #24
    6ab2:	d405      	bmi.n	6ac0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    6ab4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    6ab6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    6ab8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    6abc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    6ac0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    6ac2:	4a23      	ldr	r2, [pc, #140]	; (6b50 <usb_isr+0x5d4>)
    6ac4:	2150      	movs	r1, #80	; 0x50
    6ac6:	7011      	strb	r1, [r2, #0]
    6ac8:	e600      	b.n	66cc <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    6aca:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    6acc:	782a      	ldrb	r2, [r5, #0]
    6ace:	4282      	cmp	r2, r0
    6ad0:	bf28      	it	cs
    6ad2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    6ad4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    6ad8:	d144      	bne.n	6b64 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    6ada:	4b1e      	ldr	r3, [pc, #120]	; (6b54 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    6adc:	4d1e      	ldr	r5, [pc, #120]	; (6b58 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    6ade:	7818      	ldrb	r0, [r3, #0]
    6ae0:	491e      	ldr	r1, [pc, #120]	; (6b5c <usb_isr+0x5e0>)
    6ae2:	4b1f      	ldr	r3, [pc, #124]	; (6b60 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    6ae4:	9201      	str	r2, [sp, #4]
    6ae6:	2800      	cmp	r0, #0
    6ae8:	bf18      	it	ne
    6aea:	4619      	movne	r1, r3
    6aec:	4628      	mov	r0, r5
    6aee:	f7ff f9e9 	bl	5ec4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    6af2:	2307      	movs	r3, #7
    6af4:	706b      	strb	r3, [r5, #1]
    6af6:	9a01      	ldr	r2, [sp, #4]
    6af8:	e03b      	b.n	6b72 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    6afa:	03c9      	lsls	r1, r1, #15
    6afc:	f53f af61 	bmi.w	69c2 <usb_isr+0x446>
    6b00:	e761      	b.n	69c6 <usb_isr+0x44a>
    6b02:	bf00      	nop
    6b04:	20001f40 	.word	0x20001f40
    6b08:	200036fc 	.word	0x200036fc
    6b0c:	200020e0 	.word	0x200020e0
    6b10:	00070080 	.word	0x00070080
    6b14:	200046fc 	.word	0x200046fc
    6b18:	20001f20 	.word	0x20001f20
    6b1c:	2000277c 	.word	0x2000277c
    6b20:	2000278c 	.word	0x2000278c
    6b24:	200027a9 	.word	0x200027a9
    6b28:	200027aa 	.word	0x200027aa
    6b2c:	00cc0002 	.word	0x00cc0002
    6b30:	000200c8 	.word	0x000200c8
    6b34:	00c80002 	.word	0x00c80002
    6b38:	20000080 	.word	0x20000080
    6b3c:	74d59319 	.word	0x74d59319
    6b40:	2000272c 	.word	0x2000272c
    6b44:	200026fc 	.word	0x200026fc
    6b48:	20002784 	.word	0x20002784
    6b4c:	200027a4 	.word	0x200027a4
    6b50:	200027ac 	.word	0x200027ac
    6b54:	200027ab 	.word	0x200027ab
    6b58:	20200000 	.word	0x20200000
    6b5c:	60002360 	.word	0x60002360
    6b60:	600022fc 	.word	0x600022fc
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    6b64:	4629      	mov	r1, r5
    6b66:	4d10      	ldr	r5, [pc, #64]	; (6ba8 <usb_isr+0x62c>)
    6b68:	9201      	str	r2, [sp, #4]
    6b6a:	4628      	mov	r0, r5
    6b6c:	f7ff f9aa 	bl	5ec4 <memcpy>
    6b70:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    6b72:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    6b76:	4415      	add	r5, r2
	asm("dsb");
    6b78:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    6b7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6b80:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    6b84:	3320      	adds	r3, #32
	} while (location < end_addr);
    6b86:	429d      	cmp	r5, r3
    6b88:	d8fa      	bhi.n	6b80 <usb_isr+0x604>
	asm("dsb");
    6b8a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6b8e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    6b92:	4805      	ldr	r0, [pc, #20]	; (6ba8 <usb_isr+0x62c>)
    6b94:	4611      	mov	r1, r2
    6b96:	f7ff fc8f 	bl	64b8 <endpoint0_transmit.constprop.0>
				return;
    6b9a:	e544      	b.n	6626 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    6b9c:	2003      	movs	r0, #3
    6b9e:	f7ff fcd7 	bl	6550 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    6ba2:	f001 fa15 	bl	7fd0 <___reboot_Teensyduino__veneer>
    6ba6:	bf00      	nop
    6ba8:	20200000 	.word	0x20200000

00006bac <usb_config_rx>:
{
    6bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bb0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    6bb2:	1e83      	subs	r3, r0, #2
    6bb4:	2b02      	cmp	r3, #2
    6bb6:	d901      	bls.n	6bbc <usb_config_rx+0x10>
}
    6bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    6bbc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 6c0c <usb_config_rx+0x60>
    6bc0:	4615      	mov	r5, r2
    6bc2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    6bc4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    6bc6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    6bca:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    6bcc:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    6bd0:	2100      	movs	r1, #0
    6bd2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    6bd6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    6bd8:	f000 ffc4 	bl	7b64 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    6bdc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    6be0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    6be2:	0952      	lsrs	r2, r2, #5
    6be4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    6be8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    6bec:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    6bf0:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    6bf4:	2f00      	cmp	r7, #0
    6bf6:	d0df      	beq.n	6bb8 <usb_config_rx+0xc>
    6bf8:	4a03      	ldr	r2, [pc, #12]	; (6c08 <usb_config_rx+0x5c>)
    6bfa:	40b3      	lsls	r3, r6
    6bfc:	6811      	ldr	r1, [r2, #0]
    6bfe:	430b      	orrs	r3, r1
    6c00:	6013      	str	r3, [r2, #0]
}
    6c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c06:	bf00      	nop
    6c08:	20002708 	.word	0x20002708
    6c0c:	20000000 	.word	0x20000000

00006c10 <usb_config_tx>:
{
    6c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c14:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    6c16:	1e81      	subs	r1, r0, #2
    6c18:	2902      	cmp	r1, #2
    6c1a:	d901      	bls.n	6c20 <usb_config_tx+0x10>
}
    6c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    6c20:	01c7      	lsls	r7, r0, #7
    6c22:	f8df 904c 	ldr.w	r9, [pc, #76]	; 6c70 <usb_config_tx+0x60>
    6c26:	4692      	mov	sl, r2
    6c28:	4604      	mov	r4, r0
    6c2a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    6c2c:	223c      	movs	r2, #60	; 0x3c
    6c2e:	2100      	movs	r1, #0
    6c30:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    6c32:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    6c36:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    6c38:	f108 0004 	add.w	r0, r8, #4
    6c3c:	f000 ff92 	bl	7b64 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    6c40:	faba f28a 	clz	r2, sl
    6c44:	0952      	lsrs	r2, r2, #5
    6c46:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    6c4a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    6c4e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    6c50:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    6c54:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    6c58:	2e00      	cmp	r6, #0
    6c5a:	d0df      	beq.n	6c1c <usb_config_tx+0xc>
    6c5c:	4b03      	ldr	r3, [pc, #12]	; (6c6c <usb_config_tx+0x5c>)
    6c5e:	3410      	adds	r4, #16
    6c60:	6819      	ldr	r1, [r3, #0]
    6c62:	40a2      	lsls	r2, r4
    6c64:	430a      	orrs	r2, r1
    6c66:	601a      	str	r2, [r3, #0]
}
    6c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c6c:	20002708 	.word	0x20002708
    6c70:	20000000 	.word	0x20000000

00006c74 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    6c74:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    6c76:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    6c78:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    6c7a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    6c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    6c82:	b410      	push	{r4}
	transfer->next = 1;
    6c84:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    6c86:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    6c88:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    6c8c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    6c8e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    6c92:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    6c96:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    6c98:	6181      	str	r1, [r0, #24]
}
    6c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    6c9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    6ca2:	4770      	bx	lr

00006ca4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    6ca4:	1e83      	subs	r3, r0, #2
{
    6ca6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    6ca8:	2b02      	cmp	r3, #2
    6caa:	d900      	bls.n	6cae <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    6cac:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    6cae:	4b06      	ldr	r3, [pc, #24]	; (6cc8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    6cb0:	f100 0110 	add.w	r1, r0, #16
    6cb4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    6cb8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    6cbc:	fa0c f101 	lsl.w	r1, ip, r1
    6cc0:	3040      	adds	r0, #64	; 0x40
    6cc2:	f7ff bb99 	b.w	63f8 <schedule_transfer>
    6cc6:	bf00      	nop
    6cc8:	20000000 	.word	0x20000000

00006ccc <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    6ccc:	1e83      	subs	r3, r0, #2
{
    6cce:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    6cd0:	2b02      	cmp	r3, #2
    6cd2:	d900      	bls.n	6cd6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    6cd4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    6cd6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    6cd8:	4b02      	ldr	r3, [pc, #8]	; (6ce4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    6cda:	4081      	lsls	r1, r0
    6cdc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    6ce0:	f7ff bb8a 	b.w	63f8 <schedule_transfer>
    6ce4:	20000000 	.word	0x20000000

00006ce8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    6ce8:	6840      	ldr	r0, [r0, #4]
#endif
}
    6cea:	4770      	bx	lr

00006cec <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    6cec:	4a12      	ldr	r2, [pc, #72]	; (6d38 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6cee:	4b13      	ldr	r3, [pc, #76]	; (6d3c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    6cf0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    6cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    6cf8:	4298      	cmp	r0, r3
{
    6cfa:	b510      	push	{r4, lr}
    6cfc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    6cfe:	d202      	bcs.n	6d06 <usb_init_serialnumber+0x1a>
    6d00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6d04:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    6d06:	4c0e      	ldr	r4, [pc, #56]	; (6d40 <usb_init_serialnumber+0x54>)
    6d08:	a901      	add	r1, sp, #4
    6d0a:	220a      	movs	r2, #10
    6d0c:	f7ff f976 	bl	5ffc <ultoa>
	for (i=0; i<10; i++) {
    6d10:	a901      	add	r1, sp, #4
    6d12:	2300      	movs	r3, #0
    6d14:	4620      	mov	r0, r4
		char c = buf[i];
    6d16:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    6d1a:	3301      	adds	r3, #1
		if (!c) break;
    6d1c:	b13a      	cbz	r2, 6d2e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    6d1e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    6d20:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    6d24:	d1f7      	bne.n	6d16 <usb_init_serialnumber+0x2a>
    6d26:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6d28:	7023      	strb	r3, [r4, #0]
}
    6d2a:	b004      	add	sp, #16
    6d2c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6d2e:	005b      	lsls	r3, r3, #1
    6d30:	b2db      	uxtb	r3, r3
    6d32:	7023      	strb	r3, [r4, #0]
}
    6d34:	b004      	add	sp, #16
    6d36:	bd10      	pop	{r4, pc}
    6d38:	401f4400 	.word	0x401f4400
    6d3c:	00989680 	.word	0x00989680
    6d40:	20001990 	.word	0x20001990

00006d44 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    6d44:	f000 badc 	b.w	7300 <usb_serial_flush_input>

00006d48 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    6d48:	f000 baac 	b.w	72a4 <usb_serial_peekchar>

00006d4c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    6d4c:	f000 bb10 	b.w	7370 <usb_serial_getchar>

00006d50 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    6d50:	f000 baca 	b.w	72e8 <usb_serial_available>

00006d54 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6d54:	f000 bb66 	b.w	7424 <usb_serial_flush_output>

00006d58 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    6d58:	f000 bb3c 	b.w	73d4 <usb_serial_write_buffer_free>

00006d5c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6d5c:	4608      	mov	r0, r1
    6d5e:	4611      	mov	r1, r2
    6d60:	f000 bb2c 	b.w	73bc <usb_serial_write>

00006d64 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    6d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    6d66:	4c14      	ldr	r4, [pc, #80]	; (6db8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6d68:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6d6c:	4e13      	ldr	r6, [pc, #76]	; (6dbc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    6d72:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6d76:	4f12      	ldr	r7, [pc, #72]	; (6dc0 <rx_queue_transfer+0x5c>)
    6d78:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    6d7c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    6d7e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    6d82:	4621      	mov	r1, r4
    6d84:	883a      	ldrh	r2, [r7, #0]
    6d86:	4630      	mov	r0, r6
    6d88:	f7ff ff74 	bl	6c74 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    6d8c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    6d8e:	4423      	add	r3, r4
	asm("dsb");
    6d90:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    6d94:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    6d98:	3420      	adds	r4, #32
	} while (location < end_addr);
    6d9a:	42a3      	cmp	r3, r4
    6d9c:	d8fa      	bhi.n	6d94 <rx_queue_transfer+0x30>
	asm("dsb");
    6d9e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6da2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    6da6:	2003      	movs	r0, #3
    6da8:	4631      	mov	r1, r6
    6daa:	f7ff ff8f 	bl	6ccc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    6db2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    6db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6db8:	20200080 	.word	0x20200080
    6dbc:	20001f60 	.word	0x20001f60
    6dc0:	20002798 	.word	0x20002798

00006dc4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6dc4:	4b24      	ldr	r3, [pc, #144]	; (6e58 <rx_event+0x94>)
{
    6dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6dca:	881c      	ldrh	r4, [r3, #0]
    6dcc:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    6dce:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    6dd0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    6dd4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    6dd6:	2c00      	cmp	r4, #0
    6dd8:	dd24      	ble.n	6e24 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    6dda:	4920      	ldr	r1, [pc, #128]	; (6e5c <rx_event+0x98>)
		if (head != rx_tail) {
    6ddc:	4820      	ldr	r0, [pc, #128]	; (6e60 <rx_event+0x9c>)
		uint32_t head = rx_head;
    6dde:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    6de0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    6de2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    6de4:	4e1f      	ldr	r6, [pc, #124]	; (6e64 <rx_event+0xa0>)
		if (head != rx_tail) {
    6de6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    6de8:	481f      	ldr	r0, [pc, #124]	; (6e68 <rx_event+0xa4>)
		if (head != rx_tail) {
    6dea:	d007      	beq.n	6dfc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    6dec:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    6df0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    6df4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    6df8:	4294      	cmp	r4, r2
    6dfa:	d918      	bls.n	6e2e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    6dfc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    6dfe:	2200      	movs	r2, #0
		rx_count[i] = len;
    6e00:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    6e04:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    6e06:	4e19      	ldr	r6, [pc, #100]	; (6e6c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    6e08:	bf88      	it	hi
    6e0a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    6e0c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    6e10:	bf98      	it	ls
    6e12:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    6e14:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    6e16:	4b16      	ldr	r3, [pc, #88]	; (6e70 <rx_event+0xac>)
		rx_head = head;
    6e18:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    6e1a:	681a      	ldr	r2, [r3, #0]
    6e1c:	4414      	add	r4, r2
    6e1e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    6e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    6e24:	4628      	mov	r0, r5
}
    6e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    6e2a:	f7ff bf9b 	b.w	6d64 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6e2e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    6e32:	4910      	ldr	r1, [pc, #64]	; (6e74 <rx_event+0xb0>)
    6e34:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    6e36:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    6e38:	4408      	add	r0, r1
    6e3a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    6e3e:	f7ff f841 	bl	5ec4 <memcpy>
				rx_available += len;
    6e42:	4a0b      	ldr	r2, [pc, #44]	; (6e70 <rx_event+0xac>)
				rx_queue_transfer(i);
    6e44:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    6e46:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    6e4a:	6813      	ldr	r3, [r2, #0]
    6e4c:	4423      	add	r3, r4
}
    6e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    6e52:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    6e54:	f7ff bf86 	b.w	6d64 <rx_queue_transfer>
    6e58:	20002798 	.word	0x20002798
    6e5c:	200027a2 	.word	0x200027a2
    6e60:	200027a3 	.word	0x200027a3
    6e64:	20002738 	.word	0x20002738
    6e68:	20002758 	.word	0x20002758
    6e6c:	20002748 	.word	0x20002748
    6e70:	20002734 	.word	0x20002734
    6e74:	20200080 	.word	0x20200080

00006e78 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    6e78:	4b1d      	ldr	r3, [pc, #116]	; (6ef0 <usb_serial_flush_callback+0x78>)
    6e7a:	781a      	ldrb	r2, [r3, #0]
    6e7c:	2a00      	cmp	r2, #0
    6e7e:	d136      	bne.n	6eee <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    6e80:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    6e84:	4a1b      	ldr	r2, [pc, #108]	; (6ef4 <usb_serial_flush_callback+0x7c>)
    6e86:	7812      	ldrb	r2, [r2, #0]
    6e88:	b38a      	cbz	r2, 6eee <usb_serial_flush_callback+0x76>
{
    6e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    6e8e:	4d1a      	ldr	r5, [pc, #104]	; (6ef8 <usb_serial_flush_callback+0x80>)
    6e90:	882a      	ldrh	r2, [r5, #0]
    6e92:	b352      	cbz	r2, 6eea <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    6e94:	4e19      	ldr	r6, [pc, #100]	; (6efc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    6e96:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    6e9a:	4f19      	ldr	r7, [pc, #100]	; (6f00 <usb_serial_flush_callback+0x88>)
    6e9c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6e9e:	4c19      	ldr	r4, [pc, #100]	; (6f04 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    6ea0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6ea4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    6ea8:	4642      	mov	r2, r8
    6eaa:	4638      	mov	r0, r7
    6eac:	4621      	mov	r1, r4
    6eae:	f7ff fee1 	bl	6c74 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    6eb2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    6eb6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    6eba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6ebe:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    6ec2:	3420      	adds	r4, #32
	} while (location < end_addr);
    6ec4:	42a2      	cmp	r2, r4
    6ec6:	d8fa      	bhi.n	6ebe <usb_serial_flush_callback+0x46>
	asm("dsb");
    6ec8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6ecc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    6ed0:	2004      	movs	r0, #4
    6ed2:	4639      	mov	r1, r7
    6ed4:	f7ff fee6 	bl	6ca4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    6ed8:	7833      	ldrb	r3, [r6, #0]
    6eda:	3301      	adds	r3, #1
    6edc:	b2db      	uxtb	r3, r3
    6ede:	2b03      	cmp	r3, #3
    6ee0:	bf88      	it	hi
    6ee2:	2300      	movhi	r3, #0
    6ee4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    6ee6:	2300      	movs	r3, #0
    6ee8:	802b      	strh	r3, [r5, #0]
}
    6eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eee:	4770      	bx	lr
    6ef0:	200027a8 	.word	0x200027a8
    6ef4:	200027aa 	.word	0x200027aa
    6ef8:	2000279a 	.word	0x2000279a
    6efc:	200027a7 	.word	0x200027a7
    6f00:	20002060 	.word	0x20002060
    6f04:	20201080 	.word	0x20201080

00006f08 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    6f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f0c:	b085      	sub	sp, #20
	while (size > 0) {
    6f0e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    6f12:	2900      	cmp	r1, #0
    6f14:	f000 80bf 	beq.w	7096 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    6f18:	2300      	movs	r3, #0
    6f1a:	4c60      	ldr	r4, [pc, #384]	; (709c <usb_serial_write.part.0+0x194>)
    6f1c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 70b8 <usb_serial_write.part.0+0x1b0>
    6f20:	f8df a198 	ldr.w	sl, [pc, #408]	; 70bc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    6f24:	4f5e      	ldr	r7, [pc, #376]	; (70a0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    6f26:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    6f28:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    6f2a:	4a5e      	ldr	r2, [pc, #376]	; (70a4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    6f2c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    6f2e:	4b5e      	ldr	r3, [pc, #376]	; (70a8 <usb_serial_write.part.0+0x1a0>)
    6f30:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    6f32:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    6f36:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	f040 80a7 	bne.w	708e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    6f40:	461e      	mov	r6, r3
		int waiting=0;
    6f42:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    6f44:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    6f46:	4648      	mov	r0, r9
    6f48:	f7ff fece 	bl	6ce8 <usb_transfer_status>
			if (!(status & 0x80)) {
    6f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    6f50:	f000 808c 	beq.w	706c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    6f54:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    6f58:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    6f5c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    6f60:	b905      	cbnz	r5, 6f64 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    6f62:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    6f64:	2b00      	cmp	r3, #0
    6f66:	d17d      	bne.n	7064 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    6f68:	683b      	ldr	r3, [r7, #0]
    6f6a:	1b9b      	subs	r3, r3, r6
    6f6c:	2b78      	cmp	r3, #120	; 0x78
    6f6e:	f200 8087 	bhi.w	7080 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    6f72:	4b4e      	ldr	r3, [pc, #312]	; (70ac <usb_serial_write.part.0+0x1a4>)
    6f74:	781b      	ldrb	r3, [r3, #0]
    6f76:	2b00      	cmp	r3, #0
    6f78:	d074      	beq.n	7064 <usb_serial_write.part.0+0x15c>
			yield();
    6f7a:	f000 fa9d 	bl	74b8 <yield>
			tx_noautoflush = 1;
    6f7e:	2201      	movs	r2, #1
		while (!tx_available) {
    6f80:	f8b8 3000 	ldrh.w	r3, [r8]
    6f84:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    6f86:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d0dc      	beq.n	6f46 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    6f8c:	4a46      	ldr	r2, [pc, #280]	; (70a8 <usb_serial_write.part.0+0x1a0>)
    6f8e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    6f92:	7811      	ldrb	r1, [r2, #0]
    6f94:	461a      	mov	r2, r3
    6f96:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    6f9a:	4d45      	ldr	r5, [pc, #276]	; (70b0 <usb_serial_write.part.0+0x1a8>)
    6f9c:	02c9      	lsls	r1, r1, #11
    6f9e:	4428      	add	r0, r5
		if (size >= tx_available) {
    6fa0:	9d01      	ldr	r5, [sp, #4]
    6fa2:	4295      	cmp	r5, r2
    6fa4:	d217      	bcs.n	6fd6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    6fa6:	9303      	str	r3, [sp, #12]
    6fa8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    6fac:	462a      	mov	r2, r5
    6fae:	f7fe ff89 	bl	5ec4 <memcpy>
			tx_available -= size;
    6fb2:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6fb4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    6fb8:	1b5b      	subs	r3, r3, r5
    6fba:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    6fbe:	4b3d      	ldr	r3, [pc, #244]	; (70b4 <usb_serial_write.part.0+0x1ac>)
    6fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    6fc4:	f3bf 8f4f 	dsb	sy
			sent += size;
    6fc8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    6fca:	2300      	movs	r3, #0
			sent += size;
    6fcc:	4428      	add	r0, r5
		tx_noautoflush = 0;
    6fce:	7023      	strb	r3, [r4, #0]
}
    6fd0:	b005      	add	sp, #20
    6fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6fd6:	4b36      	ldr	r3, [pc, #216]	; (70b0 <usb_serial_write.part.0+0x1a8>)
    6fd8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    6fda:	9902      	ldr	r1, [sp, #8]
    6fdc:	f7fe ff72 	bl	5ec4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    6fe0:	2300      	movs	r3, #0
    6fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6fe6:	4629      	mov	r1, r5
    6fe8:	4648      	mov	r0, r9
    6fea:	f7ff fe43 	bl	6c74 <usb_prepare_transfer>
	asm("dsb");
    6fee:	f3bf 8f4f 	dsb	sy
    6ff2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    6ff6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    6ffa:	4293      	cmp	r3, r2
    6ffc:	bf34      	ite	cc
    6ffe:	2301      	movcc	r3, #1
    7000:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    7002:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7006:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    700a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    700e:	3520      	adds	r5, #32
	} while (location < end_addr);
    7010:	42ab      	cmp	r3, r5
    7012:	d1fa      	bne.n	700a <usb_serial_write.part.0+0x102>
	asm("dsb");
    7014:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7018:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    701c:	2004      	movs	r0, #4
    701e:	4649      	mov	r1, r9
    7020:	f7ff fe40 	bl	6ca4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    7024:	4a20      	ldr	r2, [pc, #128]	; (70a8 <usb_serial_write.part.0+0x1a0>)
    7026:	7813      	ldrb	r3, [r2, #0]
    7028:	3301      	adds	r3, #1
    702a:	b2db      	uxtb	r3, r3
    702c:	2b03      	cmp	r3, #3
    702e:	bf84      	itt	hi
    7030:	2300      	movhi	r3, #0
    7032:	4a1d      	ldrhi	r2, [pc, #116]	; (70a8 <usb_serial_write.part.0+0x1a0>)
    7034:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    7036:	f8b8 3000 	ldrh.w	r3, [r8]
    703a:	9a01      	ldr	r2, [sp, #4]
    703c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    703e:	9a00      	ldr	r2, [sp, #0]
    7040:	441a      	add	r2, r3
			size -= tx_available;
    7042:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    7044:	9200      	str	r2, [sp, #0]
			data += tx_available;
    7046:	9a02      	ldr	r2, [sp, #8]
    7048:	441a      	add	r2, r3
			tx_available = 0;
    704a:	2300      	movs	r3, #0
			data += tx_available;
    704c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    704e:	4a19      	ldr	r2, [pc, #100]	; (70b4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    7050:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    7054:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    7058:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    705c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    705e:	2900      	cmp	r1, #0
    7060:	f47f af62 	bne.w	6f28 <usb_serial_write.part.0+0x20>
	return sent;
    7064:	9800      	ldr	r0, [sp, #0]
}
    7066:	b005      	add	sp, #20
    7068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    706c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7070:	4b0d      	ldr	r3, [pc, #52]	; (70a8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    7072:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7076:	7819      	ldrb	r1, [r3, #0]
				break;
    7078:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    707a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    707e:	e78a      	b.n	6f96 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    7080:	2301      	movs	r3, #1
				return sent;
    7082:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    7084:	f88a 3000 	strb.w	r3, [sl]
}
    7088:	b005      	add	sp, #20
    708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    708e:	461a      	mov	r2, r3
    7090:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    7094:	e77f      	b.n	6f96 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    7096:	9801      	ldr	r0, [sp, #4]
	return sent;
    7098:	e7e5      	b.n	7066 <usb_serial_write.part.0+0x15e>
    709a:	bf00      	nop
    709c:	200027a8 	.word	0x200027a8
    70a0:	2000277c 	.word	0x2000277c
    70a4:	20002060 	.word	0x20002060
    70a8:	200027a7 	.word	0x200027a7
    70ac:	200027aa 	.word	0x200027aa
    70b0:	20201080 	.word	0x20201080
    70b4:	402e0000 	.word	0x402e0000
    70b8:	2000279a 	.word	0x2000279a
    70bc:	200027a6 	.word	0x200027a6

000070c0 <usb_serial_reset>:
}
    70c0:	4770      	bx	lr
    70c2:	bf00      	nop

000070c4 <usb_serial_configure>:
	if (usb_high_speed) {
    70c4:	4b2d      	ldr	r3, [pc, #180]	; (717c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    70c6:	2100      	movs	r1, #0
    70c8:	2280      	movs	r2, #128	; 0x80
    70ca:	482d      	ldr	r0, [pc, #180]	; (7180 <usb_serial_configure+0xbc>)
{
    70cc:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    70ce:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    70d0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    70d2:	4d2c      	ldr	r5, [pc, #176]	; (7184 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    70d4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    70d6:	4e2c      	ldr	r6, [pc, #176]	; (7188 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    70d8:	bf0c      	ite	eq
    70da:	2340      	moveq	r3, #64	; 0x40
    70dc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    70e0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    70e2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    70e4:	f000 fd3e 	bl	7b64 <memset>
	tx_head = 0;
    70e8:	4a28      	ldr	r2, [pc, #160]	; (718c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    70ea:	4621      	mov	r1, r4
	tx_available = 0;
    70ec:	4b28      	ldr	r3, [pc, #160]	; (7190 <usb_serial_configure+0xcc>)
	tx_head = 0;
    70ee:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    70f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    70f4:	4827      	ldr	r0, [pc, #156]	; (7194 <usb_serial_configure+0xd0>)
	tx_available = 0;
    70f6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    70f8:	f000 fd34 	bl	7b64 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    70fc:	4a26      	ldr	r2, [pc, #152]	; (7198 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    70fe:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    7100:	4b26      	ldr	r3, [pc, #152]	; (719c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    7102:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    7104:	e9c2 4400 	strd	r4, r4, [r2]
    7108:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    710c:	4a24      	ldr	r2, [pc, #144]	; (71a0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    710e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    7112:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    7114:	4a23      	ldr	r2, [pc, #140]	; (71a4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    7116:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    711a:	4b23      	ldr	r3, [pc, #140]	; (71a8 <usb_serial_configure+0xe4>)
    711c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    711e:	4623      	mov	r3, r4
	rx_available = 0;
    7120:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    7122:	4622      	mov	r2, r4
    7124:	f7ff fd74 	bl	6c10 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    7128:	4622      	mov	r2, r4
    712a:	8831      	ldrh	r1, [r6, #0]
    712c:	2003      	movs	r0, #3
    712e:	4b1f      	ldr	r3, [pc, #124]	; (71ac <usb_serial_configure+0xe8>)
    7130:	f7ff fd3c 	bl	6bac <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    7134:	4623      	mov	r3, r4
    7136:	2201      	movs	r2, #1
    7138:	8829      	ldrh	r1, [r5, #0]
    713a:	2004      	movs	r0, #4
    713c:	f7ff fd68 	bl	6c10 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    7140:	4620      	mov	r0, r4
    7142:	3401      	adds	r4, #1
    7144:	f7ff fe0e 	bl	6d64 <rx_queue_transfer>
    7148:	2c08      	cmp	r4, #8
    714a:	d1f9      	bne.n	7140 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    714c:	4b18      	ldr	r3, [pc, #96]	; (71b0 <usb_serial_configure+0xec>)
    714e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    7150:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    7152:	4818      	ldr	r0, [pc, #96]	; (71b4 <usb_serial_configure+0xf0>)
    7154:	4c18      	ldr	r4, [pc, #96]	; (71b8 <usb_serial_configure+0xf4>)
    7156:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    7158:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    7160:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    7164:	4915      	ldr	r1, [pc, #84]	; (71bc <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    7166:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    716a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    716e:	b121      	cbz	r1, 717a <usb_serial_configure+0xb6>
    7170:	4a13      	ldr	r2, [pc, #76]	; (71c0 <usb_serial_configure+0xfc>)
    7172:	7813      	ldrb	r3, [r2, #0]
    7174:	f043 0301 	orr.w	r3, r3, #1
    7178:	7013      	strb	r3, [r2, #0]
}
    717a:	bd70      	pop	{r4, r5, r6, pc}
    717c:	200027ab 	.word	0x200027ab
    7180:	20002060 	.word	0x20002060
    7184:	2000279c 	.word	0x2000279c
    7188:	20002798 	.word	0x20002798
    718c:	200027a7 	.word	0x200027a7
    7190:	2000279a 	.word	0x2000279a
    7194:	20001f60 	.word	0x20001f60
    7198:	20002738 	.word	0x20002738
    719c:	20002748 	.word	0x20002748
    71a0:	200027a2 	.word	0x200027a2
    71a4:	20002734 	.word	0x20002734
    71a8:	200027a3 	.word	0x200027a3
    71ac:	00006dc5 	.word	0x00006dc5
    71b0:	402e0000 	.word	0x402e0000
    71b4:	20002790 	.word	0x20002790
    71b8:	00006e79 	.word	0x00006e79
    71bc:	00000000 	.word	0x00000000
    71c0:	200027ad 	.word	0x200027ad

000071c4 <usb_serial_read>:
{
    71c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    71c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    71cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    71d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 729c <usb_serial_read+0xd8>
{
    71d4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    71d6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    71da:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    71dc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    71e0:	2900      	cmp	r1, #0
    71e2:	d04f      	beq.n	7284 <usb_serial_read+0xc0>
    71e4:	4680      	mov	r8, r0
    71e6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    71e8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    71ea:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 72a0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    71ee:	4b26      	ldr	r3, [pc, #152]	; (7288 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    71f0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    71f4:	4925      	ldr	r1, [pc, #148]	; (728c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    71f6:	781b      	ldrb	r3, [r3, #0]
    71f8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    71fa:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    71fe:	d03f      	beq.n	7280 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    7200:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    7202:	4b23      	ldr	r3, [pc, #140]	; (7290 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    7204:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    7206:	bf28      	it	cs
    7208:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    720a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    720c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    7210:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    7214:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    7216:	4b1f      	ldr	r3, [pc, #124]	; (7294 <usb_serial_read+0xd0>)
    7218:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    721c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    7220:	42aa      	cmp	r2, r5
    7222:	d21c      	bcs.n	725e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    7224:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    7228:	4918      	ldr	r1, [pc, #96]	; (728c <usb_serial_read+0xc8>)
			rx_available -= len;
    722a:	4c1b      	ldr	r4, [pc, #108]	; (7298 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    722c:	4461      	add	r1, ip
    722e:	9201      	str	r2, [sp, #4]
    7230:	f7fe fe48 	bl	5ec4 <memcpy>
			rx_available -= len;
    7234:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    7236:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    723a:	4658      	mov	r0, fp
			rx_index[i] += len;
    723c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    723e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    7242:	442a      	add	r2, r5
			rx_available -= len;
    7244:	4439      	add	r1, r7
			rx_index[i] += len;
    7246:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    724a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    724c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7250:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7254:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    7258:	b003      	add	sp, #12
    725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    725e:	462a      	mov	r2, r5
			count += avail;
    7260:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    7262:	f7fe fe2f 	bl	5ec4 <memcpy>
			rx_available -= avail;
    7266:	490c      	ldr	r1, [pc, #48]	; (7298 <usb_serial_read+0xd4>)
			rx_tail = tail;
    7268:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    726a:	4630      	mov	r0, r6
			rx_available -= avail;
    726c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    726e:	44a8      	add	r8, r5
			rx_available -= avail;
    7270:	1b52      	subs	r2, r2, r5
    7272:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    7274:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    7278:	f7ff fd74 	bl	6d64 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    727c:	45bb      	cmp	fp, r7
    727e:	d8b6      	bhi.n	71ee <usb_serial_read+0x2a>
	return count;
    7280:	4638      	mov	r0, r7
    7282:	e7e3      	b.n	724c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    7284:	4608      	mov	r0, r1
    7286:	e7e1      	b.n	724c <usb_serial_read+0x88>
    7288:	200027a2 	.word	0x200027a2
    728c:	20200080 	.word	0x20200080
    7290:	20002758 	.word	0x20002758
    7294:	20002738 	.word	0x20002738
    7298:	20002734 	.word	0x20002734
    729c:	200027a3 	.word	0x200027a3
    72a0:	20002748 	.word	0x20002748

000072a4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    72a4:	4b0b      	ldr	r3, [pc, #44]	; (72d4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    72a6:	4a0c      	ldr	r2, [pc, #48]	; (72d8 <usb_serial_peekchar+0x34>)
    72a8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    72aa:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    72ac:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    72ae:	428a      	cmp	r2, r1
    72b0:	d00d      	beq.n	72ce <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    72b2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    72b4:	4809      	ldr	r0, [pc, #36]	; (72dc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    72b6:	4a0a      	ldr	r2, [pc, #40]	; (72e0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    72b8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    72ba:	490a      	ldr	r1, [pc, #40]	; (72e4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    72bc:	bf28      	it	cs
    72be:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    72c0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    72c2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    72c6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    72ca:	5c58      	ldrb	r0, [r3, r1]
    72cc:	4770      	bx	lr
	if (tail == rx_head) return -1;
    72ce:	f04f 30ff 	mov.w	r0, #4294967295
}
    72d2:	4770      	bx	lr
    72d4:	200027a2 	.word	0x200027a2
    72d8:	200027a3 	.word	0x200027a3
    72dc:	20002758 	.word	0x20002758
    72e0:	20200080 	.word	0x20200080
    72e4:	20002748 	.word	0x20002748

000072e8 <usb_serial_available>:
	uint32_t n = rx_available;
    72e8:	4b04      	ldr	r3, [pc, #16]	; (72fc <usb_serial_available+0x14>)
{
    72ea:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    72ec:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    72ee:	b10c      	cbz	r4, 72f4 <usb_serial_available+0xc>
}
    72f0:	4620      	mov	r0, r4
    72f2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    72f4:	f000 f8e0 	bl	74b8 <yield>
}
    72f8:	4620      	mov	r0, r4
    72fa:	bd10      	pop	{r4, pc}
    72fc:	20002734 	.word	0x20002734

00007300 <usb_serial_flush_input>:
{
    7300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    7304:	4e14      	ldr	r6, [pc, #80]	; (7358 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    7306:	4d15      	ldr	r5, [pc, #84]	; (735c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    7308:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    730a:	782a      	ldrb	r2, [r5, #0]
    730c:	4293      	cmp	r3, r2
    730e:	d021      	beq.n	7354 <usb_serial_flush_input+0x54>
    7310:	b2dc      	uxtb	r4, r3
    7312:	f8df 9050 	ldr.w	r9, [pc, #80]	; 7364 <usb_serial_flush_input+0x64>
    7316:	f8df b050 	ldr.w	fp, [pc, #80]	; 7368 <usb_serial_flush_input+0x68>
    731a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 736c <usb_serial_flush_input+0x6c>
    731e:	4f10      	ldr	r7, [pc, #64]	; (7360 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    7320:	3401      	adds	r4, #1
    7322:	2c08      	cmp	r4, #8
		rx_tail = tail;
    7324:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    7328:	d901      	bls.n	732e <usb_serial_flush_input+0x2e>
    732a:	2400      	movs	r4, #0
    732c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    732e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    7332:	f8db 3000 	ldr.w	r3, [fp]
    7336:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    733a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    733e:	1a52      	subs	r2, r2, r1
    7340:	1a9b      	subs	r3, r3, r2
    7342:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    7346:	f7ff fd0d 	bl	6d64 <rx_queue_transfer>
		rx_tail = tail;
    734a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    734e:	782b      	ldrb	r3, [r5, #0]
    7350:	42a3      	cmp	r3, r4
    7352:	d1e5      	bne.n	7320 <usb_serial_flush_input+0x20>
}
    7354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7358:	200027a3 	.word	0x200027a3
    735c:	200027a2 	.word	0x200027a2
    7360:	20002748 	.word	0x20002748
    7364:	20002758 	.word	0x20002758
    7368:	20002734 	.word	0x20002734
    736c:	20002738 	.word	0x20002738

00007370 <usb_serial_getchar>:
{
    7370:	b500      	push	{lr}
    7372:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    7374:	2101      	movs	r1, #1
    7376:	f10d 0007 	add.w	r0, sp, #7
    737a:	f7ff ff23 	bl	71c4 <usb_serial_read>
    737e:	b120      	cbz	r0, 738a <usb_serial_getchar+0x1a>
    7380:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    7384:	b003      	add	sp, #12
    7386:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    738a:	f04f 30ff 	mov.w	r0, #4294967295
    738e:	e7f9      	b.n	7384 <usb_serial_getchar+0x14>

00007390 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    7390:	4b09      	ldr	r3, [pc, #36]	; (73b8 <usb_serial_putchar+0x28>)
{
    7392:	b500      	push	{lr}
    7394:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    7396:	781b      	ldrb	r3, [r3, #0]
{
    7398:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    739c:	b13b      	cbz	r3, 73ae <usb_serial_putchar+0x1e>
    739e:	2101      	movs	r1, #1
    73a0:	f10d 0007 	add.w	r0, sp, #7
    73a4:	f7ff fdb0 	bl	6f08 <usb_serial_write.part.0>
}
    73a8:	b003      	add	sp, #12
    73aa:	f85d fb04 	ldr.w	pc, [sp], #4
    73ae:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    73b2:	b003      	add	sp, #12
    73b4:	f85d fb04 	ldr.w	pc, [sp], #4
    73b8:	200027aa 	.word	0x200027aa

000073bc <usb_serial_write>:
	if (!usb_configuration) return 0;
    73bc:	4b04      	ldr	r3, [pc, #16]	; (73d0 <usb_serial_write+0x14>)
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    73c4:	b10b      	cbz	r3, 73ca <usb_serial_write+0xe>
    73c6:	f7ff bd9f 	b.w	6f08 <usb_serial_write.part.0>
}
    73ca:	4610      	mov	r0, r2
    73cc:	4770      	bx	lr
    73ce:	bf00      	nop
    73d0:	200027aa 	.word	0x200027aa

000073d4 <usb_serial_write_buffer_free>:
{
    73d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    73d8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    73da:	f8df 8044 	ldr.w	r8, [pc, #68]	; 7420 <usb_serial_write_buffer_free+0x4c>
    73de:	2301      	movs	r3, #1
    73e0:	4d0d      	ldr	r5, [pc, #52]	; (7418 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    73e2:	4627      	mov	r7, r4
    73e4:	4e0d      	ldr	r6, [pc, #52]	; (741c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    73e6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    73ea:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    73ec:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    73ee:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    73f0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    73f2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    73f6:	d005      	beq.n	7404 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    73f8:	f7ff fc76 	bl	6ce8 <usb_transfer_status>
    73fc:	0603      	lsls	r3, r0, #24
    73fe:	bf58      	it	pl
    7400:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    7404:	2c04      	cmp	r4, #4
    7406:	d1f0      	bne.n	73ea <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    7408:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    740c:	2300      	movs	r3, #0
}
    740e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    7410:	f888 3000 	strb.w	r3, [r8]
}
    7414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7418:	20002060 	.word	0x20002060
    741c:	200027a7 	.word	0x200027a7
    7420:	200027a8 	.word	0x200027a8

00007424 <usb_serial_flush_output>:
{
    7424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    7428:	4b1d      	ldr	r3, [pc, #116]	; (74a0 <usb_serial_flush_output+0x7c>)
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	b113      	cbz	r3, 7434 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    742e:	4d1d      	ldr	r5, [pc, #116]	; (74a4 <usb_serial_flush_output+0x80>)
    7430:	882a      	ldrh	r2, [r5, #0]
    7432:	b90a      	cbnz	r2, 7438 <usb_serial_flush_output+0x14>
}
    7434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    7438:	4e1b      	ldr	r6, [pc, #108]	; (74a8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    743a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    743e:	491b      	ldr	r1, [pc, #108]	; (74ac <usb_serial_flush_output+0x88>)
    7440:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7442:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7444:	4c1a      	ldr	r4, [pc, #104]	; (74b0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    7446:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    744a:	4f1a      	ldr	r7, [pc, #104]	; (74b4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    744c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    7450:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7452:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    7454:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7456:	4621      	mov	r1, r4
    7458:	2300      	movs	r3, #0
    745a:	f7ff fc0b 	bl	6c74 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    745e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    7462:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7466:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    746a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    746e:	3420      	adds	r4, #32
	} while (location < end_addr);
    7470:	42a2      	cmp	r2, r4
    7472:	d8fa      	bhi.n	746a <usb_serial_flush_output+0x46>
	asm("dsb");
    7474:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7478:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    747c:	2004      	movs	r0, #4
    747e:	4641      	mov	r1, r8
    7480:	f7ff fc10 	bl	6ca4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7484:	7833      	ldrb	r3, [r6, #0]
    7486:	3301      	adds	r3, #1
    7488:	b2db      	uxtb	r3, r3
    748a:	2b03      	cmp	r3, #3
    748c:	bf88      	it	hi
    748e:	2300      	movhi	r3, #0
    7490:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    7492:	2300      	movs	r3, #0
    7494:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    7496:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    749a:	703b      	strb	r3, [r7, #0]
}
    749c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74a0:	200027aa 	.word	0x200027aa
    74a4:	2000279a 	.word	0x2000279a
    74a8:	200027a7 	.word	0x200027a7
    74ac:	20002060 	.word	0x20002060
    74b0:	20201080 	.word	0x20201080
    74b4:	200027a8 	.word	0x200027a8

000074b8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    74b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    74bc:	4b2d      	ldr	r3, [pc, #180]	; (7574 <yield+0xbc>)
    74be:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    74c0:	b166      	cbz	r6, 74dc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    74c2:	4f2d      	ldr	r7, [pc, #180]	; (7578 <yield+0xc0>)
    74c4:	783b      	ldrb	r3, [r7, #0]
    74c6:	b94b      	cbnz	r3, 74dc <yield+0x24>
	running = 1;
    74c8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    74ca:	07f1      	lsls	r1, r6, #31
	running = 1;
    74cc:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    74ce:	d443      	bmi.n	7558 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    74d0:	07b2      	lsls	r2, r6, #30
    74d2:	d426      	bmi.n	7522 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    74d4:	2300      	movs	r3, #0
    74d6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    74d8:	0773      	lsls	r3, r6, #29
    74da:	d401      	bmi.n	74e0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    74dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    74e0:	4b26      	ldr	r3, [pc, #152]	; (757c <yield+0xc4>)
    74e2:	681a      	ldr	r2, [r3, #0]
    74e4:	2a00      	cmp	r2, #0
    74e6:	d0f9      	beq.n	74dc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    74e8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    74ec:	2a00      	cmp	r2, #0
    74ee:	d1f5      	bne.n	74dc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    74f0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    74f4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    74f6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    74f8:	2800      	cmp	r0, #0
    74fa:	d034      	beq.n	7566 <yield+0xae>
		if (runningFromYield) {
    74fc:	4c20      	ldr	r4, [pc, #128]	; (7580 <yield+0xc8>)
    74fe:	7821      	ldrb	r1, [r4, #0]
    7500:	2900      	cmp	r1, #0
    7502:	d130      	bne.n	7566 <yield+0xae>
		runningFromYield = true;
    7504:	2201      	movs	r2, #1
    7506:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    7508:	6942      	ldr	r2, [r0, #20]
    750a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    750c:	2a00      	cmp	r2, #0
    750e:	d02e      	beq.n	756e <yield+0xb6>
			firstYield->_prev = nullptr;
    7510:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    7512:	b905      	cbnz	r5, 7516 <yield+0x5e>
    7514:	b662      	cpsie	i
		first->_triggered = false;
    7516:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    7518:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    751a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    751c:	4798      	blx	r3
		runningFromYield = false;
    751e:	7025      	strb	r5, [r4, #0]
    7520:	e7dc      	b.n	74dc <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    7522:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7588 <yield+0xd0>
    7526:	f898 3000 	ldrb.w	r3, [r8]
    752a:	2b00      	cmp	r3, #0
    752c:	d0d2      	beq.n	74d4 <yield+0x1c>
    752e:	2500      	movs	r5, #0
    7530:	f8df 9058 	ldr.w	r9, [pc, #88]	; 758c <yield+0xd4>
    7534:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    7536:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    753a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    753c:	6823      	ldr	r3, [r4, #0]
    753e:	4620      	mov	r0, r4
    7540:	691b      	ldr	r3, [r3, #16]
    7542:	4798      	blx	r3
    7544:	b110      	cbz	r0, 754c <yield+0x94>
    7546:	6963      	ldr	r3, [r4, #20]
    7548:	689b      	ldr	r3, [r3, #8]
    754a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    754c:	f898 2000 	ldrb.w	r2, [r8]
    7550:	b2eb      	uxtb	r3, r5
    7552:	429a      	cmp	r2, r3
    7554:	d8ef      	bhi.n	7536 <yield+0x7e>
    7556:	e7bd      	b.n	74d4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    7558:	f7ff fec6 	bl	72e8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    755c:	2800      	cmp	r0, #0
    755e:	d0b7      	beq.n	74d0 <yield+0x18>
    7560:	f3af 8000 	nop.w
    7564:	e7b4      	b.n	74d0 <yield+0x18>
		if (doit) __enable_irq();
    7566:	2d00      	cmp	r5, #0
    7568:	d1b8      	bne.n	74dc <yield+0x24>
    756a:	b662      	cpsie	i
    756c:	e7b6      	b.n	74dc <yield+0x24>
			lastYield = nullptr;
    756e:	4b05      	ldr	r3, [pc, #20]	; (7584 <yield+0xcc>)
    7570:	601a      	str	r2, [r3, #0]
    7572:	e7ce      	b.n	7512 <yield+0x5a>
    7574:	200027ad 	.word	0x200027ad
    7578:	200027a0 	.word	0x200027a0
    757c:	200021d0 	.word	0x200021d0
    7580:	2000279e 	.word	0x2000279e
    7584:	200021dc 	.word	0x200021dc
    7588:	2000279f 	.word	0x2000279f
    758c:	200021e0 	.word	0x200021e0

00007590 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    7590:	4a07      	ldr	r2, [pc, #28]	; (75b0 <rtc_get+0x20>)
    7592:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    7594:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    7596:	4619      	mov	r1, r3
    7598:	4684      	mov	ip, r0
    759a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    759c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    759e:	4299      	cmp	r1, r3
    75a0:	d1f9      	bne.n	7596 <rtc_get+0x6>
    75a2:	4584      	cmp	ip, r0
    75a4:	d1f7      	bne.n	7596 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    75a6:	0bdb      	lsrs	r3, r3, #15
}
    75a8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    75ac:	4770      	bx	lr
    75ae:	bf00      	nop
    75b0:	400d4000 	.word	0x400d4000

000075b4 <__aeabi_atexit>:
    75b4:	4603      	mov	r3, r0
    75b6:	4608      	mov	r0, r1
    75b8:	4619      	mov	r1, r3
    75ba:	f000 bacd 	b.w	7b58 <__cxa_atexit>
    75be:	bf00      	nop

000075c0 <malloc>:
    75c0:	4b02      	ldr	r3, [pc, #8]	; (75cc <malloc+0xc>)
    75c2:	4601      	mov	r1, r0
    75c4:	6818      	ldr	r0, [r3, #0]
    75c6:	f000 b80b 	b.w	75e0 <_malloc_r>
    75ca:	bf00      	nop
    75cc:	20001718 	.word	0x20001718

000075d0 <free>:
    75d0:	4b02      	ldr	r3, [pc, #8]	; (75dc <free+0xc>)
    75d2:	4601      	mov	r1, r0
    75d4:	6818      	ldr	r0, [r3, #0]
    75d6:	f000 bbeb 	b.w	7db0 <_free_r>
    75da:	bf00      	nop
    75dc:	20001718 	.word	0x20001718

000075e0 <_malloc_r>:
    75e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75e4:	f101 060b 	add.w	r6, r1, #11
    75e8:	2e16      	cmp	r6, #22
    75ea:	b083      	sub	sp, #12
    75ec:	4604      	mov	r4, r0
    75ee:	d824      	bhi.n	763a <_malloc_r+0x5a>
    75f0:	2910      	cmp	r1, #16
    75f2:	f200 80ba 	bhi.w	776a <_malloc_r+0x18a>
    75f6:	f000 faa3 	bl	7b40 <__malloc_lock>
    75fa:	2610      	movs	r6, #16
    75fc:	2218      	movs	r2, #24
    75fe:	2002      	movs	r0, #2
    7600:	4fb5      	ldr	r7, [pc, #724]	; (78d8 <_malloc_r+0x2f8>)
    7602:	443a      	add	r2, r7
    7604:	f1a2 0108 	sub.w	r1, r2, #8
    7608:	6853      	ldr	r3, [r2, #4]
    760a:	428b      	cmp	r3, r1
    760c:	f000 80ba 	beq.w	7784 <_malloc_r+0x1a4>
    7610:	685a      	ldr	r2, [r3, #4]
    7612:	68d9      	ldr	r1, [r3, #12]
    7614:	f022 0203 	bic.w	r2, r2, #3
    7618:	441a      	add	r2, r3
    761a:	689d      	ldr	r5, [r3, #8]
    761c:	60e9      	str	r1, [r5, #12]
    761e:	608d      	str	r5, [r1, #8]
    7620:	6851      	ldr	r1, [r2, #4]
    7622:	f041 0101 	orr.w	r1, r1, #1
    7626:	4620      	mov	r0, r4
    7628:	6051      	str	r1, [r2, #4]
    762a:	f103 0508 	add.w	r5, r3, #8
    762e:	f000 fa8d 	bl	7b4c <__malloc_unlock>
    7632:	4628      	mov	r0, r5
    7634:	b003      	add	sp, #12
    7636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    763a:	f036 0607 	bics.w	r6, r6, #7
    763e:	f100 8094 	bmi.w	776a <_malloc_r+0x18a>
    7642:	42b1      	cmp	r1, r6
    7644:	f200 8091 	bhi.w	776a <_malloc_r+0x18a>
    7648:	f000 fa7a 	bl	7b40 <__malloc_lock>
    764c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    7650:	f0c0 819a 	bcc.w	7988 <_malloc_r+0x3a8>
    7654:	0a73      	lsrs	r3, r6, #9
    7656:	f000 808f 	beq.w	7778 <_malloc_r+0x198>
    765a:	2b04      	cmp	r3, #4
    765c:	f200 816f 	bhi.w	793e <_malloc_r+0x35e>
    7660:	09b3      	lsrs	r3, r6, #6
    7662:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7666:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    766a:	00c3      	lsls	r3, r0, #3
    766c:	4f9a      	ldr	r7, [pc, #616]	; (78d8 <_malloc_r+0x2f8>)
    766e:	443b      	add	r3, r7
    7670:	f1a3 0508 	sub.w	r5, r3, #8
    7674:	685b      	ldr	r3, [r3, #4]
    7676:	429d      	cmp	r5, r3
    7678:	d106      	bne.n	7688 <_malloc_r+0xa8>
    767a:	e00c      	b.n	7696 <_malloc_r+0xb6>
    767c:	2900      	cmp	r1, #0
    767e:	f280 8127 	bge.w	78d0 <_malloc_r+0x2f0>
    7682:	68db      	ldr	r3, [r3, #12]
    7684:	429d      	cmp	r5, r3
    7686:	d006      	beq.n	7696 <_malloc_r+0xb6>
    7688:	685a      	ldr	r2, [r3, #4]
    768a:	f022 0203 	bic.w	r2, r2, #3
    768e:	1b91      	subs	r1, r2, r6
    7690:	290f      	cmp	r1, #15
    7692:	ddf3      	ble.n	767c <_malloc_r+0x9c>
    7694:	4660      	mov	r0, ip
    7696:	693d      	ldr	r5, [r7, #16]
    7698:	f8df c250 	ldr.w	ip, [pc, #592]	; 78ec <_malloc_r+0x30c>
    769c:	4565      	cmp	r5, ip
    769e:	d07c      	beq.n	779a <_malloc_r+0x1ba>
    76a0:	686a      	ldr	r2, [r5, #4]
    76a2:	f022 0203 	bic.w	r2, r2, #3
    76a6:	1b93      	subs	r3, r2, r6
    76a8:	2b0f      	cmp	r3, #15
    76aa:	f300 817b 	bgt.w	79a4 <_malloc_r+0x3c4>
    76ae:	2b00      	cmp	r3, #0
    76b0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    76b4:	f280 816c 	bge.w	7990 <_malloc_r+0x3b0>
    76b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    76bc:	f080 811a 	bcs.w	78f4 <_malloc_r+0x314>
    76c0:	08d3      	lsrs	r3, r2, #3
    76c2:	6879      	ldr	r1, [r7, #4]
    76c4:	3301      	adds	r3, #1
    76c6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    76ca:	2201      	movs	r2, #1
    76cc:	fa02 f20e 	lsl.w	r2, r2, lr
    76d0:	430a      	orrs	r2, r1
    76d2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    76d6:	f8c5 e008 	str.w	lr, [r5, #8]
    76da:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    76de:	3908      	subs	r1, #8
    76e0:	60e9      	str	r1, [r5, #12]
    76e2:	607a      	str	r2, [r7, #4]
    76e4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    76e8:	f8ce 500c 	str.w	r5, [lr, #12]
    76ec:	1083      	asrs	r3, r0, #2
    76ee:	2101      	movs	r1, #1
    76f0:	4099      	lsls	r1, r3
    76f2:	4291      	cmp	r1, r2
    76f4:	d857      	bhi.n	77a6 <_malloc_r+0x1c6>
    76f6:	4211      	tst	r1, r2
    76f8:	d106      	bne.n	7708 <_malloc_r+0x128>
    76fa:	f020 0003 	bic.w	r0, r0, #3
    76fe:	0049      	lsls	r1, r1, #1
    7700:	4211      	tst	r1, r2
    7702:	f100 0004 	add.w	r0, r0, #4
    7706:	d0fa      	beq.n	76fe <_malloc_r+0x11e>
    7708:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    770c:	464d      	mov	r5, r9
    770e:	4686      	mov	lr, r0
    7710:	f8d5 800c 	ldr.w	r8, [r5, #12]
    7714:	4545      	cmp	r5, r8
    7716:	d108      	bne.n	772a <_malloc_r+0x14a>
    7718:	e11d      	b.n	7956 <_malloc_r+0x376>
    771a:	2b00      	cmp	r3, #0
    771c:	f280 8124 	bge.w	7968 <_malloc_r+0x388>
    7720:	f8d8 800c 	ldr.w	r8, [r8, #12]
    7724:	4545      	cmp	r5, r8
    7726:	f000 8116 	beq.w	7956 <_malloc_r+0x376>
    772a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    772e:	f022 0203 	bic.w	r2, r2, #3
    7732:	1b93      	subs	r3, r2, r6
    7734:	2b0f      	cmp	r3, #15
    7736:	ddf0      	ble.n	771a <_malloc_r+0x13a>
    7738:	4620      	mov	r0, r4
    773a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    773e:	eb08 0106 	add.w	r1, r8, r6
    7742:	f046 0601 	orr.w	r6, r6, #1
    7746:	f8c8 6004 	str.w	r6, [r8, #4]
    774a:	60ec      	str	r4, [r5, #12]
    774c:	60a5      	str	r5, [r4, #8]
    774e:	f043 0401 	orr.w	r4, r3, #1
    7752:	e9c7 1104 	strd	r1, r1, [r7, #16]
    7756:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    775a:	604c      	str	r4, [r1, #4]
    775c:	f848 3002 	str.w	r3, [r8, r2]
    7760:	f000 f9f4 	bl	7b4c <__malloc_unlock>
    7764:	f108 0508 	add.w	r5, r8, #8
    7768:	e002      	b.n	7770 <_malloc_r+0x190>
    776a:	230c      	movs	r3, #12
    776c:	6023      	str	r3, [r4, #0]
    776e:	2500      	movs	r5, #0
    7770:	4628      	mov	r0, r5
    7772:	b003      	add	sp, #12
    7774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7778:	f44f 7300 	mov.w	r3, #512	; 0x200
    777c:	2040      	movs	r0, #64	; 0x40
    777e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    7782:	e773      	b.n	766c <_malloc_r+0x8c>
    7784:	68d3      	ldr	r3, [r2, #12]
    7786:	429a      	cmp	r2, r3
    7788:	bf08      	it	eq
    778a:	3002      	addeq	r0, #2
    778c:	f47f af40 	bne.w	7610 <_malloc_r+0x30>
    7790:	693d      	ldr	r5, [r7, #16]
    7792:	f8df c158 	ldr.w	ip, [pc, #344]	; 78ec <_malloc_r+0x30c>
    7796:	4565      	cmp	r5, ip
    7798:	d182      	bne.n	76a0 <_malloc_r+0xc0>
    779a:	687a      	ldr	r2, [r7, #4]
    779c:	1083      	asrs	r3, r0, #2
    779e:	2101      	movs	r1, #1
    77a0:	4099      	lsls	r1, r3
    77a2:	4291      	cmp	r1, r2
    77a4:	d9a7      	bls.n	76f6 <_malloc_r+0x116>
    77a6:	68bd      	ldr	r5, [r7, #8]
    77a8:	686b      	ldr	r3, [r5, #4]
    77aa:	f023 0903 	bic.w	r9, r3, #3
    77ae:	454e      	cmp	r6, r9
    77b0:	d803      	bhi.n	77ba <_malloc_r+0x1da>
    77b2:	eba9 0306 	sub.w	r3, r9, r6
    77b6:	2b0f      	cmp	r3, #15
    77b8:	dc7a      	bgt.n	78b0 <_malloc_r+0x2d0>
    77ba:	f8df b134 	ldr.w	fp, [pc, #308]	; 78f0 <_malloc_r+0x310>
    77be:	4b47      	ldr	r3, [pc, #284]	; (78dc <_malloc_r+0x2fc>)
    77c0:	f8db 2000 	ldr.w	r2, [fp]
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	3201      	adds	r2, #1
    77c8:	4433      	add	r3, r6
    77ca:	eb05 0a09 	add.w	sl, r5, r9
    77ce:	f000 8133 	beq.w	7a38 <_malloc_r+0x458>
    77d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    77d6:	330f      	adds	r3, #15
    77d8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    77dc:	f028 080f 	bic.w	r8, r8, #15
    77e0:	4641      	mov	r1, r8
    77e2:	4620      	mov	r0, r4
    77e4:	f000 fa10 	bl	7c08 <_sbrk_r>
    77e8:	1c41      	adds	r1, r0, #1
    77ea:	4602      	mov	r2, r0
    77ec:	f000 80f3 	beq.w	79d6 <_malloc_r+0x3f6>
    77f0:	4582      	cmp	sl, r0
    77f2:	f200 80ee 	bhi.w	79d2 <_malloc_r+0x3f2>
    77f6:	4b3a      	ldr	r3, [pc, #232]	; (78e0 <_malloc_r+0x300>)
    77f8:	6819      	ldr	r1, [r3, #0]
    77fa:	4441      	add	r1, r8
    77fc:	6019      	str	r1, [r3, #0]
    77fe:	4608      	mov	r0, r1
    7800:	f000 814e 	beq.w	7aa0 <_malloc_r+0x4c0>
    7804:	f8db 1000 	ldr.w	r1, [fp]
    7808:	9301      	str	r3, [sp, #4]
    780a:	3101      	adds	r1, #1
    780c:	bf1b      	ittet	ne
    780e:	eba2 010a 	subne.w	r1, r2, sl
    7812:	1809      	addne	r1, r1, r0
    7814:	f8cb 2000 	streq.w	r2, [fp]
    7818:	6019      	strne	r1, [r3, #0]
    781a:	f012 0b07 	ands.w	fp, r2, #7
    781e:	f000 8117 	beq.w	7a50 <_malloc_r+0x470>
    7822:	f1cb 0108 	rsb	r1, fp, #8
    7826:	440a      	add	r2, r1
    7828:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    782c:	4490      	add	r8, r2
    782e:	3108      	adds	r1, #8
    7830:	eba1 0108 	sub.w	r1, r1, r8
    7834:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    7838:	4651      	mov	r1, sl
    783a:	4620      	mov	r0, r4
    783c:	9200      	str	r2, [sp, #0]
    783e:	f000 f9e3 	bl	7c08 <_sbrk_r>
    7842:	1c42      	adds	r2, r0, #1
    7844:	e9dd 2300 	ldrd	r2, r3, [sp]
    7848:	f000 814f 	beq.w	7aea <_malloc_r+0x50a>
    784c:	1a80      	subs	r0, r0, r2
    784e:	eb00 080a 	add.w	r8, r0, sl
    7852:	6819      	ldr	r1, [r3, #0]
    7854:	60ba      	str	r2, [r7, #8]
    7856:	f048 0001 	orr.w	r0, r8, #1
    785a:	4451      	add	r1, sl
    785c:	42bd      	cmp	r5, r7
    785e:	6050      	str	r0, [r2, #4]
    7860:	6019      	str	r1, [r3, #0]
    7862:	f000 8129 	beq.w	7ab8 <_malloc_r+0x4d8>
    7866:	f1b9 0f0f 	cmp.w	r9, #15
    786a:	f240 8127 	bls.w	7abc <_malloc_r+0x4dc>
    786e:	6868      	ldr	r0, [r5, #4]
    7870:	f1a9 0c0c 	sub.w	ip, r9, #12
    7874:	f02c 0c07 	bic.w	ip, ip, #7
    7878:	f000 0001 	and.w	r0, r0, #1
    787c:	ea40 000c 	orr.w	r0, r0, ip
    7880:	6068      	str	r0, [r5, #4]
    7882:	f04f 0e05 	mov.w	lr, #5
    7886:	eb05 000c 	add.w	r0, r5, ip
    788a:	f1bc 0f0f 	cmp.w	ip, #15
    788e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    7892:	f200 8132 	bhi.w	7afa <_malloc_r+0x51a>
    7896:	6850      	ldr	r0, [r2, #4]
    7898:	4615      	mov	r5, r2
    789a:	4b12      	ldr	r3, [pc, #72]	; (78e4 <_malloc_r+0x304>)
    789c:	681a      	ldr	r2, [r3, #0]
    789e:	428a      	cmp	r2, r1
    78a0:	bf38      	it	cc
    78a2:	6019      	strcc	r1, [r3, #0]
    78a4:	4b10      	ldr	r3, [pc, #64]	; (78e8 <_malloc_r+0x308>)
    78a6:	681a      	ldr	r2, [r3, #0]
    78a8:	428a      	cmp	r2, r1
    78aa:	bf38      	it	cc
    78ac:	6019      	strcc	r1, [r3, #0]
    78ae:	e094      	b.n	79da <_malloc_r+0x3fa>
    78b0:	19aa      	adds	r2, r5, r6
    78b2:	f043 0301 	orr.w	r3, r3, #1
    78b6:	f046 0601 	orr.w	r6, r6, #1
    78ba:	606e      	str	r6, [r5, #4]
    78bc:	4620      	mov	r0, r4
    78be:	60ba      	str	r2, [r7, #8]
    78c0:	6053      	str	r3, [r2, #4]
    78c2:	f000 f943 	bl	7b4c <__malloc_unlock>
    78c6:	3508      	adds	r5, #8
    78c8:	4628      	mov	r0, r5
    78ca:	b003      	add	sp, #12
    78cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78d0:	68d9      	ldr	r1, [r3, #12]
    78d2:	441a      	add	r2, r3
    78d4:	e6a1      	b.n	761a <_malloc_r+0x3a>
    78d6:	bf00      	nop
    78d8:	20001308 	.word	0x20001308
    78dc:	2000246c 	.word	0x2000246c
    78e0:	2000243c 	.word	0x2000243c
    78e4:	20002464 	.word	0x20002464
    78e8:	20002468 	.word	0x20002468
    78ec:	20001310 	.word	0x20001310
    78f0:	20001710 	.word	0x20001710
    78f4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    78f8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    78fc:	d363      	bcc.n	79c6 <_malloc_r+0x3e6>
    78fe:	2b14      	cmp	r3, #20
    7900:	f200 80b7 	bhi.w	7a72 <_malloc_r+0x492>
    7904:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    7908:	00c9      	lsls	r1, r1, #3
    790a:	335b      	adds	r3, #91	; 0x5b
    790c:	eb07 0e01 	add.w	lr, r7, r1
    7910:	5879      	ldr	r1, [r7, r1]
    7912:	f1ae 0e08 	sub.w	lr, lr, #8
    7916:	458e      	cmp	lr, r1
    7918:	f000 8091 	beq.w	7a3e <_malloc_r+0x45e>
    791c:	684b      	ldr	r3, [r1, #4]
    791e:	f023 0303 	bic.w	r3, r3, #3
    7922:	4293      	cmp	r3, r2
    7924:	d902      	bls.n	792c <_malloc_r+0x34c>
    7926:	6889      	ldr	r1, [r1, #8]
    7928:	458e      	cmp	lr, r1
    792a:	d1f7      	bne.n	791c <_malloc_r+0x33c>
    792c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    7930:	687a      	ldr	r2, [r7, #4]
    7932:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    7936:	f8ce 5008 	str.w	r5, [lr, #8]
    793a:	60cd      	str	r5, [r1, #12]
    793c:	e6d6      	b.n	76ec <_malloc_r+0x10c>
    793e:	2b14      	cmp	r3, #20
    7940:	d959      	bls.n	79f6 <_malloc_r+0x416>
    7942:	2b54      	cmp	r3, #84	; 0x54
    7944:	f200 809d 	bhi.w	7a82 <_malloc_r+0x4a2>
    7948:	0b33      	lsrs	r3, r6, #12
    794a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    794e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    7952:	00c3      	lsls	r3, r0, #3
    7954:	e68a      	b.n	766c <_malloc_r+0x8c>
    7956:	f10e 0e01 	add.w	lr, lr, #1
    795a:	f01e 0f03 	tst.w	lr, #3
    795e:	f105 0508 	add.w	r5, r5, #8
    7962:	f47f aed5 	bne.w	7710 <_malloc_r+0x130>
    7966:	e051      	b.n	7a0c <_malloc_r+0x42c>
    7968:	4442      	add	r2, r8
    796a:	4645      	mov	r5, r8
    796c:	6853      	ldr	r3, [r2, #4]
    796e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    7972:	f043 0301 	orr.w	r3, r3, #1
    7976:	6053      	str	r3, [r2, #4]
    7978:	f855 3f08 	ldr.w	r3, [r5, #8]!
    797c:	4620      	mov	r0, r4
    797e:	60d9      	str	r1, [r3, #12]
    7980:	608b      	str	r3, [r1, #8]
    7982:	f000 f8e3 	bl	7b4c <__malloc_unlock>
    7986:	e6f3      	b.n	7770 <_malloc_r+0x190>
    7988:	08f0      	lsrs	r0, r6, #3
    798a:	f106 0208 	add.w	r2, r6, #8
    798e:	e637      	b.n	7600 <_malloc_r+0x20>
    7990:	442a      	add	r2, r5
    7992:	4620      	mov	r0, r4
    7994:	6853      	ldr	r3, [r2, #4]
    7996:	f043 0301 	orr.w	r3, r3, #1
    799a:	6053      	str	r3, [r2, #4]
    799c:	3508      	adds	r5, #8
    799e:	f000 f8d5 	bl	7b4c <__malloc_unlock>
    79a2:	e6e5      	b.n	7770 <_malloc_r+0x190>
    79a4:	19a9      	adds	r1, r5, r6
    79a6:	4620      	mov	r0, r4
    79a8:	f046 0601 	orr.w	r6, r6, #1
    79ac:	f043 0401 	orr.w	r4, r3, #1
    79b0:	606e      	str	r6, [r5, #4]
    79b2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    79b6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    79ba:	604c      	str	r4, [r1, #4]
    79bc:	50ab      	str	r3, [r5, r2]
    79be:	f000 f8c5 	bl	7b4c <__malloc_unlock>
    79c2:	3508      	adds	r5, #8
    79c4:	e6d4      	b.n	7770 <_malloc_r+0x190>
    79c6:	0993      	lsrs	r3, r2, #6
    79c8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    79cc:	00c9      	lsls	r1, r1, #3
    79ce:	3338      	adds	r3, #56	; 0x38
    79d0:	e79c      	b.n	790c <_malloc_r+0x32c>
    79d2:	42bd      	cmp	r5, r7
    79d4:	d05f      	beq.n	7a96 <_malloc_r+0x4b6>
    79d6:	68bd      	ldr	r5, [r7, #8]
    79d8:	6868      	ldr	r0, [r5, #4]
    79da:	f020 0803 	bic.w	r8, r0, #3
    79de:	4546      	cmp	r6, r8
    79e0:	eba8 0306 	sub.w	r3, r8, r6
    79e4:	d802      	bhi.n	79ec <_malloc_r+0x40c>
    79e6:	2b0f      	cmp	r3, #15
    79e8:	f73f af62 	bgt.w	78b0 <_malloc_r+0x2d0>
    79ec:	4620      	mov	r0, r4
    79ee:	f000 f8ad 	bl	7b4c <__malloc_unlock>
    79f2:	2500      	movs	r5, #0
    79f4:	e6bc      	b.n	7770 <_malloc_r+0x190>
    79f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    79fa:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    79fe:	00c3      	lsls	r3, r0, #3
    7a00:	e634      	b.n	766c <_malloc_r+0x8c>
    7a02:	f859 3908 	ldr.w	r3, [r9], #-8
    7a06:	454b      	cmp	r3, r9
    7a08:	f040 8096 	bne.w	7b38 <_malloc_r+0x558>
    7a0c:	f010 0f03 	tst.w	r0, #3
    7a10:	f100 30ff 	add.w	r0, r0, #4294967295
    7a14:	d1f5      	bne.n	7a02 <_malloc_r+0x422>
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	ea23 0301 	bic.w	r3, r3, r1
    7a1c:	607b      	str	r3, [r7, #4]
    7a1e:	0049      	lsls	r1, r1, #1
    7a20:	4299      	cmp	r1, r3
    7a22:	f63f aec0 	bhi.w	77a6 <_malloc_r+0x1c6>
    7a26:	b919      	cbnz	r1, 7a30 <_malloc_r+0x450>
    7a28:	e6bd      	b.n	77a6 <_malloc_r+0x1c6>
    7a2a:	0049      	lsls	r1, r1, #1
    7a2c:	f10e 0e04 	add.w	lr, lr, #4
    7a30:	4219      	tst	r1, r3
    7a32:	d0fa      	beq.n	7a2a <_malloc_r+0x44a>
    7a34:	4670      	mov	r0, lr
    7a36:	e667      	b.n	7708 <_malloc_r+0x128>
    7a38:	f103 0810 	add.w	r8, r3, #16
    7a3c:	e6d0      	b.n	77e0 <_malloc_r+0x200>
    7a3e:	109a      	asrs	r2, r3, #2
    7a40:	f04f 0801 	mov.w	r8, #1
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	fa08 f202 	lsl.w	r2, r8, r2
    7a4a:	431a      	orrs	r2, r3
    7a4c:	607a      	str	r2, [r7, #4]
    7a4e:	e770      	b.n	7932 <_malloc_r+0x352>
    7a50:	eb02 0108 	add.w	r1, r2, r8
    7a54:	4249      	negs	r1, r1
    7a56:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    7a5a:	4651      	mov	r1, sl
    7a5c:	4620      	mov	r0, r4
    7a5e:	9200      	str	r2, [sp, #0]
    7a60:	f000 f8d2 	bl	7c08 <_sbrk_r>
    7a64:	1c43      	adds	r3, r0, #1
    7a66:	e9dd 2300 	ldrd	r2, r3, [sp]
    7a6a:	f47f aeef 	bne.w	784c <_malloc_r+0x26c>
    7a6e:	46da      	mov	sl, fp
    7a70:	e6ef      	b.n	7852 <_malloc_r+0x272>
    7a72:	2b54      	cmp	r3, #84	; 0x54
    7a74:	d825      	bhi.n	7ac2 <_malloc_r+0x4e2>
    7a76:	0b13      	lsrs	r3, r2, #12
    7a78:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    7a7c:	00c9      	lsls	r1, r1, #3
    7a7e:	336e      	adds	r3, #110	; 0x6e
    7a80:	e744      	b.n	790c <_malloc_r+0x32c>
    7a82:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7a86:	d825      	bhi.n	7ad4 <_malloc_r+0x4f4>
    7a88:	0bf3      	lsrs	r3, r6, #15
    7a8a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    7a8e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    7a92:	00c3      	lsls	r3, r0, #3
    7a94:	e5ea      	b.n	766c <_malloc_r+0x8c>
    7a96:	4b29      	ldr	r3, [pc, #164]	; (7b3c <_malloc_r+0x55c>)
    7a98:	6818      	ldr	r0, [r3, #0]
    7a9a:	4440      	add	r0, r8
    7a9c:	6018      	str	r0, [r3, #0]
    7a9e:	e6b1      	b.n	7804 <_malloc_r+0x224>
    7aa0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    7aa4:	f1bc 0f00 	cmp.w	ip, #0
    7aa8:	f47f aeac 	bne.w	7804 <_malloc_r+0x224>
    7aac:	68bd      	ldr	r5, [r7, #8]
    7aae:	44c8      	add	r8, r9
    7ab0:	f048 0001 	orr.w	r0, r8, #1
    7ab4:	6068      	str	r0, [r5, #4]
    7ab6:	e6f0      	b.n	789a <_malloc_r+0x2ba>
    7ab8:	4615      	mov	r5, r2
    7aba:	e6ee      	b.n	789a <_malloc_r+0x2ba>
    7abc:	2301      	movs	r3, #1
    7abe:	6053      	str	r3, [r2, #4]
    7ac0:	e794      	b.n	79ec <_malloc_r+0x40c>
    7ac2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7ac6:	d823      	bhi.n	7b10 <_malloc_r+0x530>
    7ac8:	0bd3      	lsrs	r3, r2, #15
    7aca:	f103 0178 	add.w	r1, r3, #120	; 0x78
    7ace:	00c9      	lsls	r1, r1, #3
    7ad0:	3377      	adds	r3, #119	; 0x77
    7ad2:	e71b      	b.n	790c <_malloc_r+0x32c>
    7ad4:	f240 5254 	movw	r2, #1364	; 0x554
    7ad8:	4293      	cmp	r3, r2
    7ada:	d823      	bhi.n	7b24 <_malloc_r+0x544>
    7adc:	0cb3      	lsrs	r3, r6, #18
    7ade:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    7ae2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    7ae6:	00c3      	lsls	r3, r0, #3
    7ae8:	e5c0      	b.n	766c <_malloc_r+0x8c>
    7aea:	f1ab 0b08 	sub.w	fp, fp, #8
    7aee:	44d8      	add	r8, fp
    7af0:	eba8 0802 	sub.w	r8, r8, r2
    7af4:	f04f 0a00 	mov.w	sl, #0
    7af8:	e6ab      	b.n	7852 <_malloc_r+0x272>
    7afa:	f105 0108 	add.w	r1, r5, #8
    7afe:	4620      	mov	r0, r4
    7b00:	9300      	str	r3, [sp, #0]
    7b02:	f000 f955 	bl	7db0 <_free_r>
    7b06:	68bd      	ldr	r5, [r7, #8]
    7b08:	9b00      	ldr	r3, [sp, #0]
    7b0a:	6868      	ldr	r0, [r5, #4]
    7b0c:	6819      	ldr	r1, [r3, #0]
    7b0e:	e6c4      	b.n	789a <_malloc_r+0x2ba>
    7b10:	f240 5154 	movw	r1, #1364	; 0x554
    7b14:	428b      	cmp	r3, r1
    7b16:	d80b      	bhi.n	7b30 <_malloc_r+0x550>
    7b18:	0c93      	lsrs	r3, r2, #18
    7b1a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    7b1e:	00c9      	lsls	r1, r1, #3
    7b20:	337c      	adds	r3, #124	; 0x7c
    7b22:	e6f3      	b.n	790c <_malloc_r+0x32c>
    7b24:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    7b28:	207f      	movs	r0, #127	; 0x7f
    7b2a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    7b2e:	e59d      	b.n	766c <_malloc_r+0x8c>
    7b30:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    7b34:	237e      	movs	r3, #126	; 0x7e
    7b36:	e6e9      	b.n	790c <_malloc_r+0x32c>
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	e770      	b.n	7a1e <_malloc_r+0x43e>
    7b3c:	2000243c 	.word	0x2000243c

00007b40 <__malloc_lock>:
    7b40:	4801      	ldr	r0, [pc, #4]	; (7b48 <__malloc_lock+0x8>)
    7b42:	f000 b89d 	b.w	7c80 <__retarget_lock_acquire_recursive>
    7b46:	bf00      	nop
    7b48:	20002438 	.word	0x20002438

00007b4c <__malloc_unlock>:
    7b4c:	4801      	ldr	r0, [pc, #4]	; (7b54 <__malloc_unlock+0x8>)
    7b4e:	f000 b899 	b.w	7c84 <__retarget_lock_release_recursive>
    7b52:	bf00      	nop
    7b54:	20002438 	.word	0x20002438

00007b58 <__cxa_atexit>:
    7b58:	4613      	mov	r3, r2
    7b5a:	460a      	mov	r2, r1
    7b5c:	4601      	mov	r1, r0
    7b5e:	2002      	movs	r0, #2
    7b60:	f000 b892 	b.w	7c88 <__register_exitproc>

00007b64 <memset>:
    7b64:	0783      	lsls	r3, r0, #30
    7b66:	b530      	push	{r4, r5, lr}
    7b68:	d048      	beq.n	7bfc <memset+0x98>
    7b6a:	1e54      	subs	r4, r2, #1
    7b6c:	2a00      	cmp	r2, #0
    7b6e:	d03f      	beq.n	7bf0 <memset+0x8c>
    7b70:	b2ca      	uxtb	r2, r1
    7b72:	4603      	mov	r3, r0
    7b74:	e001      	b.n	7b7a <memset+0x16>
    7b76:	3c01      	subs	r4, #1
    7b78:	d33a      	bcc.n	7bf0 <memset+0x8c>
    7b7a:	f803 2b01 	strb.w	r2, [r3], #1
    7b7e:	079d      	lsls	r5, r3, #30
    7b80:	d1f9      	bne.n	7b76 <memset+0x12>
    7b82:	2c03      	cmp	r4, #3
    7b84:	d92d      	bls.n	7be2 <memset+0x7e>
    7b86:	b2cd      	uxtb	r5, r1
    7b88:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7b8c:	2c0f      	cmp	r4, #15
    7b8e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    7b92:	d936      	bls.n	7c02 <memset+0x9e>
    7b94:	f1a4 0210 	sub.w	r2, r4, #16
    7b98:	f022 0c0f 	bic.w	ip, r2, #15
    7b9c:	f103 0e20 	add.w	lr, r3, #32
    7ba0:	44e6      	add	lr, ip
    7ba2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    7ba6:	f103 0210 	add.w	r2, r3, #16
    7baa:	e942 5504 	strd	r5, r5, [r2, #-16]
    7bae:	e942 5502 	strd	r5, r5, [r2, #-8]
    7bb2:	3210      	adds	r2, #16
    7bb4:	4572      	cmp	r2, lr
    7bb6:	d1f8      	bne.n	7baa <memset+0x46>
    7bb8:	f10c 0201 	add.w	r2, ip, #1
    7bbc:	f014 0f0c 	tst.w	r4, #12
    7bc0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    7bc4:	f004 0c0f 	and.w	ip, r4, #15
    7bc8:	d013      	beq.n	7bf2 <memset+0x8e>
    7bca:	f1ac 0304 	sub.w	r3, ip, #4
    7bce:	f023 0303 	bic.w	r3, r3, #3
    7bd2:	3304      	adds	r3, #4
    7bd4:	4413      	add	r3, r2
    7bd6:	f842 5b04 	str.w	r5, [r2], #4
    7bda:	4293      	cmp	r3, r2
    7bdc:	d1fb      	bne.n	7bd6 <memset+0x72>
    7bde:	f00c 0403 	and.w	r4, ip, #3
    7be2:	b12c      	cbz	r4, 7bf0 <memset+0x8c>
    7be4:	b2c9      	uxtb	r1, r1
    7be6:	441c      	add	r4, r3
    7be8:	f803 1b01 	strb.w	r1, [r3], #1
    7bec:	429c      	cmp	r4, r3
    7bee:	d1fb      	bne.n	7be8 <memset+0x84>
    7bf0:	bd30      	pop	{r4, r5, pc}
    7bf2:	4664      	mov	r4, ip
    7bf4:	4613      	mov	r3, r2
    7bf6:	2c00      	cmp	r4, #0
    7bf8:	d1f4      	bne.n	7be4 <memset+0x80>
    7bfa:	e7f9      	b.n	7bf0 <memset+0x8c>
    7bfc:	4603      	mov	r3, r0
    7bfe:	4614      	mov	r4, r2
    7c00:	e7bf      	b.n	7b82 <memset+0x1e>
    7c02:	461a      	mov	r2, r3
    7c04:	46a4      	mov	ip, r4
    7c06:	e7e0      	b.n	7bca <memset+0x66>

00007c08 <_sbrk_r>:
    7c08:	b538      	push	{r3, r4, r5, lr}
    7c0a:	4d07      	ldr	r5, [pc, #28]	; (7c28 <_sbrk_r+0x20>)
    7c0c:	2200      	movs	r2, #0
    7c0e:	4604      	mov	r4, r0
    7c10:	4608      	mov	r0, r1
    7c12:	602a      	str	r2, [r5, #0]
    7c14:	f7fe fba2 	bl	635c <_sbrk>
    7c18:	1c43      	adds	r3, r0, #1
    7c1a:	d000      	beq.n	7c1e <_sbrk_r+0x16>
    7c1c:	bd38      	pop	{r3, r4, r5, pc}
    7c1e:	682b      	ldr	r3, [r5, #0]
    7c20:	2b00      	cmp	r3, #0
    7c22:	d0fb      	beq.n	7c1c <_sbrk_r+0x14>
    7c24:	6023      	str	r3, [r4, #0]
    7c26:	bd38      	pop	{r3, r4, r5, pc}
    7c28:	2000270c 	.word	0x2000270c

00007c2c <__errno>:
    7c2c:	4b01      	ldr	r3, [pc, #4]	; (7c34 <__errno+0x8>)
    7c2e:	6818      	ldr	r0, [r3, #0]
    7c30:	4770      	bx	lr
    7c32:	bf00      	nop
    7c34:	20001718 	.word	0x20001718

00007c38 <__libc_init_array>:
    7c38:	b570      	push	{r4, r5, r6, lr}
    7c3a:	4e0d      	ldr	r6, [pc, #52]	; (7c70 <__libc_init_array+0x38>)
    7c3c:	4d0d      	ldr	r5, [pc, #52]	; (7c74 <__libc_init_array+0x3c>)
    7c3e:	1b76      	subs	r6, r6, r5
    7c40:	10b6      	asrs	r6, r6, #2
    7c42:	d006      	beq.n	7c52 <__libc_init_array+0x1a>
    7c44:	2400      	movs	r4, #0
    7c46:	f855 3b04 	ldr.w	r3, [r5], #4
    7c4a:	3401      	adds	r4, #1
    7c4c:	4798      	blx	r3
    7c4e:	42a6      	cmp	r6, r4
    7c50:	d1f9      	bne.n	7c46 <__libc_init_array+0xe>
    7c52:	4e09      	ldr	r6, [pc, #36]	; (7c78 <__libc_init_array+0x40>)
    7c54:	4d09      	ldr	r5, [pc, #36]	; (7c7c <__libc_init_array+0x44>)
    7c56:	1b76      	subs	r6, r6, r5
    7c58:	f000 f9b2 	bl	7fc0 <___init_veneer>
    7c5c:	10b6      	asrs	r6, r6, #2
    7c5e:	d006      	beq.n	7c6e <__libc_init_array+0x36>
    7c60:	2400      	movs	r4, #0
    7c62:	f855 3b04 	ldr.w	r3, [r5], #4
    7c66:	3401      	adds	r4, #1
    7c68:	4798      	blx	r3
    7c6a:	42a6      	cmp	r6, r4
    7c6c:	d1f9      	bne.n	7c62 <__libc_init_array+0x2a>
    7c6e:	bd70      	pop	{r4, r5, r6, pc}
    7c70:	60001c70 	.word	0x60001c70
    7c74:	60001c70 	.word	0x60001c70
    7c78:	60001c7c 	.word	0x60001c7c
    7c7c:	60001c70 	.word	0x60001c70

00007c80 <__retarget_lock_acquire_recursive>:
    7c80:	4770      	bx	lr
    7c82:	bf00      	nop

00007c84 <__retarget_lock_release_recursive>:
    7c84:	4770      	bx	lr
    7c86:	bf00      	nop

00007c88 <__register_exitproc>:
    7c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c8c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 7d0c <__register_exitproc+0x84>
    7c90:	4606      	mov	r6, r0
    7c92:	f8da 0000 	ldr.w	r0, [sl]
    7c96:	4698      	mov	r8, r3
    7c98:	460f      	mov	r7, r1
    7c9a:	4691      	mov	r9, r2
    7c9c:	f7ff fff0 	bl	7c80 <__retarget_lock_acquire_recursive>
    7ca0:	4b18      	ldr	r3, [pc, #96]	; (7d04 <__register_exitproc+0x7c>)
    7ca2:	681c      	ldr	r4, [r3, #0]
    7ca4:	b324      	cbz	r4, 7cf0 <__register_exitproc+0x68>
    7ca6:	6865      	ldr	r5, [r4, #4]
    7ca8:	2d1f      	cmp	r5, #31
    7caa:	dc24      	bgt.n	7cf6 <__register_exitproc+0x6e>
    7cac:	b95e      	cbnz	r6, 7cc6 <__register_exitproc+0x3e>
    7cae:	1c6b      	adds	r3, r5, #1
    7cb0:	3502      	adds	r5, #2
    7cb2:	f8da 0000 	ldr.w	r0, [sl]
    7cb6:	6063      	str	r3, [r4, #4]
    7cb8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    7cbc:	f7ff ffe2 	bl	7c84 <__retarget_lock_release_recursive>
    7cc0:	2000      	movs	r0, #0
    7cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cc6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    7cca:	2301      	movs	r3, #1
    7ccc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    7cd0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    7cd4:	40ab      	lsls	r3, r5
    7cd6:	431a      	orrs	r2, r3
    7cd8:	2e02      	cmp	r6, #2
    7cda:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    7cde:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    7ce2:	d1e4      	bne.n	7cae <__register_exitproc+0x26>
    7ce4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    7ce8:	431a      	orrs	r2, r3
    7cea:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    7cee:	e7de      	b.n	7cae <__register_exitproc+0x26>
    7cf0:	4c05      	ldr	r4, [pc, #20]	; (7d08 <__register_exitproc+0x80>)
    7cf2:	601c      	str	r4, [r3, #0]
    7cf4:	e7d7      	b.n	7ca6 <__register_exitproc+0x1e>
    7cf6:	f8da 0000 	ldr.w	r0, [sl]
    7cfa:	f7ff ffc3 	bl	7c84 <__retarget_lock_release_recursive>
    7cfe:	f04f 30ff 	mov.w	r0, #4294967295
    7d02:	e7de      	b.n	7cc2 <__register_exitproc+0x3a>
    7d04:	200022a0 	.word	0x200022a0
    7d08:	200022a4 	.word	0x200022a4
    7d0c:	200012fc 	.word	0x200012fc

00007d10 <_malloc_trim_r>:
    7d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d12:	4f24      	ldr	r7, [pc, #144]	; (7da4 <_malloc_trim_r+0x94>)
    7d14:	460c      	mov	r4, r1
    7d16:	4606      	mov	r6, r0
    7d18:	f7ff ff12 	bl	7b40 <__malloc_lock>
    7d1c:	68bb      	ldr	r3, [r7, #8]
    7d1e:	685d      	ldr	r5, [r3, #4]
    7d20:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    7d24:	310f      	adds	r1, #15
    7d26:	f025 0503 	bic.w	r5, r5, #3
    7d2a:	194b      	adds	r3, r1, r5
    7d2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    7d30:	f023 030f 	bic.w	r3, r3, #15
    7d34:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    7d38:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    7d3c:	db07      	blt.n	7d4e <_malloc_trim_r+0x3e>
    7d3e:	2100      	movs	r1, #0
    7d40:	4630      	mov	r0, r6
    7d42:	f7ff ff61 	bl	7c08 <_sbrk_r>
    7d46:	68bb      	ldr	r3, [r7, #8]
    7d48:	442b      	add	r3, r5
    7d4a:	4298      	cmp	r0, r3
    7d4c:	d004      	beq.n	7d58 <_malloc_trim_r+0x48>
    7d4e:	4630      	mov	r0, r6
    7d50:	f7ff fefc 	bl	7b4c <__malloc_unlock>
    7d54:	2000      	movs	r0, #0
    7d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d58:	4261      	negs	r1, r4
    7d5a:	4630      	mov	r0, r6
    7d5c:	f7ff ff54 	bl	7c08 <_sbrk_r>
    7d60:	3001      	adds	r0, #1
    7d62:	d00d      	beq.n	7d80 <_malloc_trim_r+0x70>
    7d64:	4a10      	ldr	r2, [pc, #64]	; (7da8 <_malloc_trim_r+0x98>)
    7d66:	68bb      	ldr	r3, [r7, #8]
    7d68:	1b2d      	subs	r5, r5, r4
    7d6a:	f045 0501 	orr.w	r5, r5, #1
    7d6e:	605d      	str	r5, [r3, #4]
    7d70:	6813      	ldr	r3, [r2, #0]
    7d72:	4630      	mov	r0, r6
    7d74:	1b1b      	subs	r3, r3, r4
    7d76:	6013      	str	r3, [r2, #0]
    7d78:	f7ff fee8 	bl	7b4c <__malloc_unlock>
    7d7c:	2001      	movs	r0, #1
    7d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d80:	2100      	movs	r1, #0
    7d82:	4630      	mov	r0, r6
    7d84:	f7ff ff40 	bl	7c08 <_sbrk_r>
    7d88:	68ba      	ldr	r2, [r7, #8]
    7d8a:	1a83      	subs	r3, r0, r2
    7d8c:	2b0f      	cmp	r3, #15
    7d8e:	ddde      	ble.n	7d4e <_malloc_trim_r+0x3e>
    7d90:	f043 0301 	orr.w	r3, r3, #1
    7d94:	6053      	str	r3, [r2, #4]
    7d96:	4b05      	ldr	r3, [pc, #20]	; (7dac <_malloc_trim_r+0x9c>)
    7d98:	4903      	ldr	r1, [pc, #12]	; (7da8 <_malloc_trim_r+0x98>)
    7d9a:	681b      	ldr	r3, [r3, #0]
    7d9c:	1ac0      	subs	r0, r0, r3
    7d9e:	6008      	str	r0, [r1, #0]
    7da0:	e7d5      	b.n	7d4e <_malloc_trim_r+0x3e>
    7da2:	bf00      	nop
    7da4:	20001308 	.word	0x20001308
    7da8:	2000243c 	.word	0x2000243c
    7dac:	20001710 	.word	0x20001710

00007db0 <_free_r>:
    7db0:	2900      	cmp	r1, #0
    7db2:	d061      	beq.n	7e78 <_free_r+0xc8>
    7db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7db6:	460c      	mov	r4, r1
    7db8:	4606      	mov	r6, r0
    7dba:	f7ff fec1 	bl	7b40 <__malloc_lock>
    7dbe:	f854 2c04 	ldr.w	r2, [r4, #-4]
    7dc2:	4f7b      	ldr	r7, [pc, #492]	; (7fb0 <_free_r+0x200>)
    7dc4:	f1a4 0508 	sub.w	r5, r4, #8
    7dc8:	f022 0101 	bic.w	r1, r2, #1
    7dcc:	eb05 0c01 	add.w	ip, r5, r1
    7dd0:	68b8      	ldr	r0, [r7, #8]
    7dd2:	f8dc 3004 	ldr.w	r3, [ip, #4]
    7dd6:	4560      	cmp	r0, ip
    7dd8:	f023 0303 	bic.w	r3, r3, #3
    7ddc:	f000 808b 	beq.w	7ef6 <_free_r+0x146>
    7de0:	07d2      	lsls	r2, r2, #31
    7de2:	f8cc 3004 	str.w	r3, [ip, #4]
    7de6:	d432      	bmi.n	7e4e <_free_r+0x9e>
    7de8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7dec:	1aad      	subs	r5, r5, r2
    7dee:	4411      	add	r1, r2
    7df0:	68aa      	ldr	r2, [r5, #8]
    7df2:	f107 0008 	add.w	r0, r7, #8
    7df6:	4282      	cmp	r2, r0
    7df8:	d06a      	beq.n	7ed0 <_free_r+0x120>
    7dfa:	eb0c 0403 	add.w	r4, ip, r3
    7dfe:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7e02:	68ec      	ldr	r4, [r5, #12]
    7e04:	60d4      	str	r4, [r2, #12]
    7e06:	f01e 0f01 	tst.w	lr, #1
    7e0a:	60a2      	str	r2, [r4, #8]
    7e0c:	f000 8097 	beq.w	7f3e <_free_r+0x18e>
    7e10:	f041 0301 	orr.w	r3, r1, #1
    7e14:	606b      	str	r3, [r5, #4]
    7e16:	f8cc 1000 	str.w	r1, [ip]
    7e1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7e1e:	d235      	bcs.n	7e8c <_free_r+0xdc>
    7e20:	6878      	ldr	r0, [r7, #4]
    7e22:	08cb      	lsrs	r3, r1, #3
    7e24:	2201      	movs	r2, #1
    7e26:	0949      	lsrs	r1, r1, #5
    7e28:	3301      	adds	r3, #1
    7e2a:	408a      	lsls	r2, r1
    7e2c:	4302      	orrs	r2, r0
    7e2e:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    7e32:	607a      	str	r2, [r7, #4]
    7e34:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    7e38:	3a08      	subs	r2, #8
    7e3a:	e9c5 1202 	strd	r1, r2, [r5, #8]
    7e3e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    7e42:	60cd      	str	r5, [r1, #12]
    7e44:	4630      	mov	r0, r6
    7e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7e4a:	f7ff be7f 	b.w	7b4c <__malloc_unlock>
    7e4e:	eb0c 0203 	add.w	r2, ip, r3
    7e52:	6852      	ldr	r2, [r2, #4]
    7e54:	07d0      	lsls	r0, r2, #31
    7e56:	d410      	bmi.n	7e7a <_free_r+0xca>
    7e58:	4419      	add	r1, r3
    7e5a:	f107 0008 	add.w	r0, r7, #8
    7e5e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    7e62:	4283      	cmp	r3, r0
    7e64:	d073      	beq.n	7f4e <_free_r+0x19e>
    7e66:	f8dc 200c 	ldr.w	r2, [ip, #12]
    7e6a:	60da      	str	r2, [r3, #12]
    7e6c:	6093      	str	r3, [r2, #8]
    7e6e:	f041 0301 	orr.w	r3, r1, #1
    7e72:	606b      	str	r3, [r5, #4]
    7e74:	5069      	str	r1, [r5, r1]
    7e76:	e7d0      	b.n	7e1a <_free_r+0x6a>
    7e78:	4770      	bx	lr
    7e7a:	f041 0301 	orr.w	r3, r1, #1
    7e7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7e82:	f844 3c04 	str.w	r3, [r4, #-4]
    7e86:	f8cc 1000 	str.w	r1, [ip]
    7e8a:	d3c9      	bcc.n	7e20 <_free_r+0x70>
    7e8c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    7e90:	ea4f 2351 	mov.w	r3, r1, lsr #9
    7e94:	d248      	bcs.n	7f28 <_free_r+0x178>
    7e96:	098b      	lsrs	r3, r1, #6
    7e98:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7e9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
    7ea0:	00c3      	lsls	r3, r0, #3
    7ea2:	18f8      	adds	r0, r7, r3
    7ea4:	58fb      	ldr	r3, [r7, r3]
    7ea6:	3808      	subs	r0, #8
    7ea8:	4298      	cmp	r0, r3
    7eaa:	d059      	beq.n	7f60 <_free_r+0x1b0>
    7eac:	685a      	ldr	r2, [r3, #4]
    7eae:	f022 0203 	bic.w	r2, r2, #3
    7eb2:	428a      	cmp	r2, r1
    7eb4:	d902      	bls.n	7ebc <_free_r+0x10c>
    7eb6:	689b      	ldr	r3, [r3, #8]
    7eb8:	4298      	cmp	r0, r3
    7eba:	d1f7      	bne.n	7eac <_free_r+0xfc>
    7ebc:	68d8      	ldr	r0, [r3, #12]
    7ebe:	e9c5 3002 	strd	r3, r0, [r5, #8]
    7ec2:	6085      	str	r5, [r0, #8]
    7ec4:	60dd      	str	r5, [r3, #12]
    7ec6:	4630      	mov	r0, r6
    7ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7ecc:	f7ff be3e 	b.w	7b4c <__malloc_unlock>
    7ed0:	eb0c 0203 	add.w	r2, ip, r3
    7ed4:	6852      	ldr	r2, [r2, #4]
    7ed6:	07d2      	lsls	r2, r2, #31
    7ed8:	d463      	bmi.n	7fa2 <_free_r+0x1f2>
    7eda:	440b      	add	r3, r1
    7edc:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    7ee0:	60ca      	str	r2, [r1, #12]
    7ee2:	6091      	str	r1, [r2, #8]
    7ee4:	f043 0201 	orr.w	r2, r3, #1
    7ee8:	606a      	str	r2, [r5, #4]
    7eea:	4630      	mov	r0, r6
    7eec:	50eb      	str	r3, [r5, r3]
    7eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7ef2:	f7ff be2b 	b.w	7b4c <__malloc_unlock>
    7ef6:	440b      	add	r3, r1
    7ef8:	07d1      	lsls	r1, r2, #31
    7efa:	d407      	bmi.n	7f0c <_free_r+0x15c>
    7efc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7f00:	1aad      	subs	r5, r5, r2
    7f02:	4413      	add	r3, r2
    7f04:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    7f08:	60ca      	str	r2, [r1, #12]
    7f0a:	6091      	str	r1, [r2, #8]
    7f0c:	f043 0201 	orr.w	r2, r3, #1
    7f10:	606a      	str	r2, [r5, #4]
    7f12:	4a28      	ldr	r2, [pc, #160]	; (7fb4 <_free_r+0x204>)
    7f14:	60bd      	str	r5, [r7, #8]
    7f16:	6812      	ldr	r2, [r2, #0]
    7f18:	429a      	cmp	r2, r3
    7f1a:	d893      	bhi.n	7e44 <_free_r+0x94>
    7f1c:	4b26      	ldr	r3, [pc, #152]	; (7fb8 <_free_r+0x208>)
    7f1e:	4630      	mov	r0, r6
    7f20:	6819      	ldr	r1, [r3, #0]
    7f22:	f7ff fef5 	bl	7d10 <_malloc_trim_r>
    7f26:	e78d      	b.n	7e44 <_free_r+0x94>
    7f28:	2b14      	cmp	r3, #20
    7f2a:	d90a      	bls.n	7f42 <_free_r+0x192>
    7f2c:	2b54      	cmp	r3, #84	; 0x54
    7f2e:	d81f      	bhi.n	7f70 <_free_r+0x1c0>
    7f30:	0b0b      	lsrs	r3, r1, #12
    7f32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    7f36:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    7f3a:	00c3      	lsls	r3, r0, #3
    7f3c:	e7b1      	b.n	7ea2 <_free_r+0xf2>
    7f3e:	4419      	add	r1, r3
    7f40:	e78d      	b.n	7e5e <_free_r+0xae>
    7f42:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    7f46:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    7f4a:	00c3      	lsls	r3, r0, #3
    7f4c:	e7a9      	b.n	7ea2 <_free_r+0xf2>
    7f4e:	f041 0301 	orr.w	r3, r1, #1
    7f52:	e9c7 5504 	strd	r5, r5, [r7, #16]
    7f56:	e9c5 0002 	strd	r0, r0, [r5, #8]
    7f5a:	606b      	str	r3, [r5, #4]
    7f5c:	5069      	str	r1, [r5, r1]
    7f5e:	e771      	b.n	7e44 <_free_r+0x94>
    7f60:	6879      	ldr	r1, [r7, #4]
    7f62:	1092      	asrs	r2, r2, #2
    7f64:	2401      	movs	r4, #1
    7f66:	fa04 f202 	lsl.w	r2, r4, r2
    7f6a:	430a      	orrs	r2, r1
    7f6c:	607a      	str	r2, [r7, #4]
    7f6e:	e7a6      	b.n	7ebe <_free_r+0x10e>
    7f70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7f74:	d806      	bhi.n	7f84 <_free_r+0x1d4>
    7f76:	0bcb      	lsrs	r3, r1, #15
    7f78:	f103 0078 	add.w	r0, r3, #120	; 0x78
    7f7c:	f103 0277 	add.w	r2, r3, #119	; 0x77
    7f80:	00c3      	lsls	r3, r0, #3
    7f82:	e78e      	b.n	7ea2 <_free_r+0xf2>
    7f84:	f240 5254 	movw	r2, #1364	; 0x554
    7f88:	4293      	cmp	r3, r2
    7f8a:	d806      	bhi.n	7f9a <_free_r+0x1ea>
    7f8c:	0c8b      	lsrs	r3, r1, #18
    7f8e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    7f92:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    7f96:	00c3      	lsls	r3, r0, #3
    7f98:	e783      	b.n	7ea2 <_free_r+0xf2>
    7f9a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    7f9e:	227e      	movs	r2, #126	; 0x7e
    7fa0:	e77f      	b.n	7ea2 <_free_r+0xf2>
    7fa2:	f041 0301 	orr.w	r3, r1, #1
    7fa6:	606b      	str	r3, [r5, #4]
    7fa8:	f8cc 1000 	str.w	r1, [ip]
    7fac:	e74a      	b.n	7e44 <_free_r+0x94>
    7fae:	bf00      	nop
    7fb0:	20001308 	.word	0x20001308
    7fb4:	20001714 	.word	0x20001714
    7fb8:	2000246c 	.word	0x2000246c
    7fbc:	00000000 	.word	0x00000000

00007fc0 <___init_veneer>:
    7fc0:	f85f f000 	ldr.w	pc, [pc]	; 7fc4 <___init_veneer+0x4>
    7fc4:	60001c29 	.word	0x60001c29

00007fc8 <___ZN7TwoWire5beginEv_veneer>:
    7fc8:	f85f f000 	ldr.w	pc, [pc]	; 7fcc <___ZN7TwoWire5beginEv_veneer+0x4>
    7fcc:	60001785 	.word	0x60001785

00007fd0 <___reboot_Teensyduino__veneer>:
    7fd0:	f85f f000 	ldr.w	pc, [pc]	; 7fd4 <___reboot_Teensyduino__veneer+0x4>
    7fd4:	60001b81 	.word	0x60001b81
	...

Disassembly of section .fini:

00007fe0 <_fini>:
    7fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fe2:	bf00      	nop
